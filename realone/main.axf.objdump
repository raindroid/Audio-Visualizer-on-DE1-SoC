
E:/ece243/project/ece243project/realone/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 64 46 00 00 68 46 00 00 6c 46 00 00     @...dF..hF..lF..
      30:	70 46 00 00 60 46 00 00 74 46 00 00 78 46 00 00     pF..`F..tF..xF..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb001148 	bl	45fc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00006968 	.word	0x00006968

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00006e00 	.word	0x00006e00

00000124 <__cs3_heap_start_ptr>:
     124:	00010a88 	.word	0x00010a88

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00006e08 	.word	0x00006e08
     170:	00006e0b 	.word	0x00006e0b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00006e08 	.word	0x00006e08
     1bc:	00006e08 	.word	0x00006e08
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00006e08 	.word	0x00006e08
     200:	00000000 	.word	0x00000000
     204:	00004704 	.word	0x00004704

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004704 	.word	0x00004704
     250:	00006e0c 	.word	0x00006e0c
     254:	00006968 	.word	0x00006968
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "tests/tests.h"

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
    // led_test();
    // uart_test();
    //audio_test();
    // hex_test();
    audio_transform_test();
     264:	eb0003b1 	bl	1130 <audio_transform_test>
    //display_test();

    for (;;); 
     268:	eafffffe 	b	268 <main+0xc>

0000026c <VIS_ERROR_Handler>:
#include "values.h"
void VIS_ERROR_Handler() {
     26c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     270:	e28db000 	add	r11, sp, #0
    // if error happens, stop here
    for (;;);
     274:	eafffffe 	b	274 <VIS_ERROR_Handler+0x8>

00000278 <VIS_Uart_TxChar>:
#include "JTAG_UART.h"

static volatile int * red_LED_ptr = (int *)0xFF200000;
const char intToChar[10] = {'0','1','2','3','4','5','6','7','8','9'};  

void VIS_Uart_TxChar(volatile int * JTAG_UART_ptr, char c) {
     278:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     27c:	e28db000 	add	r11, sp, #0
     280:	e24dd00c 	sub	sp, sp, #12
     284:	e50b0008 	str	r0, [r11, #-8]
     288:	e1a03001 	mov	r3, r1
     28c:	e54b3009 	strb	r3, [r11, #-9]
    *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     290:	e3063970 	movw	r3, #26992	; 0x6970
     294:	e3403000 	movt	r3, #0
     298:	e5933000 	ldr	r3, [r3]
     29c:	e3a02001 	mov	r2, #1
     2a0:	e5832000 	str	r2, [r3]
    while (!((*(JTAG_UART_ptr + 1)) & 0xFFFF0000)) {
     2a4:	e1a00000 	nop			; (mov r0, r0)
     2a8:	e51b3008 	ldr	r3, [r11, #-8]
     2ac:	e2833004 	add	r3, r3, #4
     2b0:	e5933000 	ldr	r3, [r3]
     2b4:	e1a03823 	lsr	r3, r3, #16
     2b8:	e1a03803 	lsl	r3, r3, #16
     2bc:	e3530000 	cmp	r3, #0
     2c0:	0afffff8 	beq	2a8 <VIS_Uart_TxChar+0x30>
        // if space, echo character, else wait
    } 
    *(JTAG_UART_ptr) = c;
     2c4:	e55b2009 	ldrb	r2, [r11, #-9]
     2c8:	e51b3008 	ldr	r3, [r11, #-8]
     2cc:	e5832000 	str	r2, [r3]
    *(red_LED_ptr) = 0x0; // turn off LEDR[0]
     2d0:	e3063970 	movw	r3, #26992	; 0x6970
     2d4:	e3403000 	movt	r3, #0
     2d8:	e5933000 	ldr	r3, [r3]
     2dc:	e3a02000 	mov	r2, #0
     2e0:	e5832000 	str	r2, [r3]
}
     2e4:	e28bd000 	add	sp, r11, #0
     2e8:	e8bd0800 	ldmfd	sp!, {r11}
     2ec:	e12fff1e 	bx	lr

000002f0 <VIS_Uart_Tx>:

void VIS_Uart_Tx(volatile int * JTAG_UART_ptr, char * s, int size) {
     2f0:	e92d4800 	push	{r11, lr}
     2f4:	e28db004 	add	r11, sp, #4
     2f8:	e24dd018 	sub	sp, sp, #24
     2fc:	e50b0010 	str	r0, [r11, #-16]
     300:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
     304:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    
    for (int i = 0; i < size; i++)
     308:	e3a03000 	mov	r3, #0
     30c:	e50b3008 	str	r3, [r11, #-8]
     310:	ea000009 	b	33c <VIS_Uart_Tx+0x4c>
        VIS_Uart_TxChar(JTAG_UART_ptr, s[i]);
     314:	e51b3008 	ldr	r3, [r11, #-8]
     318:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     31c:	e0823003 	add	r3, r2, r3
     320:	e5d33000 	ldrb	r3, [r3]
     324:	e51b0010 	ldr	r0, [r11, #-16]
     328:	e1a01003 	mov	r1, r3
     32c:	ebffffd1 	bl	278 <VIS_Uart_TxChar>
    *(red_LED_ptr) = 0x0; // turn off LEDR[0]
}

void VIS_Uart_Tx(volatile int * JTAG_UART_ptr, char * s, int size) {
    
    for (int i = 0; i < size; i++)
     330:	e51b3008 	ldr	r3, [r11, #-8]
     334:	e2833001 	add	r3, r3, #1
     338:	e50b3008 	str	r3, [r11, #-8]
     33c:	e51b2008 	ldr	r2, [r11, #-8]
     340:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     344:	e1520003 	cmp	r2, r3
     348:	bafffff1 	blt	314 <VIS_Uart_Tx+0x24>
        VIS_Uart_TxChar(JTAG_UART_ptr, s[i]);
}
     34c:	e24bd004 	sub	sp, r11, #4
     350:	e8bd8800 	pop	{r11, pc}

00000354 <VIS_UART_TxInt>:

void VIS_UART_TxInt(volatile int * JTAG_UART_ptr, int num) {
     354:	e92d4800 	push	{r11, lr}
     358:	e28db004 	add	r11, sp, #4
     35c:	e24dd010 	sub	sp, sp, #16
     360:	e50b0010 	str	r0, [r11, #-16]
     364:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    if (num < 0) {
     368:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     36c:	e3530000 	cmp	r3, #0
     370:	aa000005 	bge	38c <VIS_UART_TxInt+0x38>
        num = -num;
     374:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     378:	e2633000 	rsb	r3, r3, #0
     37c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        VIS_Uart_TxChar(JTAG_UART_ptr, '-');
     380:	e51b0010 	ldr	r0, [r11, #-16]
     384:	e3a0102d 	mov	r1, #45	; 0x2d
     388:	ebffffba 	bl	278 <VIS_Uart_TxChar>
    }
    if (num < 10) {
     38c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     390:	e3530009 	cmp	r3, #9
     394:	ca000008 	bgt	3bc <VIS_UART_TxInt+0x68>
        VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num]);
     398:	e3043708 	movw	r3, #18184	; 0x4708
     39c:	e3403000 	movt	r3, #0
     3a0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     3a4:	e0833002 	add	r3, r3, r2
     3a8:	e5d33000 	ldrb	r3, [r3]
     3ac:	e51b0010 	ldr	r0, [r11, #-16]
     3b0:	e1a01003 	mov	r1, r3
     3b4:	ebffffaf 	bl	278 <VIS_Uart_TxChar>
     3b8:	ea00002b 	b	46c <VIS_UART_TxInt+0x118>
    } else {
        int tens = 1;
     3bc:	e3a03001 	mov	r3, #1
     3c0:	e50b3008 	str	r3, [r11, #-8]
        while (num / tens > 0) tens *= 10;
     3c4:	ea000005 	b	3e0 <VIS_UART_TxInt+0x8c>
     3c8:	e51b2008 	ldr	r2, [r11, #-8]
     3cc:	e1a03002 	mov	r3, r2
     3d0:	e1a03103 	lsl	r3, r3, #2
     3d4:	e0833002 	add	r3, r3, r2
     3d8:	e1a03083 	lsl	r3, r3, #1
     3dc:	e50b3008 	str	r3, [r11, #-8]
     3e0:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     3e4:	e51b1008 	ldr	r1, [r11, #-8]
     3e8:	eb000c48 	bl	3510 <__aeabi_idiv>
     3ec:	e1a03000 	mov	r3, r0
     3f0:	e3530000 	cmp	r3, #0
     3f4:	cafffff3 	bgt	3c8 <VIS_UART_TxInt+0x74>
        while (tens > 1) {
     3f8:	ea000018 	b	460 <VIS_UART_TxInt+0x10c>
            tens /= 10;
     3fc:	e51b2008 	ldr	r2, [r11, #-8]
     400:	e3063667 	movw	r3, #26215	; 0x6667
     404:	e3463666 	movt	r3, #26214	; 0x6666
     408:	e0c31293 	smull	r1, r3, r3, r2
     40c:	e1a01143 	asr	r1, r3, #2
     410:	e1a03fc2 	asr	r3, r2, #31
     414:	e0633001 	rsb	r3, r3, r1
     418:	e50b3008 	str	r3, [r11, #-8]
            VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num / tens]);
     41c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     420:	e51b1008 	ldr	r1, [r11, #-8]
     424:	eb000c39 	bl	3510 <__aeabi_idiv>
     428:	e1a03000 	mov	r3, r0
     42c:	e1a02003 	mov	r2, r3
     430:	e3043708 	movw	r3, #18184	; 0x4708
     434:	e3403000 	movt	r3, #0
     438:	e7d33002 	ldrb	r3, [r3, r2]
     43c:	e51b0010 	ldr	r0, [r11, #-16]
     440:	e1a01003 	mov	r1, r3
     444:	ebffff8b 	bl	278 <VIS_Uart_TxChar>
            num %= tens;
     448:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     44c:	e1a00003 	mov	r0, r3
     450:	e51b1008 	ldr	r1, [r11, #-8]
     454:	eb000c77 	bl	3638 <__aeabi_idivmod>
     458:	e1a03001 	mov	r3, r1
     45c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    if (num < 10) {
        VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num]);
    } else {
        int tens = 1;
        while (num / tens > 0) tens *= 10;
        while (tens > 1) {
     460:	e51b3008 	ldr	r3, [r11, #-8]
     464:	e3530001 	cmp	r3, #1
     468:	caffffe3 	bgt	3fc <VIS_UART_TxInt+0xa8>
            tens /= 10;
            VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num / tens]);
            num %= tens;
        }
    }
}
     46c:	e24bd004 	sub	sp, r11, #4
     470:	e8bd8800 	pop	{r11, pc}

00000474 <VIS_UART_TxEnter>:

void VIS_UART_TxEnter(volatile int * JTAG_UART_ptr) {
     474:	e92d4800 	push	{r11, lr}
     478:	e28db004 	add	r11, sp, #4
     47c:	e24dd008 	sub	sp, sp, #8
     480:	e50b0008 	str	r0, [r11, #-8]
    VIS_Uart_TxChar(JTAG_UART_ptr, '\r');
     484:	e51b0008 	ldr	r0, [r11, #-8]
     488:	e3a0100d 	mov	r1, #13
     48c:	ebffff79 	bl	278 <VIS_Uart_TxChar>
    VIS_Uart_TxChar(JTAG_UART_ptr, '\n');
     490:	e51b0008 	ldr	r0, [r11, #-8]
     494:	e3a0100a 	mov	r1, #10
     498:	ebffff76 	bl	278 <VIS_Uart_TxChar>
}
     49c:	e24bd004 	sub	sp, r11, #4
     4a0:	e8bd8800 	pop	{r11, pc}

000004a4 <VIS_Uart_RxChar>:

char VIS_Uart_RxChar(volatile int * JTAG_UART_ptr) {
     4a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     4a8:	e28db000 	add	r11, sp, #0
     4ac:	e24dd014 	sub	sp, sp, #20
     4b0:	e50b0010 	str	r0, [r11, #-16]
    int data;
    data = *(JTAG_UART_ptr); // read the JTAG_UART data register
     4b4:	e51b3010 	ldr	r3, [r11, #-16]
     4b8:	e5933000 	ldr	r3, [r3]
     4bc:	e50b3008 	str	r3, [r11, #-8]
    if (data & 0x00008000)   // check RVALID to see if there is new data
     4c0:	e51b3008 	ldr	r3, [r11, #-8]
     4c4:	e2033902 	and	r3, r3, #32768	; 0x8000
     4c8:	e3530000 	cmp	r3, #0
     4cc:	0a000002 	beq	4dc <VIS_Uart_RxChar+0x38>
        return ((char)data & 0xFF);
     4d0:	e51b3008 	ldr	r3, [r11, #-8]
     4d4:	e6ef3073 	uxtb	r3, r3
     4d8:	ea000000 	b	4e0 <VIS_Uart_RxChar+0x3c>
    else
        return ('\0');
     4dc:	e3a03000 	mov	r3, #0
}
     4e0:	e1a00003 	mov	r0, r3
     4e4:	e28bd000 	add	sp, r11, #0
     4e8:	e8bd0800 	ldmfd	sp!, {r11}
     4ec:	e12fff1e 	bx	lr

000004f0 <VIS_LED_Get>:
#include "LED.h"
#include "../values.h"

static volatile unsigned * red_LED_ptr = (unsigned *)0xFF200000;

unsigned VIS_LED_Get(unsigned index) {
     4f0:	e92d4800 	push	{r11, lr}
     4f4:	e28db004 	add	r11, sp, #4
     4f8:	e24dd010 	sub	sp, sp, #16
     4fc:	e50b0010 	str	r0, [r11, #-16]
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     500:	e51b3010 	ldr	r3, [r11, #-16]
     504:	e3530009 	cmp	r3, #9
     508:	9a000000 	bls	510 <VIS_LED_Get+0x20>
     50c:	ebffff56 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     510:	e3063974 	movw	r3, #26996	; 0x6974
     514:	e3403000 	movt	r3, #0
     518:	e5933000 	ldr	r3, [r3]
     51c:	e5933000 	ldr	r3, [r3]
     520:	e50b3008 	str	r3, [r11, #-8]
    return led & (0x1u << index);
     524:	e51b3010 	ldr	r3, [r11, #-16]
     528:	e3a02001 	mov	r2, #1
     52c:	e1a02312 	lsl	r2, r2, r3
     530:	e51b3008 	ldr	r3, [r11, #-8]
     534:	e0023003 	and	r3, r2, r3
}
     538:	e1a00003 	mov	r0, r3
     53c:	e24bd004 	sub	sp, r11, #4
     540:	e8bd8800 	pop	{r11, pc}

00000544 <VIS_LED_Set>:

void VIS_LED_Set(unsigned index, unsigned status) {
     544:	e92d4800 	push	{r11, lr}
     548:	e28db004 	add	r11, sp, #4
     54c:	e24dd010 	sub	sp, sp, #16
     550:	e50b0010 	str	r0, [r11, #-16]
     554:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     558:	e51b3010 	ldr	r3, [r11, #-16]
     55c:	e3530009 	cmp	r3, #9
     560:	9a000000 	bls	568 <VIS_LED_Set+0x24>
     564:	ebffff40 	bl	26c <VIS_ERROR_Handler>
    if (status != VIS_LED_SET && status != VIS_LED_RESET) VIS_ERROR_Handler();
     568:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     56c:	e3530001 	cmp	r3, #1
     570:	0a000003 	beq	584 <VIS_LED_Set+0x40>
     574:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     578:	e3530000 	cmp	r3, #0
     57c:	0a000000 	beq	584 <VIS_LED_Set+0x40>
     580:	ebffff39 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     584:	e3063974 	movw	r3, #26996	; 0x6974
     588:	e3403000 	movt	r3, #0
     58c:	e5933000 	ldr	r3, [r3]
     590:	e5933000 	ldr	r3, [r3]
     594:	e50b3008 	str	r3, [r11, #-8]
    if (status == VIS_LED_SET) {
     598:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     59c:	e3530001 	cmp	r3, #1
     5a0:	1a000006 	bne	5c0 <VIS_LED_Set+0x7c>
        led |= 0x1u << index;
     5a4:	e51b3010 	ldr	r3, [r11, #-16]
     5a8:	e3a02001 	mov	r2, #1
     5ac:	e1a03312 	lsl	r3, r2, r3
     5b0:	e51b2008 	ldr	r2, [r11, #-8]
     5b4:	e1823003 	orr	r3, r2, r3
     5b8:	e50b3008 	str	r3, [r11, #-8]
     5bc:	ea000006 	b	5dc <VIS_LED_Set+0x98>
    } else {
        led &= ~(0x1u << index);
     5c0:	e51b3010 	ldr	r3, [r11, #-16]
     5c4:	e3a02001 	mov	r2, #1
     5c8:	e1a03312 	lsl	r3, r2, r3
     5cc:	e1e03003 	mvn	r3, r3
     5d0:	e51b2008 	ldr	r2, [r11, #-8]
     5d4:	e0023003 	and	r3, r2, r3
     5d8:	e50b3008 	str	r3, [r11, #-8]
    }
    *(red_LED_ptr) = led;
     5dc:	e3063974 	movw	r3, #26996	; 0x6974
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5933000 	ldr	r3, [r3]
     5e8:	e51b2008 	ldr	r2, [r11, #-8]
     5ec:	e5832000 	str	r2, [r3]
}
     5f0:	e24bd004 	sub	sp, r11, #4
     5f4:	e8bd8800 	pop	{r11, pc}

000005f8 <VIS_LED_Toggle>:

unsigned VIS_LED_Toggle(unsigned index) {
     5f8:	e92d4800 	push	{r11, lr}
     5fc:	e28db004 	add	r11, sp, #4
     600:	e24dd010 	sub	sp, sp, #16
     604:	e50b0010 	str	r0, [r11, #-16]
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     608:	e51b3010 	ldr	r3, [r11, #-16]
     60c:	e3530009 	cmp	r3, #9
     610:	9a000000 	bls	618 <VIS_LED_Toggle+0x20>
     614:	ebffff14 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     618:	e3063974 	movw	r3, #26996	; 0x6974
     61c:	e3403000 	movt	r3, #0
     620:	e5933000 	ldr	r3, [r3]
     624:	e5933000 	ldr	r3, [r3]
     628:	e50b3008 	str	r3, [r11, #-8]
    led ^= 0x1u << index;
     62c:	e51b3010 	ldr	r3, [r11, #-16]
     630:	e3a02001 	mov	r2, #1
     634:	e1a03312 	lsl	r3, r2, r3
     638:	e51b2008 	ldr	r2, [r11, #-8]
     63c:	e0223003 	eor	r3, r2, r3
     640:	e50b3008 	str	r3, [r11, #-8]
    *(red_LED_ptr) = led;
     644:	e3063974 	movw	r3, #26996	; 0x6974
     648:	e3403000 	movt	r3, #0
     64c:	e5933000 	ldr	r3, [r3]
     650:	e51b2008 	ldr	r2, [r11, #-8]
     654:	e5832000 	str	r2, [r3]
    return led & (0x1u << index);
     658:	e51b3010 	ldr	r3, [r11, #-16]
     65c:	e3a02001 	mov	r2, #1
     660:	e1a02312 	lsl	r2, r2, r3
     664:	e51b3008 	ldr	r3, [r11, #-8]
     668:	e0023003 	and	r3, r2, r3
}
     66c:	e1a00003 	mov	r0, r3
     670:	e24bd004 	sub	sp, r11, #4
     674:	e8bd8800 	pop	{r11, pc}

00000678 <VIS_LED_SetAll>:

void VIS_LED_SetAll() {
     678:	e92d4800 	push	{r11, lr}
     67c:	e28db004 	add	r11, sp, #4
     680:	e24dd008 	sub	sp, sp, #8
    for (unsigned i = 0; i <= 9; i++) {
     684:	e3a03000 	mov	r3, #0
     688:	e50b3008 	str	r3, [r11, #-8]
     68c:	ea000005 	b	6a8 <VIS_LED_SetAll+0x30>
        VIS_LED_Set(i, VIS_LED_SET);
     690:	e51b0008 	ldr	r0, [r11, #-8]
     694:	e3a01001 	mov	r1, #1
     698:	ebffffa9 	bl	544 <VIS_LED_Set>
    *(red_LED_ptr) = led;
    return led & (0x1u << index);
}

void VIS_LED_SetAll() {
    for (unsigned i = 0; i <= 9; i++) {
     69c:	e51b3008 	ldr	r3, [r11, #-8]
     6a0:	e2833001 	add	r3, r3, #1
     6a4:	e50b3008 	str	r3, [r11, #-8]
     6a8:	e51b3008 	ldr	r3, [r11, #-8]
     6ac:	e3530009 	cmp	r3, #9
     6b0:	9afffff6 	bls	690 <VIS_LED_SetAll+0x18>
        VIS_LED_Set(i, VIS_LED_SET);
    }
}
     6b4:	e24bd004 	sub	sp, r11, #4
     6b8:	e8bd8800 	pop	{r11, pc}

000006bc <VIS_LED_ResetAll>:
void VIS_LED_ResetAll() {
     6bc:	e92d4800 	push	{r11, lr}
     6c0:	e28db004 	add	r11, sp, #4
     6c4:	e24dd008 	sub	sp, sp, #8
    for (unsigned i = 0; i <= 9; i++) {
     6c8:	e3a03000 	mov	r3, #0
     6cc:	e50b3008 	str	r3, [r11, #-8]
     6d0:	ea000005 	b	6ec <VIS_LED_ResetAll+0x30>
        VIS_LED_Set(i, VIS_LED_RESET);
     6d4:	e51b0008 	ldr	r0, [r11, #-8]
     6d8:	e3a01000 	mov	r1, #0
     6dc:	ebffff98 	bl	544 <VIS_LED_Set>
    for (unsigned i = 0; i <= 9; i++) {
        VIS_LED_Set(i, VIS_LED_SET);
    }
}
void VIS_LED_ResetAll() {
    for (unsigned i = 0; i <= 9; i++) {
     6e0:	e51b3008 	ldr	r3, [r11, #-8]
     6e4:	e2833001 	add	r3, r3, #1
     6e8:	e50b3008 	str	r3, [r11, #-8]
     6ec:	e51b3008 	ldr	r3, [r11, #-8]
     6f0:	e3530009 	cmp	r3, #9
     6f4:	9afffff6 	bls	6d4 <VIS_LED_ResetAll+0x18>
        VIS_LED_Set(i, VIS_LED_RESET);
    }
     6f8:	e24bd004 	sub	sp, r11, #4
     6fc:	e8bd8800 	pop	{r11, pc}

00000700 <VIS_HEX_Set>:
    [0x4] = 0b1100110, 0b1101101, 0b11111101, 0b111,
    [0x8] = 0b1111111, 0b1101111, 0b1110111, 0b1111100, 
    [0xC] = 0b111001, 0b1011110, 0b1111001, 0b1110001
};

void VIS_HEX_Set(unsigned index, unsigned data) {
     700:	e92d4800 	push	{r11, lr}
     704:	e28db004 	add	r11, sp, #4
     708:	e24dd010 	sub	sp, sp, #16
     70c:	e50b0010 	str	r0, [r11, #-16]
     710:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
#ifdef DEBUG
    if (index > 6) VIS_ERROR_Handler();
     714:	e51b3010 	ldr	r3, [r11, #-16]
     718:	e3530006 	cmp	r3, #6
     71c:	9a000000 	bls	724 <VIS_HEX_Set+0x24>
     720:	ebfffed1 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    data &= 0x7F;
     724:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     728:	e203307f 	and	r3, r3, #127	; 0x7f
     72c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    if (index < 4) {
     730:	e51b3010 	ldr	r3, [r11, #-16]
     734:	e3530003 	cmp	r3, #3
     738:	8a000017 	bhi	79c <VIS_HEX_Set+0x9c>
        // HEX 0 ~ 3
        unsigned original = *(HEX3_HEX0_ptr);
     73c:	e3063978 	movw	r3, #27000	; 0x6978
     740:	e3403000 	movt	r3, #0
     744:	e5933000 	ldr	r3, [r3]
     748:	e5933000 	ldr	r3, [r3]
     74c:	e50b3008 	str	r3, [r11, #-8]
        // clear the byte
        original &= ~(0xFF << (index << 3));
     750:	e51b3010 	ldr	r3, [r11, #-16]
     754:	e1a03183 	lsl	r3, r3, #3
     758:	e3a020ff 	mov	r2, #255	; 0xff
     75c:	e1a03312 	lsl	r3, r2, r3
     760:	e1e03003 	mvn	r3, r3
     764:	e51b2008 	ldr	r2, [r11, #-8]
     768:	e0023003 	and	r3, r2, r3
     76c:	e50b3008 	str	r3, [r11, #-8]
        *(HEX3_HEX0_ptr) = original | (data << (index << 3));
     770:	e3063978 	movw	r3, #27000	; 0x6978
     774:	e3403000 	movt	r3, #0
     778:	e5933000 	ldr	r3, [r3]
     77c:	e51b2010 	ldr	r2, [r11, #-16]
     780:	e1a02182 	lsl	r2, r2, #3
     784:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     788:	e1a01211 	lsl	r1, r1, r2
     78c:	e51b2008 	ldr	r2, [r11, #-8]
     790:	e1812002 	orr	r2, r1, r2
     794:	e5832000 	str	r2, [r3]
     798:	ea000018 	b	800 <VIS_HEX_Set+0x100>
    } else {
        // HEX 4 ~ 5
        unsigned original = *(HEX5_HEX4_ptr);
     79c:	e306397c 	movw	r3, #27004	; 0x697c
     7a0:	e3403000 	movt	r3, #0
     7a4:	e5933000 	ldr	r3, [r3]
     7a8:	e5933000 	ldr	r3, [r3]
     7ac:	e50b300c 	str	r3, [r11, #-12]
        // clear the byte
        original &= ~(0xFF << ((index - 4) << 3));
     7b0:	e51b3010 	ldr	r3, [r11, #-16]
     7b4:	e2433004 	sub	r3, r3, #4
     7b8:	e1a03183 	lsl	r3, r3, #3
     7bc:	e3a020ff 	mov	r2, #255	; 0xff
     7c0:	e1a03312 	lsl	r3, r2, r3
     7c4:	e1e03003 	mvn	r3, r3
     7c8:	e51b200c 	ldr	r2, [r11, #-12]
     7cc:	e0023003 	and	r3, r2, r3
     7d0:	e50b300c 	str	r3, [r11, #-12]
        *(HEX5_HEX4_ptr) = original | (data << ((index - 4) << 3));
     7d4:	e306397c 	movw	r3, #27004	; 0x697c
     7d8:	e3403000 	movt	r3, #0
     7dc:	e5933000 	ldr	r3, [r3]
     7e0:	e51b2010 	ldr	r2, [r11, #-16]
     7e4:	e2422004 	sub	r2, r2, #4
     7e8:	e1a02182 	lsl	r2, r2, #3
     7ec:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     7f0:	e1a01211 	lsl	r1, r1, r2
     7f4:	e51b200c 	ldr	r2, [r11, #-12]
     7f8:	e1812002 	orr	r2, r1, r2
     7fc:	e5832000 	str	r2, [r3]
    }
}
     800:	e24bd004 	sub	sp, r11, #4
     804:	e8bd8800 	pop	{r11, pc}

00000808 <VIS_HEX_SetDigit>:

void VIS_HEX_SetDigit(unsigned index, unsigned data) {
     808:	e92d4800 	push	{r11, lr}
     80c:	e28db004 	add	r11, sp, #4
     810:	e24dd008 	sub	sp, sp, #8
     814:	e50b0008 	str	r0, [r11, #-8]
     818:	e50b100c 	str	r1, [r11, #-12]
#ifdef DEBUG
    if (index > 6) VIS_ERROR_Handler();
     81c:	e51b3008 	ldr	r3, [r11, #-8]
     820:	e3530006 	cmp	r3, #6
     824:	9a000000 	bls	82c <VIS_HEX_SetDigit+0x24>
     828:	ebfffe8f 	bl	26c <VIS_ERROR_Handler>
    if (data > 0xF) VIS_ERROR_Handler();
     82c:	e51b300c 	ldr	r3, [r11, #-12]
     830:	e353000f 	cmp	r3, #15
     834:	9a000000 	bls	83c <VIS_HEX_SetDigit+0x34>
     838:	ebfffe8b 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    VIS_HEX_Set(index, HEX_HEXs[data]);
     83c:	e3063980 	movw	r3, #27008	; 0x6980
     840:	e3403000 	movt	r3, #0
     844:	e51b200c 	ldr	r2, [r11, #-12]
     848:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     84c:	e51b0008 	ldr	r0, [r11, #-8]
     850:	e1a01003 	mov	r1, r3
     854:	ebffffa9 	bl	700 <VIS_HEX_Set>
}
     858:	e24bd004 	sub	sp, r11, #4
     85c:	e8bd8800 	pop	{r11, pc}

00000860 <VIS_HEX_SetUint_HEX>:

void VIS_HEX_SetUint_HEX(unsigned data) {
     860:	e92d4800 	push	{r11, lr}
     864:	e28db004 	add	r11, sp, #4
     868:	e24dd010 	sub	sp, sp, #16
     86c:	e50b0010 	str	r0, [r11, #-16]
    data &= 0xFFFFFF;
     870:	e51b3010 	ldr	r3, [r11, #-16]
     874:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
     878:	e50b3010 	str	r3, [r11, #-16]
    for (unsigned i = 0; i <= 5; i++) {
     87c:	e3a03000 	mov	r3, #0
     880:	e50b3008 	str	r3, [r11, #-8]
     884:	ea00000a 	b	8b4 <VIS_HEX_SetUint_HEX+0x54>
        VIS_HEX_SetDigit(i, data & (0xF));
     888:	e51b3010 	ldr	r3, [r11, #-16]
     88c:	e203300f 	and	r3, r3, #15
     890:	e51b0008 	ldr	r0, [r11, #-8]
     894:	e1a01003 	mov	r1, r3
     898:	ebffffda 	bl	808 <VIS_HEX_SetDigit>
        data >>= 4;
     89c:	e51b3010 	ldr	r3, [r11, #-16]
     8a0:	e1a03223 	lsr	r3, r3, #4
     8a4:	e50b3010 	str	r3, [r11, #-16]
    VIS_HEX_Set(index, HEX_HEXs[data]);
}

void VIS_HEX_SetUint_HEX(unsigned data) {
    data &= 0xFFFFFF;
    for (unsigned i = 0; i <= 5; i++) {
     8a8:	e51b3008 	ldr	r3, [r11, #-8]
     8ac:	e2833001 	add	r3, r3, #1
     8b0:	e50b3008 	str	r3, [r11, #-8]
     8b4:	e51b3008 	ldr	r3, [r11, #-8]
     8b8:	e3530005 	cmp	r3, #5
     8bc:	9afffff1 	bls	888 <VIS_HEX_SetUint_HEX+0x28>
        VIS_HEX_SetDigit(i, data & (0xF));
        data >>= 4;
    }
}
     8c0:	e24bd004 	sub	sp, r11, #4
     8c4:	e8bd8800 	pop	{r11, pc}

000008c8 <VIS_HEX_SetUint_DEC>:

void VIS_HEX_SetUint_DEC(unsigned data) {
     8c8:	e92d4800 	push	{r11, lr}
     8cc:	e28db004 	add	r11, sp, #4
     8d0:	e24dd010 	sub	sp, sp, #16
     8d4:	e50b0010 	str	r0, [r11, #-16]
    data %= 1000000;
     8d8:	e51b2010 	ldr	r2, [r11, #-16]
     8dc:	e30d3e83 	movw	r3, #56963	; 0xde83
     8e0:	e344331b 	movt	r3, #17179	; 0x431b
     8e4:	e0831293 	umull	r1, r3, r3, r2
     8e8:	e1a01923 	lsr	r1, r3, #18
     8ec:	e3043240 	movw	r3, #16960	; 0x4240
     8f0:	e340300f 	movt	r3, #15
     8f4:	e0030193 	mul	r3, r3, r1
     8f8:	e0633002 	rsb	r3, r3, r2
     8fc:	e50b3010 	str	r3, [r11, #-16]
    for (unsigned i = 0; i <= 5; i++) {
     900:	e3a03000 	mov	r3, #0
     904:	e50b3008 	str	r3, [r11, #-8]
     908:	ea000015 	b	964 <VIS_HEX_SetUint_DEC+0x9c>
        VIS_HEX_SetDigit(i, data %10);
     90c:	e51b1010 	ldr	r1, [r11, #-16]
     910:	e30c3ccd 	movw	r3, #52429	; 0xcccd
     914:	e34c3ccc 	movt	r3, #52428	; 0xcccc
     918:	e0832193 	umull	r2, r3, r3, r1
     91c:	e1a021a3 	lsr	r2, r3, #3
     920:	e1a03002 	mov	r3, r2
     924:	e1a03103 	lsl	r3, r3, #2
     928:	e0833002 	add	r3, r3, r2
     92c:	e1a03083 	lsl	r3, r3, #1
     930:	e0632001 	rsb	r2, r3, r1
     934:	e51b0008 	ldr	r0, [r11, #-8]
     938:	e1a01002 	mov	r1, r2
     93c:	ebffffb1 	bl	808 <VIS_HEX_SetDigit>
        data /= 10;
     940:	e51b2010 	ldr	r2, [r11, #-16]
     944:	e30c3ccd 	movw	r3, #52429	; 0xcccd
     948:	e34c3ccc 	movt	r3, #52428	; 0xcccc
     94c:	e0831293 	umull	r1, r3, r3, r2
     950:	e1a031a3 	lsr	r3, r3, #3
     954:	e50b3010 	str	r3, [r11, #-16]
    }
}

void VIS_HEX_SetUint_DEC(unsigned data) {
    data %= 1000000;
    for (unsigned i = 0; i <= 5; i++) {
     958:	e51b3008 	ldr	r3, [r11, #-8]
     95c:	e2833001 	add	r3, r3, #1
     960:	e50b3008 	str	r3, [r11, #-8]
     964:	e51b3008 	ldr	r3, [r11, #-8]
     968:	e3530005 	cmp	r3, #5
     96c:	9affffe6 	bls	90c <VIS_HEX_SetUint_DEC+0x44>
        VIS_HEX_SetDigit(i, data %10);
        data /= 10;
    }
     970:	e24bd004 	sub	sp, r11, #4
     974:	e8bd8800 	pop	{r11, pc}

00000978 <led_test>:

static volatile int *JTAG_UART_ptr = (int *)JTAG_UART_BASE; // JTAG UART address
static volatile int * audio_ptr   = (int *)AUDIO_BASE; // Audio in address

// LED test passed
void led_test() {
     978:	e92d4800 	push	{r11, lr}
     97c:	e28db004 	add	r11, sp, #4
    VIS_LED_Set(1, VIS_LED_SET);
     980:	e3a00001 	mov	r0, #1
     984:	e3a01001 	mov	r1, #1
     988:	ebfffeed 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(3, VIS_LED_SET);
     98c:	e3a00003 	mov	r0, #3
     990:	e3a01001 	mov	r1, #1
     994:	ebfffeea 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(5, VIS_LED_SET);
     998:	e3a00005 	mov	r0, #5
     99c:	e3a01001 	mov	r1, #1
     9a0:	ebfffee7 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(7, VIS_LED_SET);
     9a4:	e3a00007 	mov	r0, #7
     9a8:	e3a01001 	mov	r1, #1
     9ac:	ebfffee4 	bl	544 <VIS_LED_Set>
    VIS_LED_Toggle(9);
     9b0:	e3a00009 	mov	r0, #9
     9b4:	ebffff0f 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Toggle(2);
     9b8:	e3a00002 	mov	r0, #2
     9bc:	ebffff0d 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Toggle(2);
     9c0:	e3a00002 	mov	r0, #2
     9c4:	ebffff0b 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Set(4, VIS_LED_SET);
     9c8:	e3a00004 	mov	r0, #4
     9cc:	e3a01001 	mov	r1, #1
     9d0:	ebfffedb 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(4, VIS_LED_RESET);
     9d4:	e3a00004 	mov	r0, #4
     9d8:	e3a01000 	mov	r1, #0
     9dc:	ebfffed8 	bl	544 <VIS_LED_Set>
}
     9e0:	e8bd8800 	pop	{r11, pc}

000009e4 <audio_test>:

void audio_test() {
     9e4:	e92d4800 	push	{r11, lr}
     9e8:	e28db004 	add	r11, sp, #4
     9ec:	e24ddc19 	sub	sp, sp, #6400	; 0x1900
     9f0:	e24dd008 	sub	sp, sp, #8
 /* used for audio record/playback */
    int fifospace, buffer_index = 0;
     9f4:	e3a03000 	mov	r3, #0
     9f8:	e50b3008 	str	r3, [r11, #-8]
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];

    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     9fc:	e30639c4 	movw	r3, #27076	; 0x69c4
     a00:	e3403000 	movt	r3, #0
     a04:	e5933000 	ldr	r3, [r3]
     a08:	e5933004 	ldr	r3, [r3, #4]
     a0c:	e50b300c 	str	r3, [r11, #-12]
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
     a10:	ea000000 	b	a18 <audio_test+0x34>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
                // reset counter
                buffer_index = 0;
            }
            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
     a14:	e1a00000 	nop			; (mov r0, r0)
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
     a18:	e1a00000 	nop			; (mov r0, r0)
     a1c:	e51b300c 	ldr	r3, [r11, #-12]
     a20:	e6ef3073 	uxtb	r3, r3
     a24:	e3530000 	cmp	r3, #0
     a28:	0afffffb 	beq	a1c <audio_test+0x38>
            *(audio_ptr + 2)  = *(audio_ptr + 2) >> 6;
     a2c:	e30639c4 	movw	r3, #27076	; 0x69c4
     a30:	e3403000 	movt	r3, #0
     a34:	e5933000 	ldr	r3, [r3]
     a38:	e2832008 	add	r2, r3, #8
     a3c:	e30639c4 	movw	r3, #27076	; 0x69c4
     a40:	e3403000 	movt	r3, #0
     a44:	e5933000 	ldr	r3, [r3]
     a48:	e2833008 	add	r3, r3, #8
     a4c:	e5933000 	ldr	r3, [r3]
     a50:	e1a03343 	asr	r3, r3, #6
     a54:	e5823000 	str	r3, [r2]
            *(audio_ptr + 3)  = *(audio_ptr + 3) >> 6;
     a58:	e30639c4 	movw	r3, #27076	; 0x69c4
     a5c:	e3403000 	movt	r3, #0
     a60:	e5933000 	ldr	r3, [r3]
     a64:	e283200c 	add	r2, r3, #12
     a68:	e30639c4 	movw	r3, #27076	; 0x69c4
     a6c:	e3403000 	movt	r3, #0
     a70:	e5933000 	ldr	r3, [r3]
     a74:	e283300c 	add	r3, r3, #12
     a78:	e5933000 	ldr	r3, [r3]
     a7c:	e1a03343 	asr	r3, r3, #6
     a80:	e5823000 	str	r3, [r2]
            ++buffer_index;
     a84:	e51b3008 	ldr	r3, [r11, #-8]
     a88:	e2833001 	add	r3, r3, #1
     a8c:	e50b3008 	str	r3, [r11, #-8]
            if (buffer_index >= 0xFFFFFF) buffer_index = 0;
     a90:	e51b2008 	ldr	r2, [r11, #-8]
     a94:	e30f3ffe 	movw	r3, #65534	; 0xfffe
     a98:	e34030ff 	movt	r3, #255	; 0xff
     a9c:	e1520003 	cmp	r2, r3
     aa0:	da000001 	ble	aac <audio_test+0xc8>
     aa4:	e3a03000 	mov	r3, #0
     aa8:	e50b3008 	str	r3, [r11, #-8]
            VIS_HEX_SetUint_HEX(buffer_index);
     aac:	e51b3008 	ldr	r3, [r11, #-8]
     ab0:	e1a00003 	mov	r0, r3
     ab4:	ebffff69 	bl	860 <VIS_HEX_SetUint_HEX>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
     ab8:	e30639c0 	movw	r3, #27072	; 0x69c0
     abc:	e3403000 	movt	r3, #0
     ac0:	e5933000 	ldr	r3, [r3]
     ac4:	e1a00003 	mov	r0, r3
     ac8:	ebfffe75 	bl	4a4 <VIS_Uart_RxChar>
     acc:	e1a03000 	mov	r3, r0
     ad0:	e3530000 	cmp	r3, #0
     ad4:	0affffce 	beq	a14 <audio_test+0x30>
                // reset counter
                buffer_index = 0;
     ad8:	e3a03000 	mov	r3, #0
     adc:	e50b3008 	str	r3, [r11, #-8]
            }
            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
     ae0:	eaffffcb 	b	a14 <audio_test+0x30>

00000ae4 <uart_test>:
        VIS_UART_TxInt(JTAG_UART_ptr, left_buffer[i]);
        VIS_Uart_Tx(JTAG_UART_ptr, "\r\n", strlen("\r\n"));
    }
}

void uart_test() {
     ae4:	e92d4810 	push	{r4, r11, lr}
     ae8:	e28db008 	add	r11, sp, #8
     aec:	e24dd024 	sub	sp, sp, #36	; 0x24
    
    char text_string[] = "\nJTAG UART test\n> \0";
     af0:	e3043714 	movw	r3, #18196	; 0x4714
     af4:	e3403000 	movt	r3, #0
     af8:	e24bc028 	sub	r12, r11, #40	; 0x28
     afc:	e1a0e003 	mov	lr, r3
     b00:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     b04:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     b08:	e59e3000 	ldr	r3, [lr]
     b0c:	e58c3000 	str	r3, [r12]
    char c;

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     b10:	e30639c0 	movw	r3, #27072	; 0x69c0
     b14:	e3403000 	movt	r3, #0
     b18:	e5934000 	ldr	r4, [r3]
     b1c:	e24b3028 	sub	r3, r11, #40	; 0x28
     b20:	e1a00003 	mov	r0, r3
     b24:	eb000de6 	bl	42c4 <strlen>
     b28:	e1a03000 	mov	r3, r0
     b2c:	e24b2028 	sub	r2, r11, #40	; 0x28
     b30:	e1a00004 	mov	r0, r4
     b34:	e1a01002 	mov	r1, r2
     b38:	e1a02003 	mov	r2, r3
     b3c:	ebfffdeb 	bl	2f0 <VIS_Uart_Tx>

    for (int i = 0; i < BUF_SIZE; i++) {
     b40:	e3a03000 	mov	r3, #0
     b44:	e50b3010 	str	r3, [r11, #-16]
     b48:	ea00000e 	b	b88 <uart_test+0xa4>
        VIS_UART_TxInt(JTAG_UART_ptr, i);
     b4c:	e30639c0 	movw	r3, #27072	; 0x69c0
     b50:	e3403000 	movt	r3, #0
     b54:	e5933000 	ldr	r3, [r3]
     b58:	e1a00003 	mov	r0, r3
     b5c:	e51b1010 	ldr	r1, [r11, #-16]
     b60:	ebfffdfb 	bl	354 <VIS_UART_TxInt>
        VIS_Uart_TxChar(JTAG_UART_ptr, ' ');
     b64:	e30639c0 	movw	r3, #27072	; 0x69c0
     b68:	e3403000 	movt	r3, #0
     b6c:	e5933000 	ldr	r3, [r3]
     b70:	e1a00003 	mov	r0, r3
     b74:	e3a01020 	mov	r1, #32
     b78:	ebfffdbe 	bl	278 <VIS_Uart_TxChar>
    char text_string[] = "\nJTAG UART test\n> \0";
    char c;

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));

    for (int i = 0; i < BUF_SIZE; i++) {
     b7c:	e51b3010 	ldr	r3, [r11, #-16]
     b80:	e2833001 	add	r3, r3, #1
     b84:	e50b3010 	str	r3, [r11, #-16]
     b88:	e51b2010 	ldr	r2, [r11, #-16]
     b8c:	e300331f 	movw	r3, #799	; 0x31f
     b90:	e1520003 	cmp	r2, r3
     b94:	daffffec 	ble	b4c <uart_test+0x68>
     b98:	ea000000 	b	ba0 <uart_test+0xbc>
        if (c != '\0') {
            VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));

            VIS_Uart_TxChar(JTAG_UART_ptr, c);
        }
    }
     b9c:	e1a00000 	nop			; (mov r0, r0)
    }

    /* read and echo characters */
    while (1)
    {
        c = VIS_Uart_RxChar(JTAG_UART_ptr);
     ba0:	e30639c0 	movw	r3, #27072	; 0x69c0
     ba4:	e3403000 	movt	r3, #0
     ba8:	e5933000 	ldr	r3, [r3]
     bac:	e1a00003 	mov	r0, r3
     bb0:	ebfffe3b 	bl	4a4 <VIS_Uart_RxChar>
     bb4:	e1a03000 	mov	r3, r0
     bb8:	e54b3011 	strb	r3, [r11, #-17]	; 0xffffffef
        if (c != '\0') {
     bbc:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
     bc0:	e3530000 	cmp	r3, #0
     bc4:	0afffff4 	beq	b9c <uart_test+0xb8>
            VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     bc8:	e30639c0 	movw	r3, #27072	; 0x69c0
     bcc:	e3403000 	movt	r3, #0
     bd0:	e5934000 	ldr	r4, [r3]
     bd4:	e24b3028 	sub	r3, r11, #40	; 0x28
     bd8:	e1a00003 	mov	r0, r3
     bdc:	eb000db8 	bl	42c4 <strlen>
     be0:	e1a03000 	mov	r3, r0
     be4:	e24b2028 	sub	r2, r11, #40	; 0x28
     be8:	e1a00004 	mov	r0, r4
     bec:	e1a01002 	mov	r1, r2
     bf0:	e1a02003 	mov	r2, r3
     bf4:	ebfffdbd 	bl	2f0 <VIS_Uart_Tx>

            VIS_Uart_TxChar(JTAG_UART_ptr, c);
     bf8:	e30639c0 	movw	r3, #27072	; 0x69c0
     bfc:	e3403000 	movt	r3, #0
     c00:	e5932000 	ldr	r2, [r3]
     c04:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
     c08:	e1a00002 	mov	r0, r2
     c0c:	e1a01003 	mov	r1, r3
     c10:	ebfffd98 	bl	278 <VIS_Uart_TxChar>
        }
    }
     c14:	eaffffe0 	b	b9c <uart_test+0xb8>

00000c18 <hex_test>:
}

void hex_test() {
     c18:	e92d4810 	push	{r4, r11, lr}
     c1c:	e28db008 	add	r11, sp, #8
     c20:	e24dd024 	sub	sp, sp, #36	; 0x24
    char text_string[] = "\nPress any key to continue\n> \0";
     c24:	e3043728 	movw	r3, #18216	; 0x4728
     c28:	e3403000 	movt	r3, #0
     c2c:	e24bc02c 	sub	r12, r11, #44	; 0x2c
     c30:	e1a0e003 	mov	lr, r3
     c34:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     c38:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     c3c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
     c40:	e8ac0007 	stmia	r12!, {r0, r1, r2}
     c44:	e1cc30b0 	strh	r3, [r12]
     c48:	e28cc002 	add	r12, r12, #2
     c4c:	e1a03823 	lsr	r3, r3, #16
     c50:	e5cc3000 	strb	r3, [r12]
    VIS_HEX_Set(0, (0x1U << 6) + 0x1U);
     c54:	e3a00000 	mov	r0, #0
     c58:	e3a01041 	mov	r1, #65	; 0x41
     c5c:	ebfffea7 	bl	700 <VIS_HEX_Set>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     c60:	e30639c0 	movw	r3, #27072	; 0x69c0
     c64:	e3403000 	movt	r3, #0
     c68:	e5934000 	ldr	r4, [r3]
     c6c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     c70:	e1a00003 	mov	r0, r3
     c74:	eb000d92 	bl	42c4 <strlen>
     c78:	e1a03000 	mov	r3, r0
     c7c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     c80:	e1a00004 	mov	r0, r4
     c84:	e1a01002 	mov	r1, r2
     c88:	e1a02003 	mov	r2, r3
     c8c:	ebfffd97 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     c90:	e1a00000 	nop			; (mov r0, r0)
     c94:	e30639c0 	movw	r3, #27072	; 0x69c0
     c98:	e3403000 	movt	r3, #0
     c9c:	e5933000 	ldr	r3, [r3]
     ca0:	e1a00003 	mov	r0, r3
     ca4:	ebfffdfe 	bl	4a4 <VIS_Uart_RxChar>
     ca8:	e1a03000 	mov	r3, r0
     cac:	e3530000 	cmp	r3, #0
     cb0:	0afffff7 	beq	c94 <hex_test+0x7c>
    VIS_HEX_SetDigit(1, 0x3);
     cb4:	e3a00001 	mov	r0, #1
     cb8:	e3a01003 	mov	r1, #3
     cbc:	ebfffed1 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     cc0:	e30639c0 	movw	r3, #27072	; 0x69c0
     cc4:	e3403000 	movt	r3, #0
     cc8:	e5934000 	ldr	r4, [r3]
     ccc:	e24b302c 	sub	r3, r11, #44	; 0x2c
     cd0:	e1a00003 	mov	r0, r3
     cd4:	eb000d7a 	bl	42c4 <strlen>
     cd8:	e1a03000 	mov	r3, r0
     cdc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     ce0:	e1a00004 	mov	r0, r4
     ce4:	e1a01002 	mov	r1, r2
     ce8:	e1a02003 	mov	r2, r3
     cec:	ebfffd7f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     cf0:	e1a00000 	nop			; (mov r0, r0)
     cf4:	e30639c0 	movw	r3, #27072	; 0x69c0
     cf8:	e3403000 	movt	r3, #0
     cfc:	e5933000 	ldr	r3, [r3]
     d00:	e1a00003 	mov	r0, r3
     d04:	ebfffde6 	bl	4a4 <VIS_Uart_RxChar>
     d08:	e1a03000 	mov	r3, r0
     d0c:	e3530000 	cmp	r3, #0
     d10:	0afffff7 	beq	cf4 <hex_test+0xdc>
    VIS_HEX_SetDigit(2, 0x2);
     d14:	e3a00002 	mov	r0, #2
     d18:	e3a01002 	mov	r1, #2
     d1c:	ebfffeb9 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     d20:	e30639c0 	movw	r3, #27072	; 0x69c0
     d24:	e3403000 	movt	r3, #0
     d28:	e5934000 	ldr	r4, [r3]
     d2c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     d30:	e1a00003 	mov	r0, r3
     d34:	eb000d62 	bl	42c4 <strlen>
     d38:	e1a03000 	mov	r3, r0
     d3c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     d40:	e1a00004 	mov	r0, r4
     d44:	e1a01002 	mov	r1, r2
     d48:	e1a02003 	mov	r2, r3
     d4c:	ebfffd67 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     d50:	e1a00000 	nop			; (mov r0, r0)
     d54:	e30639c0 	movw	r3, #27072	; 0x69c0
     d58:	e3403000 	movt	r3, #0
     d5c:	e5933000 	ldr	r3, [r3]
     d60:	e1a00003 	mov	r0, r3
     d64:	ebfffdce 	bl	4a4 <VIS_Uart_RxChar>
     d68:	e1a03000 	mov	r3, r0
     d6c:	e3530000 	cmp	r3, #0
     d70:	0afffff7 	beq	d54 <hex_test+0x13c>
    VIS_HEX_SetDigit(3, 0x1);
     d74:	e3a00003 	mov	r0, #3
     d78:	e3a01001 	mov	r1, #1
     d7c:	ebfffea1 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     d80:	e30639c0 	movw	r3, #27072	; 0x69c0
     d84:	e3403000 	movt	r3, #0
     d88:	e5934000 	ldr	r4, [r3]
     d8c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     d90:	e1a00003 	mov	r0, r3
     d94:	eb000d4a 	bl	42c4 <strlen>
     d98:	e1a03000 	mov	r3, r0
     d9c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     da0:	e1a00004 	mov	r0, r4
     da4:	e1a01002 	mov	r1, r2
     da8:	e1a02003 	mov	r2, r3
     dac:	ebfffd4f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     db0:	e1a00000 	nop			; (mov r0, r0)
     db4:	e30639c0 	movw	r3, #27072	; 0x69c0
     db8:	e3403000 	movt	r3, #0
     dbc:	e5933000 	ldr	r3, [r3]
     dc0:	e1a00003 	mov	r0, r3
     dc4:	ebfffdb6 	bl	4a4 <VIS_Uart_RxChar>
     dc8:	e1a03000 	mov	r3, r0
     dcc:	e3530000 	cmp	r3, #0
     dd0:	0afffff7 	beq	db4 <hex_test+0x19c>
    VIS_HEX_Set(4, (0x1U << 6) + 0x1U);
     dd4:	e3a00004 	mov	r0, #4
     dd8:	e3a01041 	mov	r1, #65	; 0x41
     ddc:	ebfffe47 	bl	700 <VIS_HEX_Set>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     de0:	e30639c0 	movw	r3, #27072	; 0x69c0
     de4:	e3403000 	movt	r3, #0
     de8:	e5934000 	ldr	r4, [r3]
     dec:	e24b302c 	sub	r3, r11, #44	; 0x2c
     df0:	e1a00003 	mov	r0, r3
     df4:	eb000d32 	bl	42c4 <strlen>
     df8:	e1a03000 	mov	r3, r0
     dfc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     e00:	e1a00004 	mov	r0, r4
     e04:	e1a01002 	mov	r1, r2
     e08:	e1a02003 	mov	r2, r3
     e0c:	ebfffd37 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     e10:	e1a00000 	nop			; (mov r0, r0)
     e14:	e30639c0 	movw	r3, #27072	; 0x69c0
     e18:	e3403000 	movt	r3, #0
     e1c:	e5933000 	ldr	r3, [r3]
     e20:	e1a00003 	mov	r0, r3
     e24:	ebfffd9e 	bl	4a4 <VIS_Uart_RxChar>
     e28:	e1a03000 	mov	r3, r0
     e2c:	e3530000 	cmp	r3, #0
     e30:	0afffff7 	beq	e14 <hex_test+0x1fc>
    VIS_HEX_SetDigit(5, 0xF);
     e34:	e3a00005 	mov	r0, #5
     e38:	e3a0100f 	mov	r1, #15
     e3c:	ebfffe71 	bl	808 <VIS_HEX_SetDigit>

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     e40:	e30639c0 	movw	r3, #27072	; 0x69c0
     e44:	e3403000 	movt	r3, #0
     e48:	e5934000 	ldr	r4, [r3]
     e4c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     e50:	e1a00003 	mov	r0, r3
     e54:	eb000d1a 	bl	42c4 <strlen>
     e58:	e1a03000 	mov	r3, r0
     e5c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     e60:	e1a00004 	mov	r0, r4
     e64:	e1a01002 	mov	r1, r2
     e68:	e1a02003 	mov	r2, r3
     e6c:	ebfffd1f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     e70:	e1a00000 	nop			; (mov r0, r0)
     e74:	e30639c0 	movw	r3, #27072	; 0x69c0
     e78:	e3403000 	movt	r3, #0
     e7c:	e5933000 	ldr	r3, [r3]
     e80:	e1a00003 	mov	r0, r3
     e84:	ebfffd86 	bl	4a4 <VIS_Uart_RxChar>
     e88:	e1a03000 	mov	r3, r0
     e8c:	e3530000 	cmp	r3, #0
     e90:	0afffff7 	beq	e74 <hex_test+0x25c>

    VIS_HEX_SetUint_DEC(123456);
     e94:	e30e0240 	movw	r0, #57920	; 0xe240
     e98:	e3400001 	movt	r0, #1
     e9c:	ebfffe89 	bl	8c8 <VIS_HEX_SetUint_DEC>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     ea0:	e30639c0 	movw	r3, #27072	; 0x69c0
     ea4:	e3403000 	movt	r3, #0
     ea8:	e5934000 	ldr	r4, [r3]
     eac:	e24b302c 	sub	r3, r11, #44	; 0x2c
     eb0:	e1a00003 	mov	r0, r3
     eb4:	eb000d02 	bl	42c4 <strlen>
     eb8:	e1a03000 	mov	r3, r0
     ebc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     ec0:	e1a00004 	mov	r0, r4
     ec4:	e1a01002 	mov	r1, r2
     ec8:	e1a02003 	mov	r2, r3
     ecc:	ebfffd07 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     ed0:	e1a00000 	nop			; (mov r0, r0)
     ed4:	e30639c0 	movw	r3, #27072	; 0x69c0
     ed8:	e3403000 	movt	r3, #0
     edc:	e5933000 	ldr	r3, [r3]
     ee0:	e1a00003 	mov	r0, r3
     ee4:	ebfffd6e 	bl	4a4 <VIS_Uart_RxChar>
     ee8:	e1a03000 	mov	r3, r0
     eec:	e3530000 	cmp	r3, #0
     ef0:	0afffff7 	beq	ed4 <hex_test+0x2bc>

    VIS_HEX_SetUint_HEX(0x123ACF);
     ef4:	e3030acf 	movw	r0, #15055	; 0x3acf
     ef8:	e3400012 	movt	r0, #18
     efc:	ebfffe57 	bl	860 <VIS_HEX_SetUint_HEX>
    
}
     f00:	e24bd008 	sub	sp, r11, #8
     f04:	e8bd8810 	pop	{r4, r11, pc}

00000f08 <display_test>:

void display_test() {
     f08:	e92d4810 	push	{r4, r11, lr}
     f0c:	e28db008 	add	r11, sp, #8
     f10:	e24ddefa 	sub	sp, sp, #4000	; 0xfa0
     f14:	e24dd00c 	sub	sp, sp, #12
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
     f18:	e3a00103 	mov	r0, #-1073741824	; 0xc0000000
     f1c:	e3a01332 	mov	r1, #-939524096	; 0xc8000000
     f20:	eb0003b0 	bl	1de8 <VIS_VGA_SetBuffer>
    unsigned k = 100;
     f24:	e3a03064 	mov	r3, #100	; 0x64
     f28:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    unsigned fakeSpect[MAX_LINES] = {0}; 
     f2c:	e24b3efa 	sub	r3, r11, #4000	; 0xfa0
     f30:	e243300c 	sub	r3, r3, #12
     f34:	e2433008 	sub	r3, r3, #8
     f38:	e3a02efa 	mov	r2, #4000	; 0xfa0
     f3c:	e1a00003 	mov	r0, r3
     f40:	e3a01000 	mov	r1, #0
     f44:	eb000c73 	bl	4118 <memset>
    while(1) {
        for (unsigned i = 0; i < k; i++) {
     f48:	e3a03000 	mov	r3, #0
     f4c:	e50b3010 	str	r3, [r11, #-16]
     f50:	ea00006b 	b	1104 <display_test+0x1fc>
            if (i != 0 && rand() % 10 < 2)
     f54:	e51b3010 	ldr	r3, [r11, #-16]
     f58:	e3530000 	cmp	r3, #0
     f5c:	0a00002d 	beq	1018 <display_test+0x110>
     f60:	eb000cc0 	bl	4268 <rand>
     f64:	e1a01000 	mov	r1, r0
     f68:	e3063667 	movw	r3, #26215	; 0x6667
     f6c:	e3463666 	movt	r3, #26214	; 0x6666
     f70:	e0c30193 	smull	r0, r3, r3, r1
     f74:	e1a02143 	asr	r2, r3, #2
     f78:	e1a03fc1 	asr	r3, r1, #31
     f7c:	e0632002 	rsb	r2, r3, r2
     f80:	e1a03002 	mov	r3, r2
     f84:	e1a03103 	lsl	r3, r3, #2
     f88:	e0833002 	add	r3, r3, r2
     f8c:	e1a03083 	lsl	r3, r3, #1
     f90:	e0632001 	rsb	r2, r3, r1
     f94:	e3520001 	cmp	r2, #1
     f98:	ca00001e 	bgt	1018 <display_test+0x110>
                fakeSpect[i] = fakeSpect[i - 1] + (rand() % 800 - 400);
     f9c:	e51b3010 	ldr	r3, [r11, #-16]
     fa0:	e2432001 	sub	r2, r3, #1
     fa4:	e30f3058 	movw	r3, #61528	; 0xf058
     fa8:	e34f3fff 	movt	r3, #65535	; 0xffff
     fac:	e1a02102 	lsl	r2, r2, #2
     fb0:	e24b100c 	sub	r1, r11, #12
     fb4:	e0812002 	add	r2, r1, r2
     fb8:	e0823003 	add	r3, r2, r3
     fbc:	e5934000 	ldr	r4, [r3]
     fc0:	eb000ca8 	bl	4268 <rand>
     fc4:	e1a02000 	mov	r2, r0
     fc8:	e308351f 	movw	r3, #34079	; 0x851f
     fcc:	e34531eb 	movt	r3, #20971	; 0x51eb
     fd0:	e0c30293 	smull	r0, r3, r3, r2
     fd4:	e1a01443 	asr	r1, r3, #8
     fd8:	e1a03fc2 	asr	r3, r2, #31
     fdc:	e0633001 	rsb	r3, r3, r1
     fe0:	e3a01e32 	mov	r1, #800	; 0x320
     fe4:	e0030391 	mul	r3, r1, r3
     fe8:	e0633002 	rsb	r3, r3, r2
     fec:	e0843003 	add	r3, r4, r3
     ff0:	e2432e19 	sub	r2, r3, #400	; 0x190
     ff4:	e51b1010 	ldr	r1, [r11, #-16]
     ff8:	e30f3058 	movw	r3, #61528	; 0xf058
     ffc:	e34f3fff 	movt	r3, #65535	; 0xffff
    1000:	e1a01101 	lsl	r1, r1, #2
    1004:	e24b000c 	sub	r0, r11, #12
    1008:	e0801001 	add	r1, r0, r1
    100c:	e0813003 	add	r3, r1, r3
    1010:	e5832000 	str	r2, [r3]
    1014:	ea000037 	b	10f8 <display_test+0x1f0>
            else if (rand() % 10 < 3)
    1018:	eb000c92 	bl	4268 <rand>
    101c:	e1a01000 	mov	r1, r0
    1020:	e3063667 	movw	r3, #26215	; 0x6667
    1024:	e3463666 	movt	r3, #26214	; 0x6666
    1028:	e0c32193 	smull	r2, r3, r3, r1
    102c:	e1a02143 	asr	r2, r3, #2
    1030:	e1a03fc1 	asr	r3, r1, #31
    1034:	e0632002 	rsb	r2, r3, r2
    1038:	e1a03002 	mov	r3, r2
    103c:	e1a03103 	lsl	r3, r3, #2
    1040:	e0833002 	add	r3, r3, r2
    1044:	e1a03083 	lsl	r3, r3, #1
    1048:	e0632001 	rsb	r2, r3, r1
    104c:	e3520002 	cmp	r2, #2
    1050:	ca000014 	bgt	10a8 <display_test+0x1a0>
                fakeSpect[i] = rand() % 20000;
    1054:	eb000c83 	bl	4268 <rand>
    1058:	e1a02000 	mov	r2, r0
    105c:	e3083bad 	movw	r3, #35757	; 0x8bad
    1060:	e34638db 	movt	r3, #26843	; 0x68db
    1064:	e0c30293 	smull	r0, r3, r3, r2
    1068:	e1a016c3 	asr	r1, r3, #13
    106c:	e1a03fc2 	asr	r3, r2, #31
    1070:	e0633001 	rsb	r3, r3, r1
    1074:	e3041e20 	movw	r1, #20000	; 0x4e20
    1078:	e0030391 	mul	r3, r1, r3
    107c:	e0633002 	rsb	r3, r3, r2
    1080:	e1a02003 	mov	r2, r3
    1084:	e51b1010 	ldr	r1, [r11, #-16]
    1088:	e30f3058 	movw	r3, #61528	; 0xf058
    108c:	e34f3fff 	movt	r3, #65535	; 0xffff
    1090:	e1a01101 	lsl	r1, r1, #2
    1094:	e24b000c 	sub	r0, r11, #12
    1098:	e0801001 	add	r1, r0, r1
    109c:	e0813003 	add	r3, r1, r3
    10a0:	e5832000 	str	r2, [r3]
    10a4:	ea000013 	b	10f8 <display_test+0x1f0>
            else 
                fakeSpect[i] = rand() % 12000;
    10a8:	eb000c6e 	bl	4268 <rand>
    10ac:	e1a02000 	mov	r2, r0
    10b0:	e30139f1 	movw	r3, #6641	; 0x19f1
    10b4:	e3403576 	movt	r3, #1398	; 0x576
    10b8:	e0c31293 	smull	r1, r3, r3, r2
    10bc:	e1a01443 	asr	r1, r3, #8
    10c0:	e1a03fc2 	asr	r3, r2, #31
    10c4:	e0633001 	rsb	r3, r3, r1
    10c8:	e3021ee0 	movw	r1, #12000	; 0x2ee0
    10cc:	e0030391 	mul	r3, r1, r3
    10d0:	e0633002 	rsb	r3, r3, r2
    10d4:	e1a02003 	mov	r2, r3
    10d8:	e51b1010 	ldr	r1, [r11, #-16]
    10dc:	e30f3058 	movw	r3, #61528	; 0xf058
    10e0:	e34f3fff 	movt	r3, #65535	; 0xffff
    10e4:	e1a01101 	lsl	r1, r1, #2
    10e8:	e24b000c 	sub	r0, r11, #12
    10ec:	e0801001 	add	r1, r0, r1
    10f0:	e0813003 	add	r3, r1, r3
    10f4:	e5832000 	str	r2, [r3]
void display_test() {
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
    unsigned k = 100;
    unsigned fakeSpect[MAX_LINES] = {0}; 
    while(1) {
        for (unsigned i = 0; i < k; i++) {
    10f8:	e51b3010 	ldr	r3, [r11, #-16]
    10fc:	e2833001 	add	r3, r3, #1
    1100:	e50b3010 	str	r3, [r11, #-16]
    1104:	e51b2010 	ldr	r2, [r11, #-16]
    1108:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    110c:	e1520003 	cmp	r2, r3
    1110:	3affff8f 	bcc	f54 <display_test+0x4c>
            else if (rand() % 10 < 3)
                fakeSpect[i] = rand() % 20000;
            else 
                fakeSpect[i] = rand() % 12000;
        }
        VIS_VGA_UpdateFrame(k, fakeSpect);
    1114:	e24b3efa 	sub	r3, r11, #4000	; 0xfa0
    1118:	e243300c 	sub	r3, r3, #12
    111c:	e2433008 	sub	r3, r3, #8
    1120:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
    1124:	e1a01003 	mov	r1, r3
    1128:	eb0001c3 	bl	183c <VIS_VGA_UpdateFrame>
        // VIS_VGA_ColorTest();
    }
    112c:	eaffff85 	b	f48 <display_test+0x40>

00001130 <audio_transform_test>:
}

void audio_transform_test() {
    1130:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1134:	e28db020 	add	r11, sp, #32
    1138:	e24ddd66 	sub	sp, sp, #6528	; 0x1980
    113c:	e24dd01c 	sub	sp, sp, #28
    volatile int * red_LED_ptr = (int *)LEDR_BASE;
    1140:	e3a03000 	mov	r3, #0
    1144:	e34f3f20 	movt	r3, #65312	; 0xff20
    1148:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    volatile int * audio_ptr   = (int *)AUDIO_BASE;
    114c:	e3a03dc1 	mov	r3, #12352	; 0x3040
    1150:	e34f3f20 	movt	r3, #65312	; 0xff20
    1154:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

    /* used for audio record/playback */
    int fifospace;
    int buffer_index_start = 0;
    1158:	e3a03000 	mov	r3, #0
    115c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int fourierIndex = 0;
    1160:	e3a03000 	mov	r3, #0
    1164:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    int fourierLength = 800;
    1168:	e3a03e32 	mov	r3, #800	; 0x320
    116c:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    int fourierSize = BUF_SIZE/fourierLength;
    1170:	e3a00e32 	mov	r0, #800	; 0x320
    1174:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    1178:	eb0008e4 	bl	3510 <__aeabi_idiv>
    117c:	e1a03000 	mov	r3, r0
    1180:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
    int record = 0, play = 0, vga = 0, buffer_index = 0;
    1184:	e3a03000 	mov	r3, #0
    1188:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
    118c:	e3a03000 	mov	r3, #0
    1190:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
    1194:	e3a03000 	mov	r3, #0
    1198:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
    119c:	e3a03000 	mov	r3, #0
    11a0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];
    unsigned fftamp[fourierSize][fourierLength];
    11a4:	e51be044 	ldr	lr, [r11, #-68]	; 0xffffffbc
    11a8:	e51ba048 	ldr	r10, [r11, #-72]	; 0xffffffb8
    11ac:	e24e3001 	sub	r3, lr, #1
    11b0:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
    11b4:	e1a0100e 	mov	r1, lr
    11b8:	e1a02001 	mov	r2, r1
    11bc:	e3a03000 	mov	r3, #0
    11c0:	e1a01da2 	lsr	r1, r2, #27
    11c4:	e1a05283 	lsl	r5, r3, #5
    11c8:	e1815005 	orr	r5, r1, r5
    11cc:	e1a04282 	lsl	r4, r2, #5
    11d0:	e24a3001 	sub	r3, r10, #1
    11d4:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
    11d8:	e1a0300e 	mov	r3, lr
    11dc:	e1a04003 	mov	r4, r3
    11e0:	e3a05000 	mov	r5, #0
    11e4:	e1a0300a 	mov	r3, r10
    11e8:	e1a00003 	mov	r0, r3
    11ec:	e3a01000 	mov	r1, #0
    11f0:	e0020590 	mul	r2, r0, r5
    11f4:	e0030194 	mul	r3, r4, r1
    11f8:	e082c003 	add	r12, r2, r3
    11fc:	e0832094 	umull	r2, r3, r4, r0
    1200:	e08c1003 	add	r1, r12, r3
    1204:	e1a03001 	mov	r3, r1
    1208:	e1a01da2 	lsr	r1, r2, #27
    120c:	e1a07283 	lsl	r7, r3, #5
    1210:	e1817007 	orr	r7, r1, r7
    1214:	e1a06282 	lsl	r6, r2, #5
    1218:	e1a0300e 	mov	r3, lr
    121c:	e1a04003 	mov	r4, r3
    1220:	e3a05000 	mov	r5, #0
    1224:	e1a0300a 	mov	r3, r10
    1228:	e1a00003 	mov	r0, r3
    122c:	e3a01000 	mov	r1, #0
    1230:	e0020590 	mul	r2, r0, r5
    1234:	e0030194 	mul	r3, r4, r1
    1238:	e082c003 	add	r12, r2, r3
    123c:	e0832094 	umull	r2, r3, r4, r0
    1240:	e08c1003 	add	r1, r12, r3
    1244:	e1a03001 	mov	r3, r1
    1248:	e1a01da2 	lsr	r1, r2, #27
    124c:	e1a09283 	lsl	r9, r3, #5
    1250:	e1819009 	orr	r9, r1, r9
    1254:	e1a08282 	lsl	r8, r2, #5
    1258:	e1a0200e 	mov	r2, lr
    125c:	e1a0300a 	mov	r3, r10
    1260:	e0030293 	mul	r3, r3, r2
    1264:	e1a03103 	lsl	r3, r3, #2
    1268:	e2833003 	add	r3, r3, #3
    126c:	e2833007 	add	r3, r3, #7
    1270:	e1a031a3 	lsr	r3, r3, #3
    1274:	e1a03183 	lsl	r3, r3, #3
    1278:	e04dd003 	sub	sp, sp, r3
    127c:	e1a0300d 	mov	r3, sp
    1280:	e2833003 	add	r3, r3, #3
    1284:	e1a03123 	lsr	r3, r3, #2
    1288:	e1a03103 	lsl	r3, r3, #2
    128c:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
    Complex cArray[fourierLength];
    1290:	e51b0044 	ldr	r0, [r11, #-68]	; 0xffffffbc
    1294:	e2403001 	sub	r3, r0, #1
    1298:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
    129c:	e1a01000 	mov	r1, r0
    12a0:	e1a02001 	mov	r2, r1
    12a4:	e3a03000 	mov	r3, #0
    12a8:	e1a01d22 	lsr	r1, r2, #26
    12ac:	e1a0c303 	lsl	r12, r3, #6
    12b0:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    12b4:	e58ec670 	str	r12, [lr, #1648]	; 0x670
    12b8:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    12bc:	e59cc670 	ldr	r12, [r12, #1648]	; 0x670
    12c0:	e181c00c 	orr	r12, r1, r12
    12c4:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    12c8:	e58ec670 	str	r12, [lr, #1648]	; 0x670
    12cc:	e1a0e302 	lsl	lr, r2, #6
    12d0:	e24b1a02 	sub	r1, r11, #8192	; 0x2000
    12d4:	e1a01000 	mov	r1, r0
    12d8:	e1a02001 	mov	r2, r1
    12dc:	e3a03000 	mov	r3, #0
    12e0:	e1a01d22 	lsr	r1, r2, #26
    12e4:	e1a0c303 	lsl	r12, r3, #6
    12e8:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    12ec:	e58ec668 	str	r12, [lr, #1640]	; 0x668
    12f0:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    12f4:	e59cc668 	ldr	r12, [r12, #1640]	; 0x668
    12f8:	e181c00c 	orr	r12, r1, r12
    12fc:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1300:	e58ec668 	str	r12, [lr, #1640]	; 0x668
    1304:	e1a0e302 	lsl	lr, r2, #6
    1308:	e24b1a02 	sub	r1, r11, #8192	; 0x2000
    130c:	e1a03000 	mov	r3, r0
    1310:	e1a03183 	lsl	r3, r3, #3
    1314:	e2833003 	add	r3, r3, #3
    1318:	e2833007 	add	r3, r3, #7
    131c:	e1a031a3 	lsr	r3, r3, #3
    1320:	e1a03183 	lsl	r3, r3, #3
    1324:	e04dd003 	sub	sp, sp, r3
    1328:	e1a0300d 	mov	r3, sp
    132c:	e2833003 	add	r3, r3, #3
    1330:	e1a03123 	lsr	r3, r3, #2
    1334:	e1a03103 	lsl	r3, r3, #2
    1338:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
    unsigned k = 800;
    133c:	e3a03e32 	mov	r3, #800	; 0x320
    1340:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
    unsigned count = 0;
    1344:	e3a03000 	mov	r3, #0
    1348:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

    Complex omega [fourierLength],omegaInverse[fourierLength];
    134c:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    1350:	e2413001 	sub	r3, r1, #1
    1354:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
    1358:	e1a00001 	mov	r0, r1
    135c:	e1a02000 	mov	r2, r0
    1360:	e3a03000 	mov	r3, #0
    1364:	e1a00d22 	lsr	r0, r2, #26
    1368:	e1a0c303 	lsl	r12, r3, #6
    136c:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1370:	e58ec660 	str	r12, [lr, #1632]	; 0x660
    1374:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    1378:	e59cc660 	ldr	r12, [r12, #1632]	; 0x660
    137c:	e180c00c 	orr	r12, r0, r12
    1380:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1384:	e58ec660 	str	r12, [lr, #1632]	; 0x660
    1388:	e1a0e302 	lsl	lr, r2, #6
    138c:	e24b0a02 	sub	r0, r11, #8192	; 0x2000
    1390:	e1a00001 	mov	r0, r1
    1394:	e1a02000 	mov	r2, r0
    1398:	e3a03000 	mov	r3, #0
    139c:	e1a00d22 	lsr	r0, r2, #26
    13a0:	e1a0c303 	lsl	r12, r3, #6
    13a4:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    13a8:	e58ec658 	str	r12, [lr, #1624]	; 0x658
    13ac:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    13b0:	e59cc658 	ldr	r12, [r12, #1624]	; 0x658
    13b4:	e180c00c 	orr	r12, r0, r12
    13b8:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    13bc:	e58ec658 	str	r12, [lr, #1624]	; 0x658
    13c0:	e1a0e302 	lsl	lr, r2, #6
    13c4:	e24b0a02 	sub	r0, r11, #8192	; 0x2000
    13c8:	e1a03001 	mov	r3, r1
    13cc:	e1a03183 	lsl	r3, r3, #3
    13d0:	e2833003 	add	r3, r3, #3
    13d4:	e2833007 	add	r3, r3, #7
    13d8:	e1a031a3 	lsr	r3, r3, #3
    13dc:	e1a03183 	lsl	r3, r3, #3
    13e0:	e04dd003 	sub	sp, sp, r3
    13e4:	e1a0300d 	mov	r3, sp
    13e8:	e2833003 	add	r3, r3, #3
    13ec:	e1a03123 	lsr	r3, r3, #2
    13f0:	e1a03103 	lsl	r3, r3, #2
    13f4:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
    13f8:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    13fc:	e2413001 	sub	r3, r1, #1
    1400:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
    1404:	e1a00001 	mov	r0, r1
    1408:	e1a02000 	mov	r2, r0
    140c:	e3a03000 	mov	r3, #0
    1410:	e1a00d22 	lsr	r0, r2, #26
    1414:	e1a0c303 	lsl	r12, r3, #6
    1418:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    141c:	e58ec650 	str	r12, [lr, #1616]	; 0x650
    1420:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    1424:	e59cc650 	ldr	r12, [r12, #1616]	; 0x650
    1428:	e180c00c 	orr	r12, r0, r12
    142c:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1430:	e58ec650 	str	r12, [lr, #1616]	; 0x650
    1434:	e1a0e302 	lsl	lr, r2, #6
    1438:	e24b0a02 	sub	r0, r11, #8192	; 0x2000
    143c:	e1a00001 	mov	r0, r1
    1440:	e1a02000 	mov	r2, r0
    1444:	e3a03000 	mov	r3, #0
    1448:	e1a00d22 	lsr	r0, r2, #26
    144c:	e1a0c303 	lsl	r12, r3, #6
    1450:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1454:	e58ec648 	str	r12, [lr, #1608]	; 0x648
    1458:	e24bca02 	sub	r12, r11, #8192	; 0x2000
    145c:	e59cc648 	ldr	r12, [r12, #1608]	; 0x648
    1460:	e180c00c 	orr	r12, r0, r12
    1464:	e24bea02 	sub	lr, r11, #8192	; 0x2000
    1468:	e58ec648 	str	r12, [lr, #1608]	; 0x648
    146c:	e1a0e302 	lsl	lr, r2, #6
    1470:	e24b0a02 	sub	r0, r11, #8192	; 0x2000
    1474:	e1a03001 	mov	r3, r1
    1478:	e1a03183 	lsl	r3, r3, #3
    147c:	e2833003 	add	r3, r3, #3
    1480:	e2833007 	add	r3, r3, #7
    1484:	e1a031a3 	lsr	r3, r3, #3
    1488:	e1a03183 	lsl	r3, r3, #3
    148c:	e04dd003 	sub	sp, sp, r3
    1490:	e1a0300d 	mov	r3, sp
    1494:	e2833003 	add	r3, r3, #3
    1498:	e1a03123 	lsr	r3, r3, #2
    149c:	e1a03103 	lsl	r3, r3, #2
    14a0:	e50b307c 	str	r3, [r11, #-124]	; 0xffffff84
    initOmega (omega,omegaInverse, fourierLength );
    14a4:	e51b2074 	ldr	r2, [r11, #-116]	; 0xffffff8c
    14a8:	e51b307c 	ldr	r3, [r11, #-124]	; 0xffffff84
    14ac:	e1a00002 	mov	r0, r2
    14b0:	e1a01003 	mov	r1, r3
    14b4:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    14b8:	eb000572 	bl	2a88 <initOmega>
    
    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
    14bc:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    14c0:	e5933004 	ldr	r3, [r3, #4]
    14c4:	e50b3080 	str	r3, [r11, #-128]	; 0xffffff80
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
    14c8:	ea000000 	b	14d0 <audio_transform_test+0x3a0>
                // reset counter
                buffer_index = 0;
            }

            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
    14cc:	e1a00000 	nop			; (mov r0, r0)
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
    14d0:	e1a00000 	nop			; (mov r0, r0)
    14d4:	e51b3080 	ldr	r3, [r11, #-128]	; 0xffffff80
    14d8:	e6ef3073 	uxtb	r3, r3
    14dc:	e3530000 	cmp	r3, #0
    14e0:	0afffffb 	beq	14d4 <audio_transform_test+0x3a4>
            *(audio_ptr + 2)  = *(audio_ptr + 2) >> 6;
    14e4:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    14e8:	e2833008 	add	r3, r3, #8
    14ec:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    14f0:	e2822008 	add	r2, r2, #8
    14f4:	e5922000 	ldr	r2, [r2]
    14f8:	e1a02342 	asr	r2, r2, #6
    14fc:	e5832000 	str	r2, [r3]
            *(audio_ptr + 3)  = *(audio_ptr + 3) >> 6;
    1500:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1504:	e283300c 	add	r3, r3, #12
    1508:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    150c:	e282200c 	add	r2, r2, #12
    1510:	e5922000 	ldr	r2, [r2]
    1514:	e1a02342 	asr	r2, r2, #6
    1518:	e5832000 	str	r2, [r3]

             if(buffer_index - buffer_index_start == fourierLength){
    151c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    1520:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1524:	e0632002 	rsb	r2, r3, r2
    1528:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    152c:	e1520003 	cmp	r2, r3
    1530:	1a000023 	bne	15c4 <audio_transform_test+0x494>
                    buffer_index_start = buffer_index;
    1534:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    1538:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
                if(count == 10) {
    153c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1540:	e353000a 	cmp	r3, #10
    1544:	1a00001b 	bne	15b8 <audio_transform_test+0x488>
                    count = 0;
    1548:	e3a03000 	mov	r3, #0
    154c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
                    for(int i=0;i<fourierLength;i++){
    1550:	e3a03000 	mov	r3, #0
    1554:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    1558:	ea000008 	b	1580 <audio_transform_test+0x450>
                        idft(cArray,fourierLength,omega);
    155c:	e51b2068 	ldr	r2, [r11, #-104]	; 0xffffff98
    1560:	e51b3074 	ldr	r3, [r11, #-116]	; 0xffffff8c
    1564:	e1a00002 	mov	r0, r2
    1568:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    156c:	e1a02003 	mov	r2, r3
    1570:	eb000632 	bl	2e40 <idft>

             if(buffer_index - buffer_index_start == fourierLength){
                    buffer_index_start = buffer_index;
                if(count == 10) {
                    count = 0;
                    for(int i=0;i<fourierLength;i++){
    1574:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1578:	e2833001 	add	r3, r3, #1
    157c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    1580:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1584:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1588:	e1520003 	cmp	r2, r3
    158c:	bafffff2 	blt	155c <audio_transform_test+0x42c>
                        idft(cArray,fourierLength,omega);
                        //FastFourierTransform(cArray,fourierLength);
                    //     fftamp[fourierIndex][fourierLength] = magnitude(cArray[i])%15000;
                    }
                //     VIS_VGA_UpdateFrame(k, fftamp[fourierIndex]);
                    fourierIndex ++;
    1590:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    1594:	e2833001 	add	r3, r3, #1
    1598:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
                    if(fourierIndex == fourierSize){
    159c:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    15a0:	e51b3048 	ldr	r3, [r11, #-72]	; 0xffffffb8
    15a4:	e1520003 	cmp	r2, r3
    15a8:	1a000005 	bne	15c4 <audio_transform_test+0x494>
                        fourierIndex =0;
    15ac:	e3a03000 	mov	r3, #0
    15b0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    15b4:	ea000002 	b	15c4 <audio_transform_test+0x494>
                    }
                }else{
                    count ++;
    15b8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    15bc:	e2833001 	add	r3, r3, #1
    15c0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
                }
              }
            Complex c;
            c.i = 0;
    15c4:	e30e369c 	movw	r3, #59036	; 0xe69c
    15c8:	e34f3fff 	movt	r3, #65535	; 0xffff
    15cc:	e3a02004 	mov	r2, #4
    15d0:	e24b1024 	sub	r1, r11, #36	; 0x24
    15d4:	e0813003 	add	r3, r1, r3
    15d8:	e0833002 	add	r3, r3, r2
    15dc:	e3a02000 	mov	r2, #0
    15e0:	e5832000 	str	r2, [r3]
            c.r = *(audio_ptr + 2);
    15e4:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    15e8:	e5932008 	ldr	r2, [r3, #8]
    15ec:	e30e369c 	movw	r3, #59036	; 0xe69c
    15f0:	e34f3fff 	movt	r3, #65535	; 0xffff
    15f4:	e24bc024 	sub	r12, r11, #36	; 0x24
    15f8:	e78c2003 	str	r2, [r12, r3]
            cArray[buffer_index-buffer_index_start] = c;
    15fc:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    1600:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1604:	e0633002 	rsb	r3, r3, r2
    1608:	e51b1068 	ldr	r1, [r11, #-104]	; 0xffffff98
    160c:	e30e269c 	movw	r2, #59036	; 0xe69c
    1610:	e34f2fff 	movt	r2, #65535	; 0xffff
    1614:	e1a03183 	lsl	r3, r3, #3
    1618:	e0813003 	add	r3, r1, r3
    161c:	e24be024 	sub	lr, r11, #36	; 0x24
    1620:	e08e2002 	add	r2, lr, r2
    1624:	e8920003 	ldm	r2, {r0, r1}
    1628:	e8830003 	stm	r3, {r0, r1}

            ++buffer_index;
    162c:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    1630:	e2833001 	add	r3, r3, #1
    1634:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
            if (buffer_index >= 0xFFFFFF) buffer_index = 0;
    1638:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    163c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    1640:	e34030ff 	movt	r3, #255	; 0xff
    1644:	e1520003 	cmp	r2, r3
    1648:	da000001 	ble	1654 <audio_transform_test+0x524>
    164c:	e3a03000 	mov	r3, #0
    1650:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
            VIS_HEX_SetUint_HEX(buffer_index);
    1654:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    1658:	e1a00003 	mov	r0, r3
    165c:	ebfffc7f 	bl	860 <VIS_HEX_SetUint_HEX>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
    1660:	e30639c0 	movw	r3, #27072	; 0x69c0
    1664:	e3403000 	movt	r3, #0
    1668:	e5933000 	ldr	r3, [r3]
    166c:	e1a00003 	mov	r0, r3
    1670:	ebfffb8b 	bl	4a4 <VIS_Uart_RxChar>
    1674:	e1a03000 	mov	r3, r0
    1678:	e3530000 	cmp	r3, #0
    167c:	0affff92 	beq	14cc <audio_transform_test+0x39c>
                // reset counter
                buffer_index = 0;
    1680:	e3a03000 	mov	r3, #0
    1684:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
            }

            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
    1688:	eaffff8f 	b	14cc <audio_transform_test+0x39c>

0000168c <check_KEYs>:
    }
}
void check_KEYs(int * KEY0, int * KEY1, int * KEY2, int * counter) {
    168c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1690:	e28db000 	add	r11, sp, #0
    1694:	e24dd024 	sub	sp, sp, #36	; 0x24
    1698:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    169c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    16a0:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    16a4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    volatile int * KEY_ptr   = (int *)KEY_BASE;
    16a8:	e3a03050 	mov	r3, #80	; 0x50
    16ac:	e34f3f20 	movt	r3, #65312	; 0xff20
    16b0:	e50b3008 	str	r3, [r11, #-8]
    volatile int * audio_ptr = (int *)AUDIO_BASE;
    16b4:	e3a03dc1 	mov	r3, #12352	; 0x3040
    16b8:	e34f3f20 	movt	r3, #65312	; 0xff20
    16bc:	e50b300c 	str	r3, [r11, #-12]
    int            KEY_value;

    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
    16c0:	e51b3008 	ldr	r3, [r11, #-8]
    16c4:	e5933000 	ldr	r3, [r3]
    16c8:	e50b3010 	str	r3, [r11, #-16]
    while (*KEY_ptr)
    16cc:	e1a00000 	nop			; (mov r0, r0)
    16d0:	e51b3008 	ldr	r3, [r11, #-8]
    16d4:	e5933000 	ldr	r3, [r3]
    16d8:	e3530000 	cmp	r3, #0
    16dc:	1afffffb 	bne	16d0 <check_KEYs+0x44>
        ; // wait for pushbutton KEY release

    if (KEY_value == 0x1) // check KEY0
    16e0:	e51b3010 	ldr	r3, [r11, #-16]
    16e4:	e3530001 	cmp	r3, #1
    16e8:	1a00000c 	bne	1720 <check_KEYs+0x94>
    {
        // reset counter to start recording
        *counter = 0;
    16ec:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    16f0:	e3a02000 	mov	r2, #0
    16f4:	e5832000 	str	r2, [r3]
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    16f8:	e51b300c 	ldr	r3, [r11, #-12]
    16fc:	e3a02004 	mov	r2, #4
    1700:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    1704:	e51b300c 	ldr	r3, [r11, #-12]
    1708:	e3a02000 	mov	r2, #0
    170c:	e5832000 	str	r2, [r3]

        *KEY0 = 1;
    1710:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1714:	e3a02001 	mov	r2, #1
    1718:	e5832000 	str	r2, [r3]
    171c:	ea00001e 	b	179c <check_KEYs+0x110>
    } else if (KEY_value == 0x2) // check KEY1
    1720:	e51b3010 	ldr	r3, [r11, #-16]
    1724:	e3530002 	cmp	r3, #2
    1728:	1a00000c 	bne	1760 <check_KEYs+0xd4>
    {
        // reset counter to start playback
        *counter = 0;
    172c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1730:	e3a02000 	mov	r2, #0
    1734:	e5832000 	str	r2, [r3]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
    1738:	e51b300c 	ldr	r3, [r11, #-12]
    173c:	e3a02008 	mov	r2, #8
    1740:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    1744:	e51b300c 	ldr	r3, [r11, #-12]
    1748:	e3a02000 	mov	r2, #0
    174c:	e5832000 	str	r2, [r3]

        *KEY1 = 1;
    1750:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1754:	e3a02001 	mov	r2, #1
    1758:	e5832000 	str	r2, [r3]
    175c:	ea00000e 	b	179c <check_KEYs+0x110>
    }
    else if (KEY_value == 0x4) // check KEY2
    1760:	e51b3010 	ldr	r3, [r11, #-16]
    1764:	e3530004 	cmp	r3, #4
    1768:	1a00000b 	bne	179c <check_KEYs+0x110>
    {
        // reset counter to start playback
        *counter = 0;
    176c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1770:	e3a02000 	mov	r2, #0
    1774:	e5832000 	str	r2, [r3]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
    1778:	e51b300c 	ldr	r3, [r11, #-12]
    177c:	e3a02008 	mov	r2, #8
    1780:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    1784:	e51b300c 	ldr	r3, [r11, #-12]
    1788:	e3a02000 	mov	r2, #0
    178c:	e5832000 	str	r2, [r3]

        *KEY2 = 1;
    1790:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1794:	e3a02001 	mov	r2, #1
    1798:	e5832000 	str	r2, [r3]
    }
}
    179c:	e28bd000 	add	sp, r11, #0
    17a0:	e8bd0800 	ldmfd	sp!, {r11}
    17a4:	e12fff1e 	bx	lr

000017a8 <VIS_VGA_Setup>:

static RingProperty ring;
static Line canvasHistory[2][MAX_LINES]; 
static int historyIndicator;

void VIS_VGA_Setup() {
    17a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17ac:	e28db000 	add	r11, sp, #0
    ring.colorSeed = 0;
    17b0:	e3063e28 	movw	r3, #28200	; 0x6e28
    17b4:	e3403000 	movt	r3, #0
    17b8:	e3a02000 	mov	r2, #0
    17bc:	e5832000 	str	r2, [r3]
    ring.offsetDeg = 0;
    17c0:	e3063e28 	movw	r3, #28200	; 0x6e28
    17c4:	e3403000 	movt	r3, #0
    17c8:	e3a02000 	mov	r2, #0
    17cc:	e5832004 	str	r2, [r3, #4]
    ring.radius = SCREEN_H / 6;
    17d0:	e3063e28 	movw	r3, #28200	; 0x6e28
    17d4:	e3403000 	movt	r3, #0
    17d8:	e3a02028 	mov	r2, #40	; 0x28
    17dc:	e5832008 	str	r2, [r3, #8]
    ring.inOffset = 50;
    17e0:	e3063e28 	movw	r3, #28200	; 0x6e28
    17e4:	e3403000 	movt	r3, #0
    17e8:	e3a02032 	mov	r2, #50	; 0x32
    17ec:	e583200c 	str	r2, [r3, #12]
    ring.loudnessThreshold = 1000;
    17f0:	e3063e28 	movw	r3, #28200	; 0x6e28
    17f4:	e3403000 	movt	r3, #0
    17f8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    17fc:	e5832018 	str	r2, [r3, #24]
    ring.cX = SCREEN_W / 2;
    1800:	e3063e28 	movw	r3, #28200	; 0x6e28
    1804:	e3403000 	movt	r3, #0
    1808:	e3a020a0 	mov	r2, #160	; 0xa0
    180c:	e5832010 	str	r2, [r3, #16]
    ring.cY = SCREEN_H / 2;
    1810:	e3063e28 	movw	r3, #28200	; 0x6e28
    1814:	e3403000 	movt	r3, #0
    1818:	e3a02078 	mov	r2, #120	; 0x78
    181c:	e5832014 	str	r2, [r3, #20]
    historyIndicator = 0;
    1820:	e3003a84 	movw	r3, #2692	; 0xa84
    1824:	e3403001 	movt	r3, #1
    1828:	e3a02000 	mov	r2, #0
    182c:	e5832000 	str	r2, [r3]
}
    1830:	e28bd000 	add	sp, r11, #0
    1834:	e8bd0800 	ldmfd	sp!, {r11}
    1838:	e12fff1e 	bx	lr

0000183c <VIS_VGA_UpdateFrame>:

void VIS_VGA_UpdateFrame(unsigned size, unsigned spect[]) {
    183c:	e92d4810 	push	{r4, r11, lr}
    1840:	e28db008 	add	r11, sp, #8
    1844:	e24dd044 	sub	sp, sp, #68	; 0x44
    1848:	e50b0040 	str	r0, [r11, #-64]	; 0xffffffc0
    184c:	e50b1044 	str	r1, [r11, #-68]	; 0xffffffbc
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    1850:	e1a00000 	nop			; (mov r0, r0)
    1854:	e30639c8 	movw	r3, #27080	; 0x69c8
    1858:	e3403000 	movt	r3, #0
    185c:	e5933000 	ldr	r3, [r3]
    1860:	e283300c 	add	r3, r3, #12
    1864:	e5933000 	ldr	r3, [r3]
    1868:	e2033001 	and	r3, r3, #1
    186c:	e3530000 	cmp	r3, #0
    1870:	1afffff7 	bne	1854 <VIS_VGA_UpdateFrame+0x18>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1874:	e30639c8 	movw	r3, #27080	; 0x69c8
    1878:	e3403000 	movt	r3, #0
    187c:	e5933000 	ldr	r3, [r3]
    1880:	e5932004 	ldr	r2, [r3, #4]
    1884:	e3063e24 	movw	r3, #28196	; 0x6e24
    1888:	e3403000 	movt	r3, #0
    188c:	e5832000 	str	r2, [r3]
    historyIndicator = 1 - historyIndicator;
    1890:	e3003a84 	movw	r3, #2692	; 0xa84
    1894:	e3403001 	movt	r3, #1
    1898:	e5933000 	ldr	r3, [r3]
    189c:	e2632001 	rsb	r2, r3, #1
    18a0:	e3003a84 	movw	r3, #2692	; 0xa84
    18a4:	e3403001 	movt	r3, #1
    18a8:	e5832000 	str	r2, [r3]

    // find the largest number and default max is set in ring property
    unsigned maxLoudness = ring.loudnessThreshold;
    18ac:	e3063e28 	movw	r3, #28200	; 0x6e28
    18b0:	e3403000 	movt	r3, #0
    18b4:	e5933018 	ldr	r3, [r3, #24]
    18b8:	e50b3010 	str	r3, [r11, #-16]
    for (int i = 0; i < size; i++) {
    18bc:	e3a03000 	mov	r3, #0
    18c0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    18c4:	ea00000b 	b	18f8 <VIS_VGA_UpdateFrame+0xbc>
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    18c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18cc:	e1a03103 	lsl	r3, r3, #2
    18d0:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    18d4:	e0823003 	add	r3, r2, r3
    18d8:	e5933000 	ldr	r3, [r3]
    18dc:	e51b2010 	ldr	r2, [r11, #-16]
    18e0:	e1520003 	cmp	r2, r3
    18e4:	21a03002 	movcs	r3, r2
    18e8:	e50b3010 	str	r3, [r11, #-16]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    historyIndicator = 1 - historyIndicator;

    // find the largest number and default max is set in ring property
    unsigned maxLoudness = ring.loudnessThreshold;
    for (int i = 0; i < size; i++) {
    18ec:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18f0:	e2833001 	add	r3, r3, #1
    18f4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    18f8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18fc:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1900:	e1520003 	cmp	r2, r3
    1904:	3affffef 	bcc	18c8 <VIS_VGA_UpdateFrame+0x8c>
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    }

    // // draw on VGA
    // unsigned startDeg = ring.offsetDeg;
    for (int i = 0; i < size; i++) {
    1908:	e3a03000 	mov	r3, #0
    190c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1910:	ea0000fb 	b	1d04 <VIS_VGA_UpdateFrame+0x4c8>
        unsigned color = color_from_gradient(ring.colorSeed + i * 120 / size, 1);
    1914:	e3063e28 	movw	r3, #28200	; 0x6e28
    1918:	e3403000 	movt	r3, #0
    191c:	e5933000 	ldr	r3, [r3]
    1920:	e1a04003 	mov	r4, r3
    1924:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1928:	e1a03002 	mov	r3, r2
    192c:	e1a03203 	lsl	r3, r3, #4
    1930:	e0623003 	rsb	r3, r2, r3
    1934:	e1a03183 	lsl	r3, r3, #3
    1938:	e1a00003 	mov	r0, r3
    193c:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    1940:	eb0006ad 	bl	33fc <__aeabi_uidiv>
    1944:	e1a03000 	mov	r3, r0
    1948:	e0843003 	add	r3, r4, r3
    194c:	e1a00003 	mov	r0, r3
    1950:	e3a01001 	mov	r1, #1
    1954:	eb00015e 	bl	1ed4 <color_from_gradient>
    1958:	e1a03000 	mov	r3, r0
    195c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
        unsigned degree = i * 360 / size + (ring.offsetDeg >> 4);
    1960:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1964:	e3a02f5a 	mov	r2, #360	; 0x168
    1968:	e0030392 	mul	r3, r2, r3
    196c:	e1a00003 	mov	r0, r3
    1970:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    1974:	eb0006a0 	bl	33fc <__aeabi_uidiv>
    1978:	e1a03000 	mov	r3, r0
    197c:	e1a02003 	mov	r2, r3
    1980:	e3063e28 	movw	r3, #28200	; 0x6e28
    1984:	e3403000 	movt	r3, #0
    1988:	e5933004 	ldr	r3, [r3, #4]
    198c:	e1a03243 	asr	r3, r3, #4
    1990:	e0823003 	add	r3, r2, r3
    1994:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        int maxLength = (SCREEN_W / 2 - ring.radius);
    1998:	e3063e28 	movw	r3, #28200	; 0x6e28
    199c:	e3403000 	movt	r3, #0
    19a0:	e5933008 	ldr	r3, [r3, #8]
    19a4:	e26330a0 	rsb	r3, r3, #160	; 0xa0
    19a8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

        // // calculate start point
        int innerR = ring.radius - ((ring.inOffset * maxLength * spect[i] / maxLoudness) >> 10);
    19ac:	e3063e28 	movw	r3, #28200	; 0x6e28
    19b0:	e3403000 	movt	r3, #0
    19b4:	e5933008 	ldr	r3, [r3, #8]
    19b8:	e1a04003 	mov	r4, r3
    19bc:	e3063e28 	movw	r3, #28200	; 0x6e28
    19c0:	e3403000 	movt	r3, #0
    19c4:	e593300c 	ldr	r3, [r3, #12]
    19c8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    19cc:	e0030392 	mul	r3, r2, r3
    19d0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19d4:	e1a02102 	lsl	r2, r2, #2
    19d8:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    19dc:	e0812002 	add	r2, r1, r2
    19e0:	e5922000 	ldr	r2, [r2]
    19e4:	e0030392 	mul	r3, r2, r3
    19e8:	e1a00003 	mov	r0, r3
    19ec:	e51b1010 	ldr	r1, [r11, #-16]
    19f0:	eb000681 	bl	33fc <__aeabi_uidiv>
    19f4:	e1a03000 	mov	r3, r0
    19f8:	e1a03523 	lsr	r3, r3, #10
    19fc:	e0633004 	rsb	r3, r3, r4
    1a00:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
        unsigned iX = ring.cX + ((innerR * VIS_FastSin_d16(degree)) >> 16);
    1a04:	e3063e28 	movw	r3, #28200	; 0x6e28
    1a08:	e3403000 	movt	r3, #0
    1a0c:	e5934010 	ldr	r4, [r3, #16]
    1a10:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1a14:	e1a00003 	mov	r0, r3
    1a18:	eb0002f7 	bl	25fc <VIS_FastSin_d16>
    1a1c:	e1a03000 	mov	r3, r0
    1a20:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1a24:	e0030392 	mul	r3, r2, r3
    1a28:	e1a03843 	asr	r3, r3, #16
    1a2c:	e0843003 	add	r3, r4, r3
    1a30:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
        unsigned iY = ring.cY - ((innerR * VIS_FastCos_d16(degree)) >> 16);
    1a34:	e3063e28 	movw	r3, #28200	; 0x6e28
    1a38:	e3403000 	movt	r3, #0
    1a3c:	e5934014 	ldr	r4, [r3, #20]
    1a40:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1a44:	e1a00003 	mov	r0, r3
    1a48:	eb00031e 	bl	26c8 <VIS_FastCos_d16>
    1a4c:	e1a03000 	mov	r3, r0
    1a50:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1a54:	e0030392 	mul	r3, r2, r3
    1a58:	e1a03843 	asr	r3, r3, #16
    1a5c:	e0633004 	rsb	r3, r3, r4
    1a60:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0

        // // calculate color end point
        int outerR = ring.radius + (((1024 - ring.inOffset) * maxLength * spect[i] / maxLoudness) >> 10); 
    1a64:	e3063e28 	movw	r3, #28200	; 0x6e28
    1a68:	e3403000 	movt	r3, #0
    1a6c:	e5933008 	ldr	r3, [r3, #8]
    1a70:	e1a04003 	mov	r4, r3
    1a74:	e3063e28 	movw	r3, #28200	; 0x6e28
    1a78:	e3403000 	movt	r3, #0
    1a7c:	e593300c 	ldr	r3, [r3, #12]
    1a80:	e2633b01 	rsb	r3, r3, #1024	; 0x400
    1a84:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1a88:	e0030392 	mul	r3, r2, r3
    1a8c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1a90:	e1a02102 	lsl	r2, r2, #2
    1a94:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    1a98:	e0812002 	add	r2, r1, r2
    1a9c:	e5922000 	ldr	r2, [r2]
    1aa0:	e0030392 	mul	r3, r2, r3
    1aa4:	e1a00003 	mov	r0, r3
    1aa8:	e51b1010 	ldr	r1, [r11, #-16]
    1aac:	eb000652 	bl	33fc <__aeabi_uidiv>
    1ab0:	e1a03000 	mov	r3, r0
    1ab4:	e1a03523 	lsr	r3, r3, #10
    1ab8:	e0843003 	add	r3, r4, r3
    1abc:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
        unsigned oX = ring.cX + ((outerR * VIS_FastSin_d16(degree)) >> 16);
    1ac0:	e3063e28 	movw	r3, #28200	; 0x6e28
    1ac4:	e3403000 	movt	r3, #0
    1ac8:	e5934010 	ldr	r4, [r3, #16]
    1acc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1ad0:	e1a00003 	mov	r0, r3
    1ad4:	eb0002c8 	bl	25fc <VIS_FastSin_d16>
    1ad8:	e1a03000 	mov	r3, r0
    1adc:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    1ae0:	e0030392 	mul	r3, r2, r3
    1ae4:	e1a03843 	asr	r3, r3, #16
    1ae8:	e0843003 	add	r3, r4, r3
    1aec:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
        unsigned oY = ring.cY - ((outerR * VIS_FastCos_d16(degree)) >> 16);
    1af0:	e3063e28 	movw	r3, #28200	; 0x6e28
    1af4:	e3403000 	movt	r3, #0
    1af8:	e5934014 	ldr	r4, [r3, #20]
    1afc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1b00:	e1a00003 	mov	r0, r3
    1b04:	eb0002ef 	bl	26c8 <VIS_FastCos_d16>
    1b08:	e1a03000 	mov	r3, r0
    1b0c:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    1b10:	e0030392 	mul	r3, r2, r3
    1b14:	e1a03843 	asr	r3, r3, #16
    1b18:	e0633004 	rsb	r3, r3, r4
    1b1c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4

        // update history
        draw_lineStruct(canvasHistory[historyIndicator][i]);
    1b20:	e3003a84 	movw	r3, #2692	; 0xa84
    1b24:	e3403001 	movt	r3, #1
    1b28:	e5930000 	ldr	r0, [r3]
    1b2c:	e3062e44 	movw	r2, #28228	; 0x6e44
    1b30:	e3402000 	movt	r2, #0
    1b34:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    1b38:	e1a03001 	mov	r3, r1
    1b3c:	e1a03103 	lsl	r3, r3, #2
    1b40:	e0833001 	add	r3, r3, r1
    1b44:	e1a03103 	lsl	r3, r3, #2
    1b48:	e3041e20 	movw	r1, #20000	; 0x4e20
    1b4c:	e0010091 	mul	r1, r1, r0
    1b50:	e0833001 	add	r3, r3, r1
    1b54:	e0823003 	add	r3, r2, r3
    1b58:	e5932010 	ldr	r2, [r3, #16]
    1b5c:	e58d2000 	str	r2, [sp]
    1b60:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    1b64:	eb00014a 	bl	2094 <draw_lineStruct>
        canvasHistory[historyIndicator][i] = (Line){iX, iY, oX, oY, 0};
    1b68:	e3003a84 	movw	r3, #2692	; 0xa84
    1b6c:	e3403001 	movt	r3, #1
    1b70:	e5932000 	ldr	r2, [r3]
    1b74:	e3061e44 	movw	r1, #28228	; 0x6e44
    1b78:	e3401000 	movt	r1, #0
    1b7c:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1b80:	e1a03000 	mov	r3, r0
    1b84:	e1a03103 	lsl	r3, r3, #2
    1b88:	e0833000 	add	r3, r3, r0
    1b8c:	e1a03103 	lsl	r3, r3, #2
    1b90:	e3040e20 	movw	r0, #20000	; 0x4e20
    1b94:	e0000290 	mul	r0, r0, r2
    1b98:	e0833000 	add	r3, r3, r0
    1b9c:	e0813003 	add	r3, r1, r3
    1ba0:	e51b102c 	ldr	r1, [r11, #-44]	; 0xffffffd4
    1ba4:	e5831000 	str	r1, [r3]
    1ba8:	e3061e44 	movw	r1, #28228	; 0x6e44
    1bac:	e3401000 	movt	r1, #0
    1bb0:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1bb4:	e3a0c004 	mov	r12, #4
    1bb8:	e1a03000 	mov	r3, r0
    1bbc:	e1a03103 	lsl	r3, r3, #2
    1bc0:	e0833000 	add	r3, r3, r0
    1bc4:	e1a03103 	lsl	r3, r3, #2
    1bc8:	e3040e20 	movw	r0, #20000	; 0x4e20
    1bcc:	e0000290 	mul	r0, r0, r2
    1bd0:	e0833000 	add	r3, r3, r0
    1bd4:	e0813003 	add	r3, r1, r3
    1bd8:	e083300c 	add	r3, r3, r12
    1bdc:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
    1be0:	e5831000 	str	r1, [r3]
    1be4:	e3061e44 	movw	r1, #28228	; 0x6e44
    1be8:	e3401000 	movt	r1, #0
    1bec:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1bf0:	e3a0c008 	mov	r12, #8
    1bf4:	e1a03000 	mov	r3, r0
    1bf8:	e1a03103 	lsl	r3, r3, #2
    1bfc:	e0833000 	add	r3, r3, r0
    1c00:	e1a03103 	lsl	r3, r3, #2
    1c04:	e3040e20 	movw	r0, #20000	; 0x4e20
    1c08:	e0000290 	mul	r0, r0, r2
    1c0c:	e0833000 	add	r3, r3, r0
    1c10:	e0813003 	add	r3, r1, r3
    1c14:	e083300c 	add	r3, r3, r12
    1c18:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
    1c1c:	e5831000 	str	r1, [r3]
    1c20:	e3061e44 	movw	r1, #28228	; 0x6e44
    1c24:	e3401000 	movt	r1, #0
    1c28:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1c2c:	e3a0c00c 	mov	r12, #12
    1c30:	e1a03000 	mov	r3, r0
    1c34:	e1a03103 	lsl	r3, r3, #2
    1c38:	e0833000 	add	r3, r3, r0
    1c3c:	e1a03103 	lsl	r3, r3, #2
    1c40:	e3040e20 	movw	r0, #20000	; 0x4e20
    1c44:	e0000290 	mul	r0, r0, r2
    1c48:	e0833000 	add	r3, r3, r0
    1c4c:	e0813003 	add	r3, r1, r3
    1c50:	e083300c 	add	r3, r3, r12
    1c54:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    1c58:	e5831000 	str	r1, [r3]
    1c5c:	e3061e44 	movw	r1, #28228	; 0x6e44
    1c60:	e3401000 	movt	r1, #0
    1c64:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1c68:	e3a0c010 	mov	r12, #16
    1c6c:	e1a03000 	mov	r3, r0
    1c70:	e1a03103 	lsl	r3, r3, #2
    1c74:	e0833000 	add	r3, r3, r0
    1c78:	e1a03103 	lsl	r3, r3, #2
    1c7c:	e3040e20 	movw	r0, #20000	; 0x4e20
    1c80:	e0020290 	mul	r2, r0, r2
    1c84:	e0833002 	add	r3, r3, r2
    1c88:	e0813003 	add	r3, r1, r3
    1c8c:	e083300c 	add	r3, r3, r12
    1c90:	e3a02000 	mov	r2, #0
    1c94:	e5832000 	str	r2, [r3]

        draw_line(iX, iY, oX, oY, color);
    1c98:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
    1c9c:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
    1ca0:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1ca4:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1ca8:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
    1cac:	e58dc000 	str	r12, [sp]
    1cb0:	eb00010b 	bl	20e4 <draw_line>

        // update ring properties
        // ring.colorSeed = (ring.colorSeed + 1) & 1F;
        ring.offsetDeg = (ring.offsetDeg + 1) % (360 << 4);
    1cb4:	e3063e28 	movw	r3, #28200	; 0x6e28
    1cb8:	e3403000 	movt	r3, #0
    1cbc:	e5933004 	ldr	r3, [r3, #4]
    1cc0:	e2833001 	add	r3, r3, #1
    1cc4:	e30620b7 	movw	r2, #24759	; 0x60b7
    1cc8:	e34b260b 	movt	r2, #46603	; 0xb60b
    1ccc:	e0c21392 	smull	r1, r2, r2, r3
    1cd0:	e0822003 	add	r2, r2, r3
    1cd4:	e1a01642 	asr	r1, r2, #12
    1cd8:	e1a02fc3 	asr	r2, r3, #31
    1cdc:	e0622001 	rsb	r2, r2, r1
    1ce0:	e3a01d5a 	mov	r1, #5760	; 0x1680
    1ce4:	e0020291 	mul	r2, r1, r2
    1ce8:	e0622003 	rsb	r2, r2, r3
    1cec:	e3063e28 	movw	r3, #28200	; 0x6e28
    1cf0:	e3403000 	movt	r3, #0
    1cf4:	e5832004 	str	r2, [r3, #4]
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    }

    // // draw on VGA
    // unsigned startDeg = ring.offsetDeg;
    for (int i = 0; i < size; i++) {
    1cf8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1cfc:	e2833001 	add	r3, r3, #1
    1d00:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1d04:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1d08:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1d0c:	e1520003 	cmp	r2, r3
    1d10:	3afffeff 	bcc	1914 <VIS_VGA_UpdateFrame+0xd8>
        ring.offsetDeg = (ring.offsetDeg + 1) % (360 << 4);
    }


    // swap front and back buffers on VGA vertical sync
    *pixel_ctrl_ptr = 0x1;
    1d14:	e30639c8 	movw	r3, #27080	; 0x69c8
    1d18:	e3403000 	movt	r3, #0
    1d1c:	e5933000 	ldr	r3, [r3]
    1d20:	e3a02001 	mov	r2, #1
    1d24:	e5832000 	str	r2, [r3]
}
    1d28:	e24bd008 	sub	sp, r11, #8
    1d2c:	e8bd8810 	pop	{r4, r11, pc}

00001d30 <VIS_VGA_ColorTest>:

void VIS_VGA_ColorTest() {
    1d30:	e92d4800 	push	{r11, lr}
    1d34:	e28db004 	add	r11, sp, #4
    1d38:	e24dd010 	sub	sp, sp, #16
    
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    1d3c:	e1a00000 	nop			; (mov r0, r0)
    1d40:	e30639c8 	movw	r3, #27080	; 0x69c8
    1d44:	e3403000 	movt	r3, #0
    1d48:	e5933000 	ldr	r3, [r3]
    1d4c:	e283300c 	add	r3, r3, #12
    1d50:	e5933000 	ldr	r3, [r3]
    1d54:	e2033001 	and	r3, r3, #1
    1d58:	e3530000 	cmp	r3, #0
    1d5c:	1afffff7 	bne	1d40 <VIS_VGA_ColorTest+0x10>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1d60:	e30639c8 	movw	r3, #27080	; 0x69c8
    1d64:	e3403000 	movt	r3, #0
    1d68:	e5933000 	ldr	r3, [r3]
    1d6c:	e5932004 	ldr	r2, [r3, #4]
    1d70:	e3063e24 	movw	r3, #28196	; 0x6e24
    1d74:	e3403000 	movt	r3, #0
    1d78:	e5832000 	str	r2, [r3]
    
    clear_screen();
    1d7c:	eb000181 	bl	2388 <clear_screen>
    for (int i = 0; i < SCREEN_H; i++) {
    1d80:	e3a03000 	mov	r3, #0
    1d84:	e50b3008 	str	r3, [r11, #-8]
    1d88:	ea00000c 	b	1dc0 <VIS_VGA_ColorTest+0x90>
        draw_line(0, i, SCREEN_W - 1, i, color_from_gradient(i , 1));
    1d8c:	e51b0008 	ldr	r0, [r11, #-8]
    1d90:	e3a01001 	mov	r1, #1
    1d94:	eb00004e 	bl	1ed4 <color_from_gradient>
    1d98:	e1a03000 	mov	r3, r0
    1d9c:	e58d3000 	str	r3, [sp]
    1da0:	e3a00000 	mov	r0, #0
    1da4:	e51b1008 	ldr	r1, [r11, #-8]
    1da8:	e300213f 	movw	r2, #319	; 0x13f
    1dac:	e51b3008 	ldr	r3, [r11, #-8]
    1db0:	eb0000cb 	bl	20e4 <draw_line>
    
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    
    clear_screen();
    for (int i = 0; i < SCREEN_H; i++) {
    1db4:	e51b3008 	ldr	r3, [r11, #-8]
    1db8:	e2833001 	add	r3, r3, #1
    1dbc:	e50b3008 	str	r3, [r11, #-8]
    1dc0:	e51b3008 	ldr	r3, [r11, #-8]
    1dc4:	e35300ef 	cmp	r3, #239	; 0xef
    1dc8:	daffffef 	ble	1d8c <VIS_VGA_ColorTest+0x5c>
        draw_line(0, i, SCREEN_W - 1, i, color_from_gradient(i , 1));
    }

    // swap front and back buffers on VGA vertical sync
    *pixel_ctrl_ptr = 0x1;
    1dcc:	e30639c8 	movw	r3, #27080	; 0x69c8
    1dd0:	e3403000 	movt	r3, #0
    1dd4:	e5933000 	ldr	r3, [r3]
    1dd8:	e3a02001 	mov	r2, #1
    1ddc:	e5832000 	str	r2, [r3]
}
    1de0:	e24bd004 	sub	sp, r11, #4
    1de4:	e8bd8800 	pop	{r11, pc}

00001de8 <VIS_VGA_SetBuffer>:

void VIS_VGA_SetBuffer(unsigned frontAddress, unsigned backAddress) {
    1de8:	e92d4800 	push	{r11, lr}
    1dec:	e28db004 	add	r11, sp, #4
    1df0:	e24dd008 	sub	sp, sp, #8
    1df4:	e50b0008 	str	r0, [r11, #-8]
    1df8:	e50b100c 	str	r1, [r11, #-12]
    *(pixel_ctrl_ptr + 1) = frontAddress;
    1dfc:	e30639c8 	movw	r3, #27080	; 0x69c8
    1e00:	e3403000 	movt	r3, #0
    1e04:	e5933000 	ldr	r3, [r3]
    1e08:	e2833004 	add	r3, r3, #4
    1e0c:	e51b2008 	ldr	r2, [r11, #-8]
    1e10:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1e14:	e30639c8 	movw	r3, #27080	; 0x69c8
    1e18:	e3403000 	movt	r3, #0
    1e1c:	e5933000 	ldr	r3, [r3]
    1e20:	e5932004 	ldr	r2, [r3, #4]
    1e24:	e3063e24 	movw	r3, #28196	; 0x6e24
    1e28:	e3403000 	movt	r3, #0
    1e2c:	e5832000 	str	r2, [r3]
    clear_screen();
    1e30:	eb000154 	bl	2388 <clear_screen>
    wait_for_vsync();
    1e34:	eb000071 	bl	2000 <wait_for_vsync>
    
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = backAddress;
    1e38:	e30639c8 	movw	r3, #27080	; 0x69c8
    1e3c:	e3403000 	movt	r3, #0
    1e40:	e5933000 	ldr	r3, [r3]
    1e44:	e2833004 	add	r3, r3, #4
    1e48:	e51b200c 	ldr	r2, [r11, #-12]
    1e4c:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the front buffer
    1e50:	e30639c8 	movw	r3, #27080	; 0x69c8
    1e54:	e3403000 	movt	r3, #0
    1e58:	e5933000 	ldr	r3, [r3]
    1e5c:	e5932004 	ldr	r2, [r3, #4]
    1e60:	e3063e24 	movw	r3, #28196	; 0x6e24
    1e64:	e3403000 	movt	r3, #0
    1e68:	e5832000 	str	r2, [r3]
    clear_screen();
    1e6c:	eb000145 	bl	2388 <clear_screen>
    wait_for_vsync();
    1e70:	eb000062 	bl	2000 <wait_for_vsync>

    VIS_VGA_Setup();
    1e74:	ebfffe4b 	bl	17a8 <VIS_VGA_Setup>
}
    1e78:	e24bd004 	sub	sp, r11, #4
    1e7c:	e8bd8800 	pop	{r11, pc}

00001e80 <color_from_RGB888>:

int color_from_RGB888(int r, int g, int b) {
    1e80:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1e84:	e28db000 	add	r11, sp, #0
    1e88:	e24dd014 	sub	sp, sp, #20
    1e8c:	e50b0008 	str	r0, [r11, #-8]
    1e90:	e50b100c 	str	r1, [r11, #-12]
    1e94:	e50b2010 	str	r2, [r11, #-16]
    return (r >> 3 << 11 ) | (g >> 2 << 5 ) | (b >> 3 & 0x1F);
    1e98:	e51b3008 	ldr	r3, [r11, #-8]
    1e9c:	e1a031c3 	asr	r3, r3, #3
    1ea0:	e1a02583 	lsl	r2, r3, #11
    1ea4:	e51b300c 	ldr	r3, [r11, #-12]
    1ea8:	e1a03143 	asr	r3, r3, #2
    1eac:	e1a03283 	lsl	r3, r3, #5
    1eb0:	e1822003 	orr	r2, r2, r3
    1eb4:	e51b3010 	ldr	r3, [r11, #-16]
    1eb8:	e1a031c3 	asr	r3, r3, #3
    1ebc:	e203301f 	and	r3, r3, #31
    1ec0:	e1823003 	orr	r3, r2, r3
}
    1ec4:	e1a00003 	mov	r0, r3
    1ec8:	e28bd000 	add	sp, r11, #0
    1ecc:	e8bd0800 	ldmfd	sp!, {r11}
    1ed0:	e12fff1e 	bx	lr

00001ed4 <color_from_gradient>:

int color_from_gradient(int seed, int freq) {
    1ed4:	e92d4800 	push	{r11, lr}
    1ed8:	e28db004 	add	r11, sp, #4
    1edc:	e24dd018 	sub	sp, sp, #24
    1ee0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1ee4:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int r = ((127 * VIS_FastSin_r16((freq << 16) * seed / 30 + (0 << 16))) >> 16) + 128;
    1ee8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1eec:	e1a03803 	lsl	r3, r3, #16
    1ef0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1ef4:	e0030392 	mul	r3, r2, r3
    1ef8:	e3082889 	movw	r2, #34953	; 0x8889
    1efc:	e3482888 	movt	r2, #34952	; 0x8888
    1f00:	e0c21392 	smull	r1, r2, r2, r3
    1f04:	e0822003 	add	r2, r2, r3
    1f08:	e1a02242 	asr	r2, r2, #4
    1f0c:	e1a03fc3 	asr	r3, r3, #31
    1f10:	e0633002 	rsb	r3, r3, r2
    1f14:	e1a00003 	mov	r0, r3
    1f18:	eb0001cf 	bl	265c <VIS_FastSin_r16>
    1f1c:	e1a02000 	mov	r2, r0
    1f20:	e1a03002 	mov	r3, r2
    1f24:	e1a03383 	lsl	r3, r3, #7
    1f28:	e0623003 	rsb	r3, r2, r3
    1f2c:	e1a03843 	asr	r3, r3, #16
    1f30:	e2833080 	add	r3, r3, #128	; 0x80
    1f34:	e50b3008 	str	r3, [r11, #-8]
    int g = ((127 * VIS_FastSin_r16((freq << 16) * seed / 30 + (1 << 16))) >> 16) + 128;
    1f38:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1f3c:	e1a03803 	lsl	r3, r3, #16
    1f40:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1f44:	e0030392 	mul	r3, r2, r3
    1f48:	e3082889 	movw	r2, #34953	; 0x8889
    1f4c:	e3482888 	movt	r2, #34952	; 0x8888
    1f50:	e0c21392 	smull	r1, r2, r2, r3
    1f54:	e0822003 	add	r2, r2, r3
    1f58:	e1a02242 	asr	r2, r2, #4
    1f5c:	e1a03fc3 	asr	r3, r3, #31
    1f60:	e0633002 	rsb	r3, r3, r2
    1f64:	e2833801 	add	r3, r3, #65536	; 0x10000
    1f68:	e1a00003 	mov	r0, r3
    1f6c:	eb0001ba 	bl	265c <VIS_FastSin_r16>
    1f70:	e1a02000 	mov	r2, r0
    1f74:	e1a03002 	mov	r3, r2
    1f78:	e1a03383 	lsl	r3, r3, #7
    1f7c:	e0623003 	rsb	r3, r2, r3
    1f80:	e1a03843 	asr	r3, r3, #16
    1f84:	e2833080 	add	r3, r3, #128	; 0x80
    1f88:	e50b300c 	str	r3, [r11, #-12]
    int b = ((127 * VIS_FastSin_r16((freq << 16) * seed / 30 + (2 << 16))) >> 16) + 128;
    1f8c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1f90:	e1a03803 	lsl	r3, r3, #16
    1f94:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1f98:	e0030392 	mul	r3, r2, r3
    1f9c:	e3082889 	movw	r2, #34953	; 0x8889
    1fa0:	e3482888 	movt	r2, #34952	; 0x8888
    1fa4:	e0c21392 	smull	r1, r2, r2, r3
    1fa8:	e0822003 	add	r2, r2, r3
    1fac:	e1a02242 	asr	r2, r2, #4
    1fb0:	e1a03fc3 	asr	r3, r3, #31
    1fb4:	e0633002 	rsb	r3, r3, r2
    1fb8:	e2833802 	add	r3, r3, #131072	; 0x20000
    1fbc:	e1a00003 	mov	r0, r3
    1fc0:	eb0001a5 	bl	265c <VIS_FastSin_r16>
    1fc4:	e1a02000 	mov	r2, r0
    1fc8:	e1a03002 	mov	r3, r2
    1fcc:	e1a03383 	lsl	r3, r3, #7
    1fd0:	e0623003 	rsb	r3, r2, r3
    1fd4:	e1a03843 	asr	r3, r3, #16
    1fd8:	e2833080 	add	r3, r3, #128	; 0x80
    1fdc:	e50b3010 	str	r3, [r11, #-16]
    return color_from_RGB888(r, g, b);
    1fe0:	e51b0008 	ldr	r0, [r11, #-8]
    1fe4:	e51b100c 	ldr	r1, [r11, #-12]
    1fe8:	e51b2010 	ldr	r2, [r11, #-16]
    1fec:	ebffffa3 	bl	1e80 <color_from_RGB888>
    1ff0:	e1a03000 	mov	r3, r0
}
    1ff4:	e1a00003 	mov	r0, r3
    1ff8:	e24bd004 	sub	sp, r11, #4
    1ffc:	e8bd8800 	pop	{r11, pc}

00002000 <wait_for_vsync>:

void wait_for_vsync() {
    2000:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2004:	e28db000 	add	r11, sp, #0
    *pixel_ctrl_ptr = 0x1;
    2008:	e30639c8 	movw	r3, #27080	; 0x69c8
    200c:	e3403000 	movt	r3, #0
    2010:	e5933000 	ldr	r3, [r3]
    2014:	e3a02001 	mov	r2, #1
    2018:	e5832000 	str	r2, [r3]
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    201c:	e1a00000 	nop			; (mov r0, r0)
    2020:	e30639c8 	movw	r3, #27080	; 0x69c8
    2024:	e3403000 	movt	r3, #0
    2028:	e5933000 	ldr	r3, [r3]
    202c:	e283300c 	add	r3, r3, #12
    2030:	e5933000 	ldr	r3, [r3]
    2034:	e2033001 	and	r3, r3, #1
    2038:	e3530000 	cmp	r3, #0
    203c:	1afffff7 	bne	2020 <wait_for_vsync+0x20>
}
    2040:	e28bd000 	add	sp, r11, #0
    2044:	e8bd0800 	ldmfd	sp!, {r11}
    2048:	e12fff1e 	bx	lr

0000204c <swap>:

void swap(int *a, int *b)
{
    204c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2050:	e28db000 	add	r11, sp, #0
    2054:	e24dd014 	sub	sp, sp, #20
    2058:	e50b0010 	str	r0, [r11, #-16]
    205c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    int t = *a;
    2060:	e51b3010 	ldr	r3, [r11, #-16]
    2064:	e5933000 	ldr	r3, [r3]
    2068:	e50b3008 	str	r3, [r11, #-8]
    *a = *b;
    206c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2070:	e5932000 	ldr	r2, [r3]
    2074:	e51b3010 	ldr	r3, [r11, #-16]
    2078:	e5832000 	str	r2, [r3]
    *b = t;
    207c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2080:	e51b2008 	ldr	r2, [r11, #-8]
    2084:	e5832000 	str	r2, [r3]
}
    2088:	e28bd000 	add	sp, r11, #0
    208c:	e8bd0800 	ldmfd	sp!, {r11}
    2090:	e12fff1e 	bx	lr

00002094 <draw_lineStruct>:

void draw_lineStruct(Line line) {
    2094:	e24dd010 	sub	sp, sp, #16
    2098:	e92d4800 	push	{r11, lr}
    209c:	e28db004 	add	r11, sp, #4
    20a0:	e24dd008 	sub	sp, sp, #8
    20a4:	e28bc004 	add	r12, r11, #4
    20a8:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    draw_line(line.iX, line.iY, line.oX, line.oY, line.color);
    20ac:	e59b3004 	ldr	r3, [r11, #4]
    20b0:	e1a00003 	mov	r0, r3
    20b4:	e59b3008 	ldr	r3, [r11, #8]
    20b8:	e1a01003 	mov	r1, r3
    20bc:	e59b300c 	ldr	r3, [r11, #12]
    20c0:	e1a02003 	mov	r2, r3
    20c4:	e59b3010 	ldr	r3, [r11, #16]
    20c8:	e59bc014 	ldr	r12, [r11, #20]
    20cc:	e58dc000 	str	r12, [sp]
    20d0:	eb000003 	bl	20e4 <draw_line>
}
    20d4:	e24bd004 	sub	sp, r11, #4
    20d8:	e8bd4800 	pop	{r11, lr}
    20dc:	e28dd010 	add	sp, sp, #16
    20e0:	e12fff1e 	bx	lr

000020e4 <draw_line>:

void draw_line(int p1_x, int p1_y, int p2_x, int p2_y, int color)
{
    20e4:	e92d4800 	push	{r11, lr}
    20e8:	e28db004 	add	r11, sp, #4
    20ec:	e24dd030 	sub	sp, sp, #48	; 0x30
    20f0:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
    20f4:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
    20f8:	e50b2030 	str	r2, [r11, #-48]	; 0xffffffd0
    20fc:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    // check if it is a point or a line
    if (p2_y == p1_y && p1_x == p1_y) {
    2100:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2104:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2108:	e1520003 	cmp	r2, r3
    210c:	1a00000b 	bne	2140 <draw_line+0x5c>
    2110:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2114:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2118:	e1520003 	cmp	r2, r3
    211c:	1a000007 	bne	2140 <draw_line+0x5c>
        plot_pixel(p1_x, p2_y, color);
    2120:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2124:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2128:	e59b3004 	ldr	r3, [r11, #4]
    212c:	e6ff3073 	uxth	r3, r3
    2130:	e1a00001 	mov	r0, r1
    2134:	e1a01002 	mov	r1, r2
    2138:	e1a02003 	mov	r2, r3
    213c:	eb0000a7 	bl	23e0 <plot_pixel>
    }

    bool is_steep = abs(p1_y - p2_y) > abs(p1_x - p2_x);
    2140:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    2144:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    2148:	e0633002 	rsb	r3, r3, r2
    214c:	e0232fc3 	eor	r2, r3, r3, asr #31
    2150:	e0422fc3 	sub	r2, r2, r3, asr #31
    2154:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2158:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    215c:	e0633001 	rsb	r3, r3, r1
    2160:	e3530000 	cmp	r3, #0
    2164:	b2633000 	rsblt	r3, r3, #0
    2168:	e1520003 	cmp	r2, r3
    216c:	d3a03000 	movle	r3, #0
    2170:	c3a03001 	movgt	r3, #1
    2174:	e54b3011 	strb	r3, [r11, #-17]	; 0xffffffef
    if (is_steep)
    2178:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
    217c:	e3530000 	cmp	r3, #0
    2180:	0a000009 	beq	21ac <draw_line+0xc8>
    {
        swap(&p1_x, &p1_y);
    2184:	e24b2028 	sub	r2, r11, #40	; 0x28
    2188:	e24b302c 	sub	r3, r11, #44	; 0x2c
    218c:	e1a00002 	mov	r0, r2
    2190:	e1a01003 	mov	r1, r3
    2194:	ebffffac 	bl	204c <swap>
        swap(&p2_x, &p2_y);
    2198:	e24b2030 	sub	r2, r11, #48	; 0x30
    219c:	e24b3034 	sub	r3, r11, #52	; 0x34
    21a0:	e1a00002 	mov	r0, r2
    21a4:	e1a01003 	mov	r1, r3
    21a8:	ebffffa7 	bl	204c <swap>
    }
    if (p1_x > p2_x)
    21ac:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    21b0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    21b4:	e1520003 	cmp	r2, r3
    21b8:	da000009 	ble	21e4 <draw_line+0x100>
    {
        swap(&p1_x, &p2_x);
    21bc:	e24b2028 	sub	r2, r11, #40	; 0x28
    21c0:	e24b3030 	sub	r3, r11, #48	; 0x30
    21c4:	e1a00002 	mov	r0, r2
    21c8:	e1a01003 	mov	r1, r3
    21cc:	ebffff9e 	bl	204c <swap>
        swap(&p1_y, &p2_y);
    21d0:	e24b202c 	sub	r2, r11, #44	; 0x2c
    21d4:	e24b3034 	sub	r3, r11, #52	; 0x34
    21d8:	e1a00002 	mov	r0, r2
    21dc:	e1a01003 	mov	r1, r3
    21e0:	ebffff99 	bl	204c <swap>
    }

    int deltaX = p2_x - p1_x,
    21e4:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    21e8:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    21ec:	e0633002 	rsb	r3, r3, r2
    21f0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        deltaY = abs(p2_y - p1_y),
    21f4:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    21f8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    21fc:	e0633002 	rsb	r3, r3, r2
    2200:	e3530000 	cmp	r3, #0
    2204:	b2633000 	rsblt	r3, r3, #0
    2208:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
        error = -(deltaX / 2),
    220c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2210:	e1a02fa3 	lsr	r2, r3, #31
    2214:	e0823003 	add	r3, r2, r3
    2218:	e1a030c3 	asr	r3, r3, #1
    221c:	e2633000 	rsb	r3, r3, #0
    2220:	e50b3008 	str	r3, [r11, #-8]
        yStep = deltaY ? deltaY / (p2_y - p1_y) : 0;
    2224:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2228:	e3530000 	cmp	r3, #0
    222c:	0a000007 	beq	2250 <draw_line+0x16c>
    2230:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2234:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2238:	e0633002 	rsb	r3, r3, r2
    223c:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    2240:	e1a01003 	mov	r1, r3
    2244:	eb0004b1 	bl	3510 <__aeabi_idiv>
    2248:	e1a03000 	mov	r3, r0
    224c:	ea000000 	b	2254 <draw_line+0x170>
    2250:	e3a03000 	mov	r3, #0
    2254:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    
    for (int x = p1_x, y = p1_y; x <= p2_x; x++) {
    2258:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    225c:	e50b300c 	str	r3, [r11, #-12]
    2260:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2264:	e50b3010 	str	r3, [r11, #-16]
    2268:	ea000021 	b	22f4 <draw_line+0x210>
        if (is_steep) {
    226c:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
    2270:	e3530000 	cmp	r3, #0
    2274:	0a000006 	beq	2294 <draw_line+0x1b0>
            plot_pixel(y, x, color);
    2278:	e59b3004 	ldr	r3, [r11, #4]
    227c:	e6ff3073 	uxth	r3, r3
    2280:	e51b0010 	ldr	r0, [r11, #-16]
    2284:	e51b100c 	ldr	r1, [r11, #-12]
    2288:	e1a02003 	mov	r2, r3
    228c:	eb000053 	bl	23e0 <plot_pixel>
    2290:	ea000005 	b	22ac <draw_line+0x1c8>
        } else {
            plot_pixel(x, y, color);
    2294:	e59b3004 	ldr	r3, [r11, #4]
    2298:	e6ff3073 	uxth	r3, r3
    229c:	e51b000c 	ldr	r0, [r11, #-12]
    22a0:	e51b1010 	ldr	r1, [r11, #-16]
    22a4:	e1a02003 	mov	r2, r3
    22a8:	eb00004c 	bl	23e0 <plot_pixel>
        }

        error += deltaY;
    22ac:	e51b2008 	ldr	r2, [r11, #-8]
    22b0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    22b4:	e0823003 	add	r3, r2, r3
    22b8:	e50b3008 	str	r3, [r11, #-8]
        if (error >= 0) {
    22bc:	e51b3008 	ldr	r3, [r11, #-8]
    22c0:	e3530000 	cmp	r3, #0
    22c4:	ba000007 	blt	22e8 <draw_line+0x204>
            y += yStep;
    22c8:	e51b2010 	ldr	r2, [r11, #-16]
    22cc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    22d0:	e0823003 	add	r3, r2, r3
    22d4:	e50b3010 	str	r3, [r11, #-16]
            error -= deltaX;
    22d8:	e51b2008 	ldr	r2, [r11, #-8]
    22dc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    22e0:	e0633002 	rsb	r3, r3, r2
    22e4:	e50b3008 	str	r3, [r11, #-8]
    int deltaX = p2_x - p1_x,
        deltaY = abs(p2_y - p1_y),
        error = -(deltaX / 2),
        yStep = deltaY ? deltaY / (p2_y - p1_y) : 0;
    
    for (int x = p1_x, y = p1_y; x <= p2_x; x++) {
    22e8:	e51b300c 	ldr	r3, [r11, #-12]
    22ec:	e2833001 	add	r3, r3, #1
    22f0:	e50b300c 	str	r3, [r11, #-12]
    22f4:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    22f8:	e51b200c 	ldr	r2, [r11, #-12]
    22fc:	e1520003 	cmp	r2, r3
    2300:	daffffd9 	ble	226c <draw_line+0x188>
        if (error >= 0) {
            y += yStep;
            error -= deltaX;
        }
    }
}
    2304:	e24bd004 	sub	sp, r11, #4
    2308:	e8bd8800 	pop	{r11, pc}

0000230c <draw_box>:
void draw_box(int px, int py, int w, int h, int color) {
    230c:	e92d4800 	push	{r11, lr}
    2310:	e28db004 	add	r11, sp, #4
    2314:	e24dd020 	sub	sp, sp, #32
    2318:	e50b0010 	str	r0, [r11, #-16]
    231c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    2320:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    2324:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    for (int x = px; x < px + w; x++) {
    2328:	e51b3010 	ldr	r3, [r11, #-16]
    232c:	e50b3008 	str	r3, [r11, #-8]
    2330:	ea00000c 	b	2368 <draw_box+0x5c>
        draw_line(x, py, x, py + h - 1, color);
    2334:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    2338:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    233c:	e0823003 	add	r3, r2, r3
    2340:	e2433001 	sub	r3, r3, #1
    2344:	e59b2004 	ldr	r2, [r11, #4]
    2348:	e58d2000 	str	r2, [sp]
    234c:	e51b0008 	ldr	r0, [r11, #-8]
    2350:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    2354:	e51b2008 	ldr	r2, [r11, #-8]
    2358:	ebffff61 	bl	20e4 <draw_line>
            error -= deltaX;
        }
    }
}
void draw_box(int px, int py, int w, int h, int color) {
    for (int x = px; x < px + w; x++) {
    235c:	e51b3008 	ldr	r3, [r11, #-8]
    2360:	e2833001 	add	r3, r3, #1
    2364:	e50b3008 	str	r3, [r11, #-8]
    2368:	e51b2010 	ldr	r2, [r11, #-16]
    236c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2370:	e0822003 	add	r2, r2, r3
    2374:	e51b3008 	ldr	r3, [r11, #-8]
    2378:	e1520003 	cmp	r2, r3
    237c:	caffffec 	bgt	2334 <draw_box+0x28>
        draw_line(x, py, x, py + h - 1, color);
    }
}
    2380:	e24bd004 	sub	sp, r11, #4
    2384:	e8bd8800 	pop	{r11, pc}

00002388 <clear_screen>:

void clear_screen() {
    2388:	e92d4800 	push	{r11, lr}
    238c:	e28db004 	add	r11, sp, #4
    2390:	e24dd010 	sub	sp, sp, #16
    for (int x = 0; x <= 319; x++) {
    2394:	e3a03000 	mov	r3, #0
    2398:	e50b3008 	str	r3, [r11, #-8]
    239c:	ea000009 	b	23c8 <clear_screen+0x40>
        draw_line(x, 0, x, 239, 0);
    23a0:	e3a03000 	mov	r3, #0
    23a4:	e58d3000 	str	r3, [sp]
    23a8:	e51b0008 	ldr	r0, [r11, #-8]
    23ac:	e3a01000 	mov	r1, #0
    23b0:	e51b2008 	ldr	r2, [r11, #-8]
    23b4:	e3a030ef 	mov	r3, #239	; 0xef
    23b8:	ebffff49 	bl	20e4 <draw_line>
        draw_line(x, py, x, py + h - 1, color);
    }
}

void clear_screen() {
    for (int x = 0; x <= 319; x++) {
    23bc:	e51b3008 	ldr	r3, [r11, #-8]
    23c0:	e2833001 	add	r3, r3, #1
    23c4:	e50b3008 	str	r3, [r11, #-8]
    23c8:	e51b2008 	ldr	r2, [r11, #-8]
    23cc:	e300313f 	movw	r3, #319	; 0x13f
    23d0:	e1520003 	cmp	r2, r3
    23d4:	dafffff1 	ble	23a0 <clear_screen+0x18>
        draw_line(x, 0, x, 239, 0);
    }
}
    23d8:	e24bd004 	sub	sp, r11, #4
    23dc:	e8bd8800 	pop	{r11, pc}

000023e0 <plot_pixel>:

void plot_pixel(int x, int y, unsigned short int line_color)
{
    23e0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    23e4:	e28db000 	add	r11, sp, #0
    23e8:	e24dd014 	sub	sp, sp, #20
    23ec:	e50b0008 	str	r0, [r11, #-8]
    23f0:	e50b100c 	str	r1, [r11, #-12]
    23f4:	e1a03002 	mov	r3, r2
    23f8:	e14b30be 	strh	r3, [r11, #-14]
    if (x < 0 || x >= SCREEN_W || y < 0 || y >= SCREEN_H) return; 
    23fc:	e51b3008 	ldr	r3, [r11, #-8]
    2400:	e3530000 	cmp	r3, #0
    2404:	ba000016 	blt	2464 <plot_pixel+0x84>
    2408:	e51b2008 	ldr	r2, [r11, #-8]
    240c:	e300313f 	movw	r3, #319	; 0x13f
    2410:	e1520003 	cmp	r2, r3
    2414:	ca000012 	bgt	2464 <plot_pixel+0x84>
    2418:	e51b300c 	ldr	r3, [r11, #-12]
    241c:	e3530000 	cmp	r3, #0
    2420:	ba00000f 	blt	2464 <plot_pixel+0x84>
    2424:	e51b300c 	ldr	r3, [r11, #-12]
    2428:	e35300ef 	cmp	r3, #239	; 0xef
    242c:	ca00000c 	bgt	2464 <plot_pixel+0x84>
    if (line_color > 0xFFFF) line_color = 0xFFFF;
    *(unsigned short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    2430:	e51b300c 	ldr	r3, [r11, #-12]
    2434:	e1a03503 	lsl	r3, r3, #10
    2438:	e1a02003 	mov	r2, r3
    243c:	e3063e24 	movw	r3, #28196	; 0x6e24
    2440:	e3403000 	movt	r3, #0
    2444:	e5933000 	ldr	r3, [r3]
    2448:	e0822003 	add	r2, r2, r3
    244c:	e51b3008 	ldr	r3, [r11, #-8]
    2450:	e1a03083 	lsl	r3, r3, #1
    2454:	e0823003 	add	r3, r2, r3
    2458:	e15b20be 	ldrh	r2, [r11, #-14]
    245c:	e1c320b0 	strh	r2, [r3]
    2460:	ea000000 	b	2468 <plot_pixel+0x88>
    }
}

void plot_pixel(int x, int y, unsigned short int line_color)
{
    if (x < 0 || x >= SCREEN_W || y < 0 || y >= SCREEN_H) return; 
    2464:	e1a00000 	nop			; (mov r0, r0)
    if (line_color > 0xFFFF) line_color = 0xFFFF;
    *(unsigned short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}
    2468:	e28bd000 	add	sp, r11, #0
    246c:	e8bd0800 	ldmfd	sp!, {r11}
    2470:	e12fff1e 	bx	lr

00002474 <VIS_FastSin_r>:
	[330] = 56755, 57319, 57864, 58393, 58903, 59395, 59870, 60326, 60763, 61183, 
	[340] = 61583, 61965, 62328, 62672, 62997, 63302, 63589, 63856, 64103, 64331, 
	[350] = 64540, 64729, 64898, 65047, 65176, 65286, 65376, 65446, 65496, 65526
};

double VIS_FastSin_r(double rad) {
    2474:	e92d4800 	push	{r11, lr}
    2478:	e28db004 	add	r11, sp, #4
    247c:	e24dd008 	sub	sp, sp, #8
    2480:	e14b00fc 	strd	r0, [r11, #-12]
    return VIS_FastSin_d(rad * VIS_R2D);
    2484:	e14b00dc 	ldrd	r0, [r11, #-12]
    2488:	e30c21f8 	movw	r2, #49656	; 0xc1f8
    248c:	e3412a63 	movt	r2, #6755	; 0x1a63
    2490:	e30a35dc 	movw	r3, #42460	; 0xa5dc
    2494:	e344304c 	movt	r3, #16460	; 0x404c
    2498:	eb000576 	bl	3a78 <__aeabi_dmul>
    249c:	e1a02000 	mov	r2, r0
    24a0:	e1a03001 	mov	r3, r1
    24a4:	e1a00002 	mov	r0, r2
    24a8:	e1a01003 	mov	r1, r3
    24ac:	eb000005 	bl	24c8 <VIS_FastSin_d>
    24b0:	e1a02000 	mov	r2, r0
    24b4:	e1a03001 	mov	r3, r1
}
    24b8:	e1a00002 	mov	r0, r2
    24bc:	e1a01003 	mov	r1, r3
    24c0:	e24bd004 	sub	sp, r11, #4
    24c4:	e8bd8800 	pop	{r11, pc}

000024c8 <VIS_FastSin_d>:

double VIS_FastSin_d(double deg) {
    24c8:	e92d4800 	push	{r11, lr}
    24cc:	e28db004 	add	r11, sp, #4
    24d0:	e24dd010 	sub	sp, sp, #16
    24d4:	e14b01f4 	strd	r0, [r11, #-20]	; 0xffffffec
    int degree = ((int) deg) % 360;
    24d8:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    24dc:	eb0006dd 	bl	4058 <__aeabi_d2iz>
    24e0:	e1a03000 	mov	r3, r0
    24e4:	e30620b7 	movw	r2, #24759	; 0x60b7
    24e8:	e34b260b 	movt	r2, #46603	; 0xb60b
    24ec:	e0c21392 	smull	r1, r2, r2, r3
    24f0:	e0822003 	add	r2, r2, r3
    24f4:	e1a01442 	asr	r1, r2, #8
    24f8:	e1a02fc3 	asr	r2, r3, #31
    24fc:	e0622001 	rsb	r2, r2, r1
    2500:	e3a01f5a 	mov	r1, #360	; 0x168
    2504:	e0020291 	mul	r2, r1, r2
    2508:	e0623003 	rsb	r3, r2, r3
    250c:	e50b3008 	str	r3, [r11, #-8]
    return SINs[degree];
    2510:	e3053288 	movw	r3, #21128	; 0x5288
    2514:	e3403000 	movt	r3, #0
    2518:	e51b2008 	ldr	r2, [r11, #-8]
    251c:	e1a02182 	lsl	r2, r2, #3
    2520:	e0833002 	add	r3, r3, r2
    2524:	e1c320d0 	ldrd	r2, [r3]
    // return sin(deg * VIS_D2R);
}
    2528:	e1a00002 	mov	r0, r2
    252c:	e1a01003 	mov	r1, r3
    2530:	e24bd004 	sub	sp, r11, #4
    2534:	e8bd8800 	pop	{r11, pc}

00002538 <VIS_FastCos_r>:

double VIS_FastCos_r(double rad) {
    2538:	e92d4800 	push	{r11, lr}
    253c:	e28db004 	add	r11, sp, #4
    2540:	e24dd008 	sub	sp, sp, #8
    2544:	e14b00fc 	strd	r0, [r11, #-12]
    return VIS_FastCos_d(rad * VIS_R2D);
    2548:	e14b00dc 	ldrd	r0, [r11, #-12]
    254c:	e30c21f8 	movw	r2, #49656	; 0xc1f8
    2550:	e3412a63 	movt	r2, #6755	; 0x1a63
    2554:	e30a35dc 	movw	r3, #42460	; 0xa5dc
    2558:	e344304c 	movt	r3, #16460	; 0x404c
    255c:	eb000545 	bl	3a78 <__aeabi_dmul>
    2560:	e1a02000 	mov	r2, r0
    2564:	e1a03001 	mov	r3, r1
    2568:	e1a00002 	mov	r0, r2
    256c:	e1a01003 	mov	r1, r3
    2570:	eb000005 	bl	258c <VIS_FastCos_d>
    2574:	e1a02000 	mov	r2, r0
    2578:	e1a03001 	mov	r3, r1
}
    257c:	e1a00002 	mov	r0, r2
    2580:	e1a01003 	mov	r1, r3
    2584:	e24bd004 	sub	sp, r11, #4
    2588:	e8bd8800 	pop	{r11, pc}

0000258c <VIS_FastCos_d>:

double VIS_FastCos_d(double deg) {
    258c:	e92d4800 	push	{r11, lr}
    2590:	e28db004 	add	r11, sp, #4
    2594:	e24dd010 	sub	sp, sp, #16
    2598:	e14b01f4 	strd	r0, [r11, #-20]	; 0xffffffec
    int degree = ((int) deg) % 360;
    259c:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    25a0:	eb0006ac 	bl	4058 <__aeabi_d2iz>
    25a4:	e1a03000 	mov	r3, r0
    25a8:	e30620b7 	movw	r2, #24759	; 0x60b7
    25ac:	e34b260b 	movt	r2, #46603	; 0xb60b
    25b0:	e0c21392 	smull	r1, r2, r2, r3
    25b4:	e0822003 	add	r2, r2, r3
    25b8:	e1a01442 	asr	r1, r2, #8
    25bc:	e1a02fc3 	asr	r2, r3, #31
    25c0:	e0622001 	rsb	r2, r2, r1
    25c4:	e3a01f5a 	mov	r1, #360	; 0x168
    25c8:	e0020291 	mul	r2, r1, r2
    25cc:	e0623003 	rsb	r3, r2, r3
    25d0:	e50b3008 	str	r3, [r11, #-8]
    return COSs[degree];
    25d4:	e3043748 	movw	r3, #18248	; 0x4748
    25d8:	e3403000 	movt	r3, #0
    25dc:	e51b2008 	ldr	r2, [r11, #-8]
    25e0:	e1a02182 	lsl	r2, r2, #3
    25e4:	e0833002 	add	r3, r3, r2
    25e8:	e1c320d0 	ldrd	r2, [r3]
    // return cos(deg * VIS_D2R);
}
    25ec:	e1a00002 	mov	r0, r2
    25f0:	e1a01003 	mov	r1, r3
    25f4:	e24bd004 	sub	sp, r11, #4
    25f8:	e8bd8800 	pop	{r11, pc}

000025fc <VIS_FastSin_d16>:

int VIS_FastSin_d16(int deg) {
    25fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2600:	e28db000 	add	r11, sp, #0
    2604:	e24dd014 	sub	sp, sp, #20
    2608:	e50b0010 	str	r0, [r11, #-16]
    int degree = deg % 360;
    260c:	e51b3010 	ldr	r3, [r11, #-16]
    2610:	e30620b7 	movw	r2, #24759	; 0x60b7
    2614:	e34b260b 	movt	r2, #46603	; 0xb60b
    2618:	e0c21392 	smull	r1, r2, r2, r3
    261c:	e0822003 	add	r2, r2, r3
    2620:	e1a01442 	asr	r1, r2, #8
    2624:	e1a02fc3 	asr	r2, r3, #31
    2628:	e0622001 	rsb	r2, r2, r1
    262c:	e3a01f5a 	mov	r1, #360	; 0x168
    2630:	e0020291 	mul	r2, r1, r2
    2634:	e0623003 	rsb	r3, r2, r3
    2638:	e50b3008 	str	r3, [r11, #-8]
    return SIN_large[degree];
    263c:	e3053dc8 	movw	r3, #24008	; 0x5dc8
    2640:	e3403000 	movt	r3, #0
    2644:	e51b2008 	ldr	r2, [r11, #-8]
    2648:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    264c:	e1a00003 	mov	r0, r3
    2650:	e28bd000 	add	sp, r11, #0
    2654:	e8bd0800 	ldmfd	sp!, {r11}
    2658:	e12fff1e 	bx	lr

0000265c <VIS_FastSin_r16>:

int VIS_FastSin_r16(int rad) {
    265c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2660:	e28db000 	add	r11, sp, #0
    2664:	e24dd014 	sub	sp, sp, #20
    2668:	e50b0010 	str	r0, [r11, #-16]
	int degree = ((rad * VIS_R2D_16) >> 24) % 360;
    266c:	e51b3010 	ldr	r3, [r11, #-16]
    2670:	e303294c 	movw	r2, #14668	; 0x394c
    2674:	e0030392 	mul	r3, r2, r3
    2678:	e1a03c43 	asr	r3, r3, #24
    267c:	e30620b7 	movw	r2, #24759	; 0x60b7
    2680:	e34b260b 	movt	r2, #46603	; 0xb60b
    2684:	e0c21392 	smull	r1, r2, r2, r3
    2688:	e0822003 	add	r2, r2, r3
    268c:	e1a01442 	asr	r1, r2, #8
    2690:	e1a02fc3 	asr	r2, r3, #31
    2694:	e0622001 	rsb	r2, r2, r1
    2698:	e3a01f5a 	mov	r1, #360	; 0x168
    269c:	e0020291 	mul	r2, r1, r2
    26a0:	e0623003 	rsb	r3, r2, r3
    26a4:	e50b3008 	str	r3, [r11, #-8]
	return SIN_large[degree];
    26a8:	e3053dc8 	movw	r3, #24008	; 0x5dc8
    26ac:	e3403000 	movt	r3, #0
    26b0:	e51b2008 	ldr	r2, [r11, #-8]
    26b4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    26b8:	e1a00003 	mov	r0, r3
    26bc:	e28bd000 	add	sp, r11, #0
    26c0:	e8bd0800 	ldmfd	sp!, {r11}
    26c4:	e12fff1e 	bx	lr

000026c8 <VIS_FastCos_d16>:

int VIS_FastCos_d16(int deg) {
    26c8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    26cc:	e28db000 	add	r11, sp, #0
    26d0:	e24dd014 	sub	sp, sp, #20
    26d4:	e50b0010 	str	r0, [r11, #-16]
    int degree = deg % 360;
    26d8:	e51b3010 	ldr	r3, [r11, #-16]
    26dc:	e30620b7 	movw	r2, #24759	; 0x60b7
    26e0:	e34b260b 	movt	r2, #46603	; 0xb60b
    26e4:	e0c21392 	smull	r1, r2, r2, r3
    26e8:	e0822003 	add	r2, r2, r3
    26ec:	e1a01442 	asr	r1, r2, #8
    26f0:	e1a02fc3 	asr	r2, r3, #31
    26f4:	e0622001 	rsb	r2, r2, r1
    26f8:	e3a01f5a 	mov	r1, #360	; 0x168
    26fc:	e0020291 	mul	r2, r1, r2
    2700:	e0623003 	rsb	r3, r2, r3
    2704:	e50b3008 	str	r3, [r11, #-8]
    return COS_large[degree];
    2708:	e3063368 	movw	r3, #25448	; 0x6368
    270c:	e3403000 	movt	r3, #0
    2710:	e51b2008 	ldr	r2, [r11, #-8]
    2714:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    2718:	e1a00003 	mov	r0, r3
    271c:	e28bd000 	add	sp, r11, #0
    2720:	e8bd0800 	ldmfd	sp!, {r11}
    2724:	e12fff1e 	bx	lr

00002728 <VIS_FastCos_r16>:

int VIS_FastCos_r16(int rad) {
    2728:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    272c:	e28db000 	add	r11, sp, #0
    2730:	e24dd014 	sub	sp, sp, #20
    2734:	e50b0010 	str	r0, [r11, #-16]
	int degree = ((rad * VIS_R2D_16) >> 16) % 360;
    2738:	e51b3010 	ldr	r3, [r11, #-16]
    273c:	e303294c 	movw	r2, #14668	; 0x394c
    2740:	e0030392 	mul	r3, r2, r3
    2744:	e1a03843 	asr	r3, r3, #16
    2748:	e30620b7 	movw	r2, #24759	; 0x60b7
    274c:	e34b260b 	movt	r2, #46603	; 0xb60b
    2750:	e0c21392 	smull	r1, r2, r2, r3
    2754:	e0822003 	add	r2, r2, r3
    2758:	e1a01442 	asr	r1, r2, #8
    275c:	e1a02fc3 	asr	r2, r3, #31
    2760:	e0622001 	rsb	r2, r2, r1
    2764:	e3a01f5a 	mov	r1, #360	; 0x168
    2768:	e0020291 	mul	r2, r1, r2
    276c:	e0623003 	rsb	r3, r2, r3
    2770:	e50b3008 	str	r3, [r11, #-8]
	return COS_large[degree];
    2774:	e3063368 	movw	r3, #25448	; 0x6368
    2778:	e3403000 	movt	r3, #0
    277c:	e51b2008 	ldr	r2, [r11, #-8]
    2780:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    2784:	e1a00003 	mov	r0, r3
    2788:	e28bd000 	add	sp, r11, #0
    278c:	e8bd0800 	ldmfd	sp!, {r11}
    2790:	e12fff1e 	bx	lr

00002794 <setReal>:
#include "../helpers/math.h"
#include "FFT.h"

//note: in this file, all the double value are shifted to the left by 16 bits

 void setReal ( Complex *c,  int x )  {  c->r = x ;  }
    2794:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2798:	e28db000 	add	r11, sp, #0
    279c:	e24dd00c 	sub	sp, sp, #12
    27a0:	e50b0008 	str	r0, [r11, #-8]
    27a4:	e50b100c 	str	r1, [r11, #-12]
    27a8:	e51b3008 	ldr	r3, [r11, #-8]
    27ac:	e51b200c 	ldr	r2, [r11, #-12]
    27b0:	e5832000 	str	r2, [r3]
    27b4:	e28bd000 	add	sp, r11, #0
    27b8:	e8bd0800 	ldmfd	sp!, {r11}
    27bc:	e12fff1e 	bx	lr

000027c0 <getReal>:
 int getReal ( Complex c )  {  return c.r ;  }
    27c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    27c4:	e28db000 	add	r11, sp, #0
    27c8:	e24dd00c 	sub	sp, sp, #12
    27cc:	e24b300c 	sub	r3, r11, #12
    27d0:	e8830003 	stm	r3, {r0, r1}
    27d4:	e51b300c 	ldr	r3, [r11, #-12]
    27d8:	e1a00003 	mov	r0, r3
    27dc:	e28bd000 	add	sp, r11, #0
    27e0:	e8bd0800 	ldmfd	sp!, {r11}
    27e4:	e12fff1e 	bx	lr

000027e8 <add>:
 Complex add (Complex c,  Complex rhs )   {
    27e8:	e24dd008 	sub	sp, sp, #8
    27ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    27f0:	e28db000 	add	r11, sp, #0
    27f4:	e24dd01c 	sub	sp, sp, #28
    27f8:	e50b0010 	str	r0, [r11, #-16]
    27fc:	e24b0018 	sub	r0, r11, #24
    2800:	e8800006 	stm	r0, {r1, r2}
    2804:	e58b3008 	str	r3, [r11, #8]
    Complex newC;
    newC.i += c.i;
    2808:	e51b2008 	ldr	r2, [r11, #-8]
    280c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2810:	e0823003 	add	r3, r2, r3
    2814:	e50b3008 	str	r3, [r11, #-8]
    newC.r += c.r;
    2818:	e51b200c 	ldr	r2, [r11, #-12]
    281c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2820:	e0823003 	add	r3, r2, r3
    2824:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    2828:	e51b3010 	ldr	r3, [r11, #-16]
    282c:	e24b200c 	sub	r2, r11, #12
    2830:	e8920003 	ldm	r2, {r0, r1}
    2834:	e8830003 	stm	r3, {r0, r1}
}
    2838:	e51b0010 	ldr	r0, [r11, #-16]
    283c:	e28bd000 	add	sp, r11, #0
    2840:	e8bd0800 	ldmfd	sp!, {r11}
    2844:	e28dd008 	add	sp, sp, #8
    2848:	e12fff1e 	bx	lr

0000284c <sub>:
  Complex sub (Complex c,  Complex rhs )   {
    284c:	e24dd008 	sub	sp, sp, #8
    2850:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2854:	e28db000 	add	r11, sp, #0
    2858:	e24dd01c 	sub	sp, sp, #28
    285c:	e50b0010 	str	r0, [r11, #-16]
    2860:	e24b0018 	sub	r0, r11, #24
    2864:	e8800006 	stm	r0, {r1, r2}
    2868:	e58b3008 	str	r3, [r11, #8]
   Complex newC;
    newC.i -= c.i;
    286c:	e51b2008 	ldr	r2, [r11, #-8]
    2870:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2874:	e0633002 	rsb	r3, r3, r2
    2878:	e50b3008 	str	r3, [r11, #-8]
    newC.r -= c.r;
    287c:	e51b200c 	ldr	r2, [r11, #-12]
    2880:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2884:	e0633002 	rsb	r3, r3, r2
    2888:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    288c:	e51b3010 	ldr	r3, [r11, #-16]
    2890:	e24b200c 	sub	r2, r11, #12
    2894:	e8920003 	ldm	r2, {r0, r1}
    2898:	e8830003 	stm	r3, {r0, r1}
}
    289c:	e51b0010 	ldr	r0, [r11, #-16]
    28a0:	e28bd000 	add	sp, r11, #0
    28a4:	e8bd0800 	ldmfd	sp!, {r11}
    28a8:	e28dd008 	add	sp, sp, #8
    28ac:	e12fff1e 	bx	lr

000028b0 <multiply>:
 Complex multiply (Complex c,  Complex rhs )   {
    28b0:	e24dd008 	sub	sp, sp, #8
    28b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    28b8:	e28db000 	add	r11, sp, #0
    28bc:	e24dd01c 	sub	sp, sp, #28
    28c0:	e50b0010 	str	r0, [r11, #-16]
    28c4:	e24b0018 	sub	r0, r11, #24
    28c8:	e8800006 	stm	r0, {r1, r2}
    28cc:	e58b3008 	str	r3, [r11, #8]
    Complex newC;
    newC.i = (c.r>>8) * (rhs.i>>8) + (c.i>>8) * (rhs.r>>8);
    28d0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    28d4:	e1a03443 	asr	r3, r3, #8
    28d8:	e59b200c 	ldr	r2, [r11, #12]
    28dc:	e1a02442 	asr	r2, r2, #8
    28e0:	e0020392 	mul	r2, r2, r3
    28e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    28e8:	e1a03443 	asr	r3, r3, #8
    28ec:	e59b1008 	ldr	r1, [r11, #8]
    28f0:	e1a01441 	asr	r1, r1, #8
    28f4:	e0030391 	mul	r3, r1, r3
    28f8:	e0823003 	add	r3, r2, r3
    28fc:	e50b3008 	str	r3, [r11, #-8]
    newC.r = (c.r>>8) * (rhs.r>>8) - (c.i>>8) * (rhs.i>>8);
    2900:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2904:	e1a03443 	asr	r3, r3, #8
    2908:	e59b2008 	ldr	r2, [r11, #8]
    290c:	e1a02442 	asr	r2, r2, #8
    2910:	e0020392 	mul	r2, r2, r3
    2914:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2918:	e1a03443 	asr	r3, r3, #8
    291c:	e59b100c 	ldr	r1, [r11, #12]
    2920:	e1a01441 	asr	r1, r1, #8
    2924:	e0030391 	mul	r3, r1, r3
    2928:	e0633002 	rsb	r3, r3, r2
    292c:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    2930:	e51b3010 	ldr	r3, [r11, #-16]
    2934:	e24b200c 	sub	r2, r11, #12
    2938:	e8920003 	ldm	r2, {r0, r1}
    293c:	e8830003 	stm	r3, {r0, r1}
    //return Complex ( r * rhs.r - i * rhs.i, r * rhs.i + i * rhs.r )
}
    2940:	e51b0010 	ldr	r0, [r11, #-16]
    2944:	e28bd000 	add	sp, r11, #0
    2948:	e8bd0800 	ldmfd	sp!, {r11}
    294c:	e28dd008 	add	sp, sp, #8
    2950:	e12fff1e 	bx	lr

00002954 <divideByInt>:

 Complex divideByInt (Complex c,  int x )   {
    2954:	e92d4800 	push	{r11, lr}
    2958:	e28db004 	add	r11, sp, #4
    295c:	e24dd018 	sub	sp, sp, #24
    2960:	e50b0010 	str	r0, [r11, #-16]
    2964:	e24b0018 	sub	r0, r11, #24
    2968:	e8800006 	stm	r0, {r1, r2}
    296c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    Complex newC;
    newC.i /= x;
    2970:	e51b3008 	ldr	r3, [r11, #-8]
    2974:	e1a00003 	mov	r0, r3
    2978:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    297c:	eb0002e3 	bl	3510 <__aeabi_idiv>
    2980:	e1a03000 	mov	r3, r0
    2984:	e50b3008 	str	r3, [r11, #-8]
    newC.r /= x;
    2988:	e51b300c 	ldr	r3, [r11, #-12]
    298c:	e1a00003 	mov	r0, r3
    2990:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    2994:	eb0002dd 	bl	3510 <__aeabi_idiv>
    2998:	e1a03000 	mov	r3, r0
    299c:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    29a0:	e51b3010 	ldr	r3, [r11, #-16]
    29a4:	e24b200c 	sub	r2, r11, #12
    29a8:	e8920003 	ldm	r2, {r0, r1}
    29ac:	e8830003 	stm	r3, {r0, r1}
}
    29b0:	e51b0010 	ldr	r0, [r11, #-16]
    29b4:	e24bd004 	sub	sp, r11, #4
    29b8:	e8bd8800 	pop	{r11, pc}

000029bc <conjg>:

 Complex conjg (Complex c)  {
    29bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    29c0:	e28db000 	add	r11, sp, #0
    29c4:	e24dd01c 	sub	sp, sp, #28
    29c8:	e50b0010 	str	r0, [r11, #-16]
    29cc:	e24b3018 	sub	r3, r11, #24
    29d0:	e8830006 	stm	r3, {r1, r2}
    Complex newC;
    newC.i = -c.i;
    29d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    29d8:	e2633000 	rsb	r3, r3, #0
    29dc:	e50b3008 	str	r3, [r11, #-8]
    newC.r = c.r;
    29e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    29e4:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    29e8:	e51b3010 	ldr	r3, [r11, #-16]
    29ec:	e24b200c 	sub	r2, r11, #12
    29f0:	e8920003 	ldm	r2, {r0, r1}
    29f4:	e8830003 	stm	r3, {r0, r1}
}
    29f8:	e51b0010 	ldr	r0, [r11, #-16]
    29fc:	e28bd000 	add	sp, r11, #0
    2a00:	e8bd0800 	ldmfd	sp!, {r11}
    2a04:	e12fff1e 	bx	lr

00002a08 <magnitude>:
 
  int magnitude (Complex c)  {
    2a08:	e92d4800 	push	{r11, lr}
    2a0c:	e28db004 	add	r11, sp, #4
    2a10:	e24dd008 	sub	sp, sp, #8
    2a14:	e24b300c 	sub	r3, r11, #12
    2a18:	e8830003 	stm	r3, {r0, r1}
    return sqrt((c.i>>8)*(c.i>>8) + (c.r>>8)*(c.r>>8));
    2a1c:	e51b3008 	ldr	r3, [r11, #-8]
    2a20:	e1a03443 	asr	r3, r3, #8
    2a24:	e51b2008 	ldr	r2, [r11, #-8]
    2a28:	e1a02442 	asr	r2, r2, #8
    2a2c:	e0020392 	mul	r2, r2, r3
    2a30:	e51b300c 	ldr	r3, [r11, #-12]
    2a34:	e1a03443 	asr	r3, r3, #8
    2a38:	e51b100c 	ldr	r1, [r11, #-12]
    2a3c:	e1a01441 	asr	r1, r1, #8
    2a40:	e0030391 	mul	r3, r1, r3
    2a44:	e0823003 	add	r3, r2, r3
    2a48:	e1a00003 	mov	r0, r3
    2a4c:	eb0003d2 	bl	399c <__aeabi_i2d>
    2a50:	e1a02000 	mov	r2, r0
    2a54:	e1a03001 	mov	r3, r1
    2a58:	e1a00002 	mov	r0, r2
    2a5c:	e1a01003 	mov	r1, r3
    2a60:	eb00016f 	bl	3024 <sqrt>
    2a64:	e1a02000 	mov	r2, r0
    2a68:	e1a03001 	mov	r3, r1
    2a6c:	e1a00002 	mov	r0, r2
    2a70:	e1a01003 	mov	r1, r3
    2a74:	eb000577 	bl	4058 <__aeabi_d2iz>
    2a78:	e1a03000 	mov	r3, r0
}
    2a7c:	e1a00003 	mov	r0, r3
    2a80:	e24bd004 	sub	sp, r11, #4
    2a84:	e8bd8800 	pop	{r11, pc}

00002a88 <initOmega>:


 void initOmega (Complex *omega, Complex *omegaInverse,   int n )  {
    2a88:	e92d4810 	push	{r4, r11, lr}
    2a8c:	e28db008 	add	r11, sp, #8
    2a90:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    2a94:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
    2a98:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
    2a9c:	e50b2028 	str	r2, [r11, #-40]	; 0xffffffd8
    for ( int i = 0 ; i < n ; ++ i )  {
    2aa0:	e3a03000 	mov	r3, #0
    2aa4:	e50b3010 	str	r3, [r11, #-16]
    2aa8:	ea00002d 	b	2b64 <initOmega+0xdc>
        Complex c;
        c.i = VIS_FastSin_d16 ( 360 / n * i );
    2aac:	e3a00f5a 	mov	r0, #360	; 0x168
    2ab0:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2ab4:	eb000295 	bl	3510 <__aeabi_idiv>
    2ab8:	e1a03000 	mov	r3, r0
    2abc:	e51b2010 	ldr	r2, [r11, #-16]
    2ac0:	e0030392 	mul	r3, r2, r3
    2ac4:	e1a00003 	mov	r0, r3
    2ac8:	ebfffecb 	bl	25fc <VIS_FastSin_d16>
    2acc:	e1a03000 	mov	r3, r0
    2ad0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        c.r = VIS_FastCos_d16 ( 360 / n * i);
    2ad4:	e3a00f5a 	mov	r0, #360	; 0x168
    2ad8:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2adc:	eb00028b 	bl	3510 <__aeabi_idiv>
    2ae0:	e1a03000 	mov	r3, r0
    2ae4:	e51b2010 	ldr	r2, [r11, #-16]
    2ae8:	e0030392 	mul	r3, r2, r3
    2aec:	e1a00003 	mov	r0, r3
    2af0:	ebfffef4 	bl	26c8 <VIS_FastCos_d16>
    2af4:	e1a03000 	mov	r3, r0
    2af8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        omega [i] = c;
    2afc:	e51b3010 	ldr	r3, [r11, #-16]
    2b00:	e1a03183 	lsl	r3, r3, #3
    2b04:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2b08:	e0823003 	add	r3, r2, r3
    2b0c:	e24b2018 	sub	r2, r11, #24
    2b10:	e8920003 	ldm	r2, {r0, r1}
    2b14:	e8830003 	stm	r3, {r0, r1}
        omegaInverse [i] = conjg ( omega [i] ) ;
    2b18:	e51b3010 	ldr	r3, [r11, #-16]
    2b1c:	e1a03183 	lsl	r3, r3, #3
    2b20:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    2b24:	e0824003 	add	r4, r2, r3
    2b28:	e51b3010 	ldr	r3, [r11, #-16]
    2b2c:	e1a03183 	lsl	r3, r3, #3
    2b30:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2b34:	e0823003 	add	r3, r2, r3
    2b38:	e24b2034 	sub	r2, r11, #52	; 0x34
    2b3c:	e1a00002 	mov	r0, r2
    2b40:	e8930006 	ldm	r3, {r1, r2}
    2b44:	ebffff9c 	bl	29bc <conjg>
    2b48:	e1a03004 	mov	r3, r4
    2b4c:	e24b2034 	sub	r2, r11, #52	; 0x34
    2b50:	e8920003 	ldm	r2, {r0, r1}
    2b54:	e8830003 	stm	r3, {r0, r1}
    return sqrt((c.i>>8)*(c.i>>8) + (c.r>>8)*(c.r>>8));
}


 void initOmega (Complex *omega, Complex *omegaInverse,   int n )  {
    for ( int i = 0 ; i < n ; ++ i )  {
    2b58:	e51b3010 	ldr	r3, [r11, #-16]
    2b5c:	e2833001 	add	r3, r3, #1
    2b60:	e50b3010 	str	r3, [r11, #-16]
    2b64:	e51b2010 	ldr	r2, [r11, #-16]
    2b68:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    2b6c:	e1520003 	cmp	r2, r3
    2b70:	baffffcd 	blt	2aac <initOmega+0x24>
        c.i = VIS_FastSin_d16 ( 360 / n * i );
        c.r = VIS_FastCos_d16 ( 360 / n * i);
        omega [i] = c;
        omegaInverse [i] = conjg ( omega [i] ) ;
    }
}
    2b74:	e24bd008 	sub	sp, r11, #8
    2b78:	e8bd8810 	pop	{r4, r11, pc}

00002b7c <transform>:

void transform ( Complex *a,  int n,  Complex* omega ) {
    2b7c:	e92d4810 	push	{r4, r11, lr}
    2b80:	e28db008 	add	r11, sp, #8
    2b84:	e24dd054 	sub	sp, sp, #84	; 0x54
    2b88:	e50b0040 	str	r0, [r11, #-64]	; 0xffffffc0
    2b8c:	e50b1044 	str	r1, [r11, #-68]	; 0xffffffbc
    2b90:	e50b2048 	str	r2, [r11, #-72]	; 0xffffffb8
    for ( int i = 0, j = 0 ; i < n ; ++ i )  {
    2b94:	e3a03000 	mov	r3, #0
    2b98:	e50b3010 	str	r3, [r11, #-16]
    2b9c:	e3a03000 	mov	r3, #0
    2ba0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    2ba4:	ea00002d 	b	2c60 <transform+0xe4>
        if ( i > j ){
    2ba8:	e51b2010 	ldr	r2, [r11, #-16]
    2bac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2bb0:	e1520003 	cmp	r2, r3
    2bb4:	da000017 	ble	2c18 <transform+0x9c>
            //swap ( a [i], a [j] )
            Complex temp = a[i];
    2bb8:	e51b3010 	ldr	r3, [r11, #-16]
    2bbc:	e1a03183 	lsl	r3, r3, #3
    2bc0:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    2bc4:	e0822003 	add	r2, r2, r3
    2bc8:	e24b3030 	sub	r3, r11, #48	; 0x30
    2bcc:	e8920003 	ldm	r2, {r0, r1}
    2bd0:	e8830003 	stm	r3, {r0, r1}
            a[i] = a[j];
    2bd4:	e51b3010 	ldr	r3, [r11, #-16]
    2bd8:	e1a03183 	lsl	r3, r3, #3
    2bdc:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    2be0:	e0823003 	add	r3, r2, r3
    2be4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    2be8:	e1a02182 	lsl	r2, r2, #3
    2bec:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    2bf0:	e0812002 	add	r2, r1, r2
    2bf4:	e8920003 	ldm	r2, {r0, r1}
    2bf8:	e8830003 	stm	r3, {r0, r1}
            a[j] = temp;
    2bfc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    2c00:	e1a03183 	lsl	r3, r3, #3
    2c04:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    2c08:	e0823003 	add	r3, r2, r3
    2c0c:	e24b2030 	sub	r2, r11, #48	; 0x30
    2c10:	e8920003 	ldm	r2, {r0, r1}
    2c14:	e8830003 	stm	r3, {r0, r1}
        } 
        for( int l = n >> 1 ; ( j ^= l ) < l ; l >>= 1 ) ;
    2c18:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    2c1c:	e1a030c3 	asr	r3, r3, #1
    2c20:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    2c24:	ea000002 	b	2c34 <transform+0xb8>
    2c28:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2c2c:	e1a030c3 	asr	r3, r3, #1
    2c30:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    2c34:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    2c38:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2c3c:	e0223003 	eor	r3, r2, r3
    2c40:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    2c44:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    2c48:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2c4c:	e1520003 	cmp	r2, r3
    2c50:	bafffff4 	blt	2c28 <transform+0xac>
        omegaInverse [i] = conjg ( omega [i] ) ;
    }
}

void transform ( Complex *a,  int n,  Complex* omega ) {
    for ( int i = 0, j = 0 ; i < n ; ++ i )  {
    2c54:	e51b3010 	ldr	r3, [r11, #-16]
    2c58:	e2833001 	add	r3, r3, #1
    2c5c:	e50b3010 	str	r3, [r11, #-16]
    2c60:	e51b2010 	ldr	r2, [r11, #-16]
    2c64:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    2c68:	e1520003 	cmp	r2, r3
    2c6c:	baffffcd 	blt	2ba8 <transform+0x2c>
            a[j] = temp;
        } 
        for( int l = n >> 1 ; ( j ^= l ) < l ; l >>= 1 ) ;
    }

    for ( int l = 2 ; l <= n ; l <<= 1 )  {
    2c70:	e3a03002 	mov	r3, #2
    2c74:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    2c78:	ea00005e 	b	2df8 <transform+0x27c>
        int m = l / 2;
    2c7c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2c80:	e1a02fa3 	lsr	r2, r3, #31
    2c84:	e0823003 	add	r3, r2, r3
    2c88:	e1a030c3 	asr	r3, r3, #1
    2c8c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
        for ( Complex *p = a ; p != a + n ; p += l )  {
    2c90:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    2c94:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    2c98:	ea00004c 	b	2dd0 <transform+0x254>
            for ( int i = 0 ; i < m ; ++ i )  {
    2c9c:	e3a03000 	mov	r3, #0
    2ca0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    2ca4:	ea000040 	b	2dac <transform+0x230>
                Complex t = multiply(omega [n / l * i] , p [m + i]);
    2ca8:	e51b0044 	ldr	r0, [r11, #-68]	; 0xffffffbc
    2cac:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    2cb0:	eb000216 	bl	3510 <__aeabi_idiv>
    2cb4:	e1a03000 	mov	r3, r0
    2cb8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    2cbc:	e0030392 	mul	r3, r2, r3
    2cc0:	e1a03183 	lsl	r3, r3, #3
    2cc4:	e51b2048 	ldr	r2, [r11, #-72]	; 0xffffffb8
    2cc8:	e0822003 	add	r2, r2, r3
    2ccc:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2cd0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2cd4:	e0813003 	add	r3, r1, r3
    2cd8:	e1a03183 	lsl	r3, r3, #3
    2cdc:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    2ce0:	e0813003 	add	r3, r1, r3
    2ce4:	e24b1038 	sub	r1, r11, #56	; 0x38
    2ce8:	e5930004 	ldr	r0, [r3, #4]
    2cec:	e58d0000 	str	r0, [sp]
    2cf0:	e5933000 	ldr	r3, [r3]
    2cf4:	e1a00001 	mov	r0, r1
    2cf8:	e8920006 	ldm	r2, {r1, r2}
    2cfc:	ebfffeeb 	bl	28b0 <multiply>
                p [m + i] = sub (p [i] , t) ;
    2d00:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2d04:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2d08:	e0823003 	add	r3, r2, r3
    2d0c:	e1a03183 	lsl	r3, r3, #3
    2d10:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2d14:	e0824003 	add	r4, r2, r3
    2d18:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2d1c:	e1a03183 	lsl	r3, r3, #3
    2d20:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2d24:	e0822003 	add	r2, r2, r3
    2d28:	e24b1054 	sub	r1, r11, #84	; 0x54
    2d2c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    2d30:	e58d3000 	str	r3, [sp]
    2d34:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    2d38:	e1a00001 	mov	r0, r1
    2d3c:	e8920006 	ldm	r2, {r1, r2}
    2d40:	ebfffec1 	bl	284c <sub>
    2d44:	e1a03004 	mov	r3, r4
    2d48:	e24b2054 	sub	r2, r11, #84	; 0x54
    2d4c:	e8920003 	ldm	r2, {r0, r1}
    2d50:	e8830003 	stm	r3, {r0, r1}
                p [i] = add(p [i], t) ;
    2d54:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2d58:	e1a03183 	lsl	r3, r3, #3
    2d5c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2d60:	e0824003 	add	r4, r2, r3
    2d64:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2d68:	e1a03183 	lsl	r3, r3, #3
    2d6c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2d70:	e0822003 	add	r2, r2, r3
    2d74:	e24b1054 	sub	r1, r11, #84	; 0x54
    2d78:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    2d7c:	e58d3000 	str	r3, [sp]
    2d80:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    2d84:	e1a00001 	mov	r0, r1
    2d88:	e8920006 	ldm	r2, {r1, r2}
    2d8c:	ebfffe95 	bl	27e8 <add>
    2d90:	e1a03004 	mov	r3, r4
    2d94:	e24b2054 	sub	r2, r11, #84	; 0x54
    2d98:	e8920003 	ldm	r2, {r0, r1}
    2d9c:	e8830003 	stm	r3, {r0, r1}
    }

    for ( int l = 2 ; l <= n ; l <<= 1 )  {
        int m = l / 2;
        for ( Complex *p = a ; p != a + n ; p += l )  {
            for ( int i = 0 ; i < m ; ++ i )  {
    2da0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2da4:	e2833001 	add	r3, r3, #1
    2da8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    2dac:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    2db0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    2db4:	e1520003 	cmp	r2, r3
    2db8:	baffffba 	blt	2ca8 <transform+0x12c>
        for( int l = n >> 1 ; ( j ^= l ) < l ; l >>= 1 ) ;
    }

    for ( int l = 2 ; l <= n ; l <<= 1 )  {
        int m = l / 2;
        for ( Complex *p = a ; p != a + n ; p += l )  {
    2dbc:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2dc0:	e1a03183 	lsl	r3, r3, #3
    2dc4:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2dc8:	e0823003 	add	r3, r2, r3
    2dcc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    2dd0:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    2dd4:	e1a03183 	lsl	r3, r3, #3
    2dd8:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    2ddc:	e0822003 	add	r2, r2, r3
    2de0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    2de4:	e1520003 	cmp	r2, r3
    2de8:	1affffab 	bne	2c9c <transform+0x120>
            a[j] = temp;
        } 
        for( int l = n >> 1 ; ( j ^= l ) < l ; l >>= 1 ) ;
    }

    for ( int l = 2 ; l <= n ; l <<= 1 )  {
    2dec:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2df0:	e1a03083 	lsl	r3, r3, #1
    2df4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    2df8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    2dfc:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    2e00:	e1520003 	cmp	r2, r3
    2e04:	daffff9c 	ble	2c7c <transform+0x100>
                p [m + i] = sub (p [i] , t) ;
                p [i] = add(p [i], t) ;
            }
        }
    }
}
    2e08:	e24bd008 	sub	sp, r11, #8
    2e0c:	e8bd8810 	pop	{r4, r11, pc}

00002e10 <dft>:

void dft ( Complex *a,  int n ,  Complex* omega)  {
    2e10:	e92d4800 	push	{r11, lr}
    2e14:	e28db004 	add	r11, sp, #4
    2e18:	e24dd010 	sub	sp, sp, #16
    2e1c:	e50b0008 	str	r0, [r11, #-8]
    2e20:	e50b100c 	str	r1, [r11, #-12]
    2e24:	e50b2010 	str	r2, [r11, #-16]
        transform ( a, n, omega ) ;
    2e28:	e51b0008 	ldr	r0, [r11, #-8]
    2e2c:	e51b100c 	ldr	r1, [r11, #-12]
    2e30:	e51b2010 	ldr	r2, [r11, #-16]
    2e34:	ebffff50 	bl	2b7c <transform>
}
    2e38:	e24bd004 	sub	sp, r11, #4
    2e3c:	e8bd8800 	pop	{r11, pc}

00002e40 <idft>:

void idft ( Complex *a,  int n,  Complex* omegaInverse )  {
    2e40:	e92d4810 	push	{r4, r11, lr}
    2e44:	e28db008 	add	r11, sp, #8
    2e48:	e24dd024 	sub	sp, sp, #36	; 0x24
    2e4c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    2e50:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    2e54:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
        transform ( a, n, omegaInverse ) ;
    2e58:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    2e5c:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    2e60:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2e64:	ebffff44 	bl	2b7c <transform>
        for ( int i = 0 ; i < n ; ++ i ) a [i] = divideByInt(a[i],n) ;
    2e68:	e3a03000 	mov	r3, #0
    2e6c:	e50b3010 	str	r3, [r11, #-16]
    2e70:	ea000013 	b	2ec4 <idft+0x84>
    2e74:	e51b3010 	ldr	r3, [r11, #-16]
    2e78:	e1a03183 	lsl	r3, r3, #3
    2e7c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2e80:	e0824003 	add	r4, r2, r3
    2e84:	e51b3010 	ldr	r3, [r11, #-16]
    2e88:	e1a03183 	lsl	r3, r3, #3
    2e8c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2e90:	e0823003 	add	r3, r2, r3
    2e94:	e24b202c 	sub	r2, r11, #44	; 0x2c
    2e98:	e1a00002 	mov	r0, r2
    2e9c:	e8930006 	ldm	r3, {r1, r2}
    2ea0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2ea4:	ebfffeaa 	bl	2954 <divideByInt>
    2ea8:	e1a03004 	mov	r3, r4
    2eac:	e24b202c 	sub	r2, r11, #44	; 0x2c
    2eb0:	e8920003 	ldm	r2, {r0, r1}
    2eb4:	e8830003 	stm	r3, {r0, r1}
    2eb8:	e51b3010 	ldr	r3, [r11, #-16]
    2ebc:	e2833001 	add	r3, r3, #1
    2ec0:	e50b3010 	str	r3, [r11, #-16]
    2ec4:	e51b2010 	ldr	r2, [r11, #-16]
    2ec8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2ecc:	e1520003 	cmp	r2, r3
    2ed0:	baffffe7 	blt	2e74 <idft+0x34>
    }
    2ed4:	e24bd008 	sub	sp, r11, #8
    2ed8:	e8bd8810 	pop	{r4, r11, pc}

00002edc <FastFourierTransform>:
void FastFourierTransform (Complex *a,  int n ){
    2edc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ee0:	e28db020 	add	r11, sp, #32
    2ee4:	e24dd024 	sub	sp, sp, #36	; 0x24
    2ee8:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
    2eec:	e50b103c 	str	r1, [r11, #-60]	; 0xffffffc4
    2ef0:	e1a0300d 	mov	r3, sp
    2ef4:	e1a0a003 	mov	r10, r3
    Complex omega [n], omegaInverse[n];
    2ef8:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    2efc:	e2413001 	sub	r3, r1, #1
    2f00:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    2f04:	e1a00001 	mov	r0, r1
    2f08:	e1a02000 	mov	r2, r0
    2f0c:	e3a03000 	mov	r3, #0
    2f10:	e1a00d22 	lsr	r0, r2, #26
    2f14:	e1a0c303 	lsl	r12, r3, #6
    2f18:	e50bc040 	str	r12, [r11, #-64]	; 0xffffffc0
    2f1c:	e51bc040 	ldr	r12, [r11, #-64]	; 0xffffffc0
    2f20:	e180c00c 	orr	r12, r0, r12
    2f24:	e50bc040 	str	r12, [r11, #-64]	; 0xffffffc0
    2f28:	e1a00302 	lsl	r0, r2, #6
    2f2c:	e1a00001 	mov	r0, r1
    2f30:	e1a02000 	mov	r2, r0
    2f34:	e3a03000 	mov	r3, #0
    2f38:	e1a00d22 	lsr	r0, r2, #26
    2f3c:	e1a09303 	lsl	r9, r3, #6
    2f40:	e1809009 	orr	r9, r0, r9
    2f44:	e1a08302 	lsl	r8, r2, #6
    2f48:	e1a03001 	mov	r3, r1
    2f4c:	e1a03183 	lsl	r3, r3, #3
    2f50:	e2833003 	add	r3, r3, #3
    2f54:	e2833007 	add	r3, r3, #7
    2f58:	e1a031a3 	lsr	r3, r3, #3
    2f5c:	e1a03183 	lsl	r3, r3, #3
    2f60:	e04dd003 	sub	sp, sp, r3
    2f64:	e1a0300d 	mov	r3, sp
    2f68:	e2833003 	add	r3, r3, #3
    2f6c:	e1a03123 	lsr	r3, r3, #2
    2f70:	e1a03103 	lsl	r3, r3, #2
    2f74:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    2f78:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    2f7c:	e2413001 	sub	r3, r1, #1
    2f80:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    2f84:	e1a00001 	mov	r0, r1
    2f88:	e1a02000 	mov	r2, r0
    2f8c:	e3a03000 	mov	r3, #0
    2f90:	e1a00d22 	lsr	r0, r2, #26
    2f94:	e1a07303 	lsl	r7, r3, #6
    2f98:	e1807007 	orr	r7, r0, r7
    2f9c:	e1a06302 	lsl	r6, r2, #6
    2fa0:	e1a00001 	mov	r0, r1
    2fa4:	e1a02000 	mov	r2, r0
    2fa8:	e3a03000 	mov	r3, #0
    2fac:	e1a00d22 	lsr	r0, r2, #26
    2fb0:	e1a05303 	lsl	r5, r3, #6
    2fb4:	e1805005 	orr	r5, r0, r5
    2fb8:	e1a04302 	lsl	r4, r2, #6
    2fbc:	e1a03001 	mov	r3, r1
    2fc0:	e1a03183 	lsl	r3, r3, #3
    2fc4:	e2833003 	add	r3, r3, #3
    2fc8:	e2833007 	add	r3, r3, #7
    2fcc:	e1a031a3 	lsr	r3, r3, #3
    2fd0:	e1a03183 	lsl	r3, r3, #3
    2fd4:	e04dd003 	sub	sp, sp, r3
    2fd8:	e1a0300d 	mov	r3, sp
    2fdc:	e2833003 	add	r3, r3, #3
    2fe0:	e1a03123 	lsr	r3, r3, #2
    2fe4:	e1a03103 	lsl	r3, r3, #2
    2fe8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    initOmega (omega, omegaInverse, n);
    2fec:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    2ff0:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    2ff4:	e1a00002 	mov	r0, r2
    2ff8:	e1a01003 	mov	r1, r3
    2ffc:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    3000:	ebfffea0 	bl	2a88 <initOmega>
    dft ( a , n ,  omega);
    3004:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    3008:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
    300c:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    3010:	e1a02003 	mov	r2, r3
    3014:	ebffff7d 	bl	2e10 <dft>
    3018:	e1a0d00a 	mov	sp, r10
    301c:	e24bd020 	sub	sp, r11, #32
    3020:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00003024 <sqrt>:
    3024:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    3028:	e24dd028 	sub	sp, sp, #40	; 0x28
    302c:	e1a04000 	mov	r4, r0
    3030:	e1a05001 	mov	r5, r1
    3034:	eb000044 	bl	314c <__ieee754_sqrt>
    3038:	e59fa104 	ldr	r10, [pc, #260]	; 3144 <sqrt+0x120>
    303c:	e1da30d0 	ldrsb	r3, [r10]
    3040:	e3730001 	cmn	r3, #1
    3044:	e1a06000 	mov	r6, r0
    3048:	e1a07001 	mov	r7, r1
    304c:	0a00000d 	beq	3088 <sqrt+0x64>
    3050:	e1a00004 	mov	r0, r4
    3054:	e1a01005 	mov	r1, r5
    3058:	eb0000ca 	bl	3388 <__fpclassifyd>
    305c:	e3500000 	cmp	r0, #0
    3060:	0a000008 	beq	3088 <sqrt+0x64>
    3064:	e3a08000 	mov	r8, #0
    3068:	e3a09000 	mov	r9, #0
    306c:	e1a00004 	mov	r0, r4
    3070:	e1a01005 	mov	r1, r5
    3074:	e1a02008 	mov	r2, r8
    3078:	e1a03009 	mov	r3, r9
    307c:	eb0003dd 	bl	3ff8 <__aeabi_dcmplt>
    3080:	e3500000 	cmp	r0, #0
    3084:	1a000004 	bne	309c <sqrt+0x78>
    3088:	e1a00006 	mov	r0, r6
    308c:	e1a01007 	mov	r1, r7
    3090:	e28dd028 	add	sp, sp, #40	; 0x28
    3094:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    3098:	e12fff1e 	bx	lr
    309c:	e3a03001 	mov	r3, #1
    30a0:	e5da6000 	ldrb	r6, [r10]
    30a4:	e58d3000 	str	r3, [sp]
    30a8:	e59f3098 	ldr	r3, [pc, #152]	; 3148 <sqrt+0x124>
    30ac:	e3560000 	cmp	r6, #0
    30b0:	e58d3004 	str	r3, [sp, #4]
    30b4:	e3a03000 	mov	r3, #0
    30b8:	e58d3020 	str	r3, [sp, #32]
    30bc:	e58d4010 	str	r4, [sp, #16]
    30c0:	e58d5014 	str	r5, [sp, #20]
    30c4:	e58d4008 	str	r4, [sp, #8]
    30c8:	e58d500c 	str	r5, [sp, #12]
    30cc:	1a00000b 	bne	3100 <sqrt+0xdc>
    30d0:	e58d8018 	str	r8, [sp, #24]
    30d4:	e58d901c 	str	r9, [sp, #28]
    30d8:	e1a0000d 	mov	r0, sp
    30dc:	eb0000c4 	bl	33f4 <matherr>
    30e0:	e3500000 	cmp	r0, #0
    30e4:	0a00000e 	beq	3124 <sqrt+0x100>
    30e8:	e59d3020 	ldr	r3, [sp, #32]
    30ec:	e3530000 	cmp	r3, #0
    30f0:	1a00000f 	bne	3134 <sqrt+0x110>
    30f4:	e28d7018 	add	r7, sp, #24
    30f8:	e89700c0 	ldm	r7, {r6, r7}
    30fc:	eaffffe1 	b	3088 <sqrt+0x64>
    3100:	e1a00008 	mov	r0, r8
    3104:	e1a01009 	mov	r1, r9
    3108:	e1a02008 	mov	r2, r8
    310c:	e1a03009 	mov	r3, r9
    3110:	eb0002fc 	bl	3d08 <__aeabi_ddiv>
    3114:	e3560002 	cmp	r6, #2
    3118:	e58d0018 	str	r0, [sp, #24]
    311c:	e58d101c 	str	r1, [sp, #28]
    3120:	1affffec 	bne	30d8 <sqrt+0xb4>
    3124:	eb0003ea 	bl	40d4 <__errno>
    3128:	e3a03021 	mov	r3, #33	; 0x21
    312c:	e5803000 	str	r3, [r0]
    3130:	eaffffec 	b	30e8 <sqrt+0xc4>
    3134:	eb0003e6 	bl	40d4 <__errno>
    3138:	e59d3020 	ldr	r3, [sp, #32]
    313c:	e5803000 	str	r3, [r0]
    3140:	eaffffeb 	b	30f4 <sqrt+0xd0>
    3144:	000069cc 	.word	0x000069cc
    3148:	00006908 	.word	0x00006908

0000314c <__ieee754_sqrt>:
    314c:	e59fc230 	ldr	r12, [pc, #560]	; 3384 <__ieee754_sqrt+0x238>
    3150:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3154:	e59f7228 	ldr	r7, [pc, #552]	; 3384 <__ieee754_sqrt+0x238>
    3158:	e001c00c 	and	r12, r1, r12
    315c:	e15c0007 	cmp	r12, r7
    3160:	e1a04000 	mov	r4, r0
    3164:	e1a05001 	mov	r5, r1
    3168:	e1a02000 	mov	r2, r0
    316c:	e1a03001 	mov	r3, r1
    3170:	e1a06001 	mov	r6, r1
    3174:	e1a0c001 	mov	r12, r1
    3178:	e1a08000 	mov	r8, r0
    317c:	0a00006a 	beq	332c <__ieee754_sqrt+0x1e0>
    3180:	e3510000 	cmp	r1, #0
    3184:	da000051 	ble	32d0 <__ieee754_sqrt+0x184>
    3188:	e1b02a41 	asrs	r2, r1, #20
    318c:	0a00005a 	beq	32fc <__ieee754_sqrt+0x1b0>
    3190:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    3194:	e3120001 	tst	r2, #1
    3198:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    319c:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    31a0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    31a4:	01a02fa8 	lsreq	r2, r8, #31
    31a8:	01a08088 	lsleq	r8, r8, #1
    31ac:	00823083 	addeq	r3, r2, r3, lsl #1
    31b0:	e2466003 	sub	r6, r6, #3
    31b4:	e1a02fa8 	lsr	r2, r8, #31
    31b8:	e3a07000 	mov	r7, #0
    31bc:	e0823083 	add	r3, r2, r3, lsl #1
    31c0:	e1a060c6 	asr	r6, r6, #1
    31c4:	e1a02088 	lsl	r2, r8, #1
    31c8:	e3a0c016 	mov	r12, #22
    31cc:	e1a00007 	mov	r0, r7
    31d0:	e3a01602 	mov	r1, #2097152	; 0x200000
    31d4:	e0804001 	add	r4, r0, r1
    31d8:	e1540003 	cmp	r4, r3
    31dc:	e1a05fa2 	lsr	r5, r2, #31
    31e0:	d0840001 	addle	r0, r4, r1
    31e4:	d0643003 	rsble	r3, r4, r3
    31e8:	d0877001 	addle	r7, r7, r1
    31ec:	e25cc001 	subs	r12, r12, #1
    31f0:	e0853083 	add	r3, r5, r3, lsl #1
    31f4:	e1a02082 	lsl	r2, r2, #1
    31f8:	e1a010a1 	lsr	r1, r1, #1
    31fc:	1afffff4 	bne	31d4 <__ieee754_sqrt+0x88>
    3200:	e3a05020 	mov	r5, #32
    3204:	e1a0800c 	mov	r8, r12
    3208:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    320c:	ea00000c 	b	3244 <__ieee754_sqrt+0xf8>
    3210:	e1a0a000 	mov	r10, r0
    3214:	e1540002 	cmp	r4, r2
    3218:	e0603003 	rsb	r3, r0, r3
    321c:	82433001 	subhi	r3, r3, #1
    3220:	e0642002 	rsb	r2, r4, r2
    3224:	e08cc001 	add	r12, r12, r1
    3228:	e1a0000a 	mov	r0, r10
    322c:	e1a04fa2 	lsr	r4, r2, #31
    3230:	e2555001 	subs	r5, r5, #1
    3234:	e0843083 	add	r3, r4, r3, lsl #1
    3238:	e1a02082 	lsl	r2, r2, #1
    323c:	e1a010a1 	lsr	r1, r1, #1
    3240:	0a00000d 	beq	327c <__ieee754_sqrt+0x130>
    3244:	e1500003 	cmp	r0, r3
    3248:	e0814008 	add	r4, r1, r8
    324c:	ba000002 	blt	325c <__ieee754_sqrt+0x110>
    3250:	e1540002 	cmp	r4, r2
    3254:	91530000 	cmpls	r3, r0
    3258:	1afffff3 	bne	322c <__ieee754_sqrt+0xe0>
    325c:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    3260:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    3264:	e0848001 	add	r8, r4, r1
    3268:	1affffe8 	bne	3210 <__ieee754_sqrt+0xc4>
    326c:	e3580000 	cmp	r8, #0
    3270:	a280a001 	addge	r10, r0, #1
    3274:	aaffffe6 	bge	3214 <__ieee754_sqrt+0xc8>
    3278:	eaffffe4 	b	3210 <__ieee754_sqrt+0xc4>
    327c:	e1923003 	orrs	r3, r2, r3
    3280:	1a00000b 	bne	32b4 <__ieee754_sqrt+0x168>
    3284:	e1a0c0ac 	lsr	r12, r12, #1
    3288:	e1a030c7 	asr	r3, r7, #1
    328c:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    3290:	e3170001 	tst	r7, #1
    3294:	e2833602 	add	r3, r3, #2097152	; 0x200000
    3298:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    329c:	e0835a06 	add	r5, r3, r6, lsl #20
    32a0:	e1a0400c 	mov	r4, r12
    32a4:	e1a00004 	mov	r0, r4
    32a8:	e1a01005 	mov	r1, r5
    32ac:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    32b0:	e12fff1e 	bx	lr
    32b4:	e37c0001 	cmn	r12, #1
    32b8:	02877001 	addeq	r7, r7, #1
    32bc:	01a0c005 	moveq	r12, r5
    32c0:	0afffff0 	beq	3288 <__ieee754_sqrt+0x13c>
    32c4:	e20c3001 	and	r3, r12, #1
    32c8:	e083c00c 	add	r12, r3, r12
    32cc:	eaffffec 	b	3284 <__ieee754_sqrt+0x138>
    32d0:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    32d4:	e19cc000 	orrs	r12, r12, r0
    32d8:	0afffff1 	beq	32a4 <__ieee754_sqrt+0x158>
    32dc:	e3510000 	cmp	r1, #0
    32e0:	01a02001 	moveq	r2, r1
    32e4:	1a00001d 	bne	3360 <__ieee754_sqrt+0x214>
    32e8:	e1a0c5a8 	lsr	r12, r8, #11
    32ec:	e35c0000 	cmp	r12, #0
    32f0:	e2422015 	sub	r2, r2, #21
    32f4:	e1a08a88 	lsl	r8, r8, #21
    32f8:	0afffffa 	beq	32e8 <__ieee754_sqrt+0x19c>
    32fc:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    3300:	1a000012 	bne	3350 <__ieee754_sqrt+0x204>
    3304:	e1a0c08c 	lsl	r12, r12, #1
    3308:	e31c0601 	tst	r12, #1048576	; 0x100000
    330c:	e2833001 	add	r3, r3, #1
    3310:	0afffffb 	beq	3304 <__ieee754_sqrt+0x1b8>
    3314:	e2631001 	rsb	r1, r3, #1
    3318:	e2630020 	rsb	r0, r3, #32
    331c:	e18cc038 	orr	r12, r12, r8, lsr r0
    3320:	e0822001 	add	r2, r2, r1
    3324:	e1a08318 	lsl	r8, r8, r3
    3328:	eaffff98 	b	3190 <__ieee754_sqrt+0x44>
    332c:	eb0001d1 	bl	3a78 <__aeabi_dmul>
    3330:	e1a02000 	mov	r2, r0
    3334:	e1a03001 	mov	r3, r1
    3338:	e1a00004 	mov	r0, r4
    333c:	e1a01005 	mov	r1, r5
    3340:	eb0000c8 	bl	3668 <__adddf3>
    3344:	e1a04000 	mov	r4, r0
    3348:	e1a05001 	mov	r5, r1
    334c:	eaffffd4 	b	32a4 <__ieee754_sqrt+0x158>
    3350:	e3a00020 	mov	r0, #32
    3354:	e3a01001 	mov	r1, #1
    3358:	e3a03000 	mov	r3, #0
    335c:	eaffffee 	b	331c <__ieee754_sqrt+0x1d0>
    3360:	e1a02000 	mov	r2, r0
    3364:	e1a03001 	mov	r3, r1
    3368:	eb0000bd 	bl	3664 <__aeabi_dsub>
    336c:	e1a02000 	mov	r2, r0
    3370:	e1a03001 	mov	r3, r1
    3374:	eb000263 	bl	3d08 <__aeabi_ddiv>
    3378:	e1a04000 	mov	r4, r0
    337c:	e1a05001 	mov	r5, r1
    3380:	eaffffc7 	b	32a4 <__ieee754_sqrt+0x158>
    3384:	7ff00000 	.word	0x7ff00000

00003388 <__fpclassifyd>:
    3388:	e1902001 	orrs	r2, r0, r1
    338c:	1a000001 	bne	3398 <__fpclassifyd+0x10>
    3390:	e3a00002 	mov	r0, #2
    3394:	e12fff1e 	bx	lr
    3398:	e2702001 	rsbs	r2, r0, #1
    339c:	33a02000 	movcc	r2, #0
    33a0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    33a4:	03500000 	cmpeq	r0, #0
    33a8:	0afffff8 	beq	3390 <__fpclassifyd+0x8>
    33ac:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    33b0:	e59f1034 	ldr	r1, [pc, #52]	; 33ec <__fpclassifyd+0x64>
    33b4:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    33b8:	e1500001 	cmp	r0, r1
    33bc:	8a000001 	bhi	33c8 <__fpclassifyd+0x40>
    33c0:	e3a00004 	mov	r0, #4
    33c4:	e12fff1e 	bx	lr
    33c8:	e3530601 	cmp	r3, #1048576	; 0x100000
    33cc:	2a000001 	bcs	33d8 <__fpclassifyd+0x50>
    33d0:	e3a00003 	mov	r0, #3
    33d4:	e12fff1e 	bx	lr
    33d8:	e59f0010 	ldr	r0, [pc, #16]	; 33f0 <__fpclassifyd+0x68>
    33dc:	e1530000 	cmp	r3, r0
    33e0:	13a00000 	movne	r0, #0
    33e4:	02020001 	andeq	r0, r2, #1
    33e8:	e12fff1e 	bx	lr
    33ec:	7fdfffff 	.word	0x7fdfffff
    33f0:	7ff00000 	.word	0x7ff00000

000033f4 <matherr>:
    33f4:	e3a00000 	mov	r0, #0
    33f8:	e12fff1e 	bx	lr

000033fc <__aeabi_uidiv>:
    33fc:	e2512001 	subs	r2, r1, #1
    3400:	012fff1e 	bxeq	lr
    3404:	3a000036 	bcc	34e4 <__aeabi_uidiv+0xe8>
    3408:	e1500001 	cmp	r0, r1
    340c:	9a000022 	bls	349c <__aeabi_uidiv+0xa0>
    3410:	e1110002 	tst	r1, r2
    3414:	0a000023 	beq	34a8 <__aeabi_uidiv+0xac>
    3418:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    341c:	01a01181 	lsleq	r1, r1, #3
    3420:	03a03008 	moveq	r3, #8
    3424:	13a03001 	movne	r3, #1
    3428:	e3510201 	cmp	r1, #268435456	; 0x10000000
    342c:	31510000 	cmpcc	r1, r0
    3430:	31a01201 	lslcc	r1, r1, #4
    3434:	31a03203 	lslcc	r3, r3, #4
    3438:	3afffffa 	bcc	3428 <__aeabi_uidiv+0x2c>
    343c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    3440:	31510000 	cmpcc	r1, r0
    3444:	31a01081 	lslcc	r1, r1, #1
    3448:	31a03083 	lslcc	r3, r3, #1
    344c:	3afffffa 	bcc	343c <__aeabi_uidiv+0x40>
    3450:	e3a02000 	mov	r2, #0
    3454:	e1500001 	cmp	r0, r1
    3458:	20400001 	subcs	r0, r0, r1
    345c:	21822003 	orrcs	r2, r2, r3
    3460:	e15000a1 	cmp	r0, r1, lsr #1
    3464:	204000a1 	subcs	r0, r0, r1, lsr #1
    3468:	218220a3 	orrcs	r2, r2, r3, lsr #1
    346c:	e1500121 	cmp	r0, r1, lsr #2
    3470:	20400121 	subcs	r0, r0, r1, lsr #2
    3474:	21822123 	orrcs	r2, r2, r3, lsr #2
    3478:	e15001a1 	cmp	r0, r1, lsr #3
    347c:	204001a1 	subcs	r0, r0, r1, lsr #3
    3480:	218221a3 	orrcs	r2, r2, r3, lsr #3
    3484:	e3500000 	cmp	r0, #0
    3488:	11b03223 	lsrsne	r3, r3, #4
    348c:	11a01221 	lsrne	r1, r1, #4
    3490:	1affffef 	bne	3454 <__aeabi_uidiv+0x58>
    3494:	e1a00002 	mov	r0, r2
    3498:	e12fff1e 	bx	lr
    349c:	03a00001 	moveq	r0, #1
    34a0:	13a00000 	movne	r0, #0
    34a4:	e12fff1e 	bx	lr
    34a8:	e3510801 	cmp	r1, #65536	; 0x10000
    34ac:	21a01821 	lsrcs	r1, r1, #16
    34b0:	23a02010 	movcs	r2, #16
    34b4:	33a02000 	movcc	r2, #0
    34b8:	e3510c01 	cmp	r1, #256	; 0x100
    34bc:	21a01421 	lsrcs	r1, r1, #8
    34c0:	22822008 	addcs	r2, r2, #8
    34c4:	e3510010 	cmp	r1, #16
    34c8:	21a01221 	lsrcs	r1, r1, #4
    34cc:	22822004 	addcs	r2, r2, #4
    34d0:	e3510004 	cmp	r1, #4
    34d4:	82822003 	addhi	r2, r2, #3
    34d8:	908220a1 	addls	r2, r2, r1, lsr #1
    34dc:	e1a00230 	lsr	r0, r0, r2
    34e0:	e12fff1e 	bx	lr
    34e4:	e3500000 	cmp	r0, #0
    34e8:	13e00000 	mvnne	r0, #0
    34ec:	ea000059 	b	3658 <__aeabi_idiv0>

000034f0 <__aeabi_uidivmod>:
    34f0:	e3510000 	cmp	r1, #0
    34f4:	0afffffa 	beq	34e4 <__aeabi_uidiv+0xe8>
    34f8:	e92d4003 	push	{r0, r1, lr}
    34fc:	ebffffbe 	bl	33fc <__aeabi_uidiv>
    3500:	e8bd4006 	pop	{r1, r2, lr}
    3504:	e0030092 	mul	r3, r2, r0
    3508:	e0411003 	sub	r1, r1, r3
    350c:	e12fff1e 	bx	lr

00003510 <__aeabi_idiv>:
    3510:	e3510000 	cmp	r1, #0
    3514:	0a000043 	beq	3628 <.divsi3_skip_div0_test+0x110>

00003518 <.divsi3_skip_div0_test>:
    3518:	e020c001 	eor	r12, r0, r1
    351c:	42611000 	rsbmi	r1, r1, #0
    3520:	e2512001 	subs	r2, r1, #1
    3524:	0a000027 	beq	35c8 <.divsi3_skip_div0_test+0xb0>
    3528:	e1b03000 	movs	r3, r0
    352c:	42603000 	rsbmi	r3, r0, #0
    3530:	e1530001 	cmp	r3, r1
    3534:	9a000026 	bls	35d4 <.divsi3_skip_div0_test+0xbc>
    3538:	e1110002 	tst	r1, r2
    353c:	0a000028 	beq	35e4 <.divsi3_skip_div0_test+0xcc>
    3540:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    3544:	01a01181 	lsleq	r1, r1, #3
    3548:	03a02008 	moveq	r2, #8
    354c:	13a02001 	movne	r2, #1
    3550:	e3510201 	cmp	r1, #268435456	; 0x10000000
    3554:	31510003 	cmpcc	r1, r3
    3558:	31a01201 	lslcc	r1, r1, #4
    355c:	31a02202 	lslcc	r2, r2, #4
    3560:	3afffffa 	bcc	3550 <.divsi3_skip_div0_test+0x38>
    3564:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    3568:	31510003 	cmpcc	r1, r3
    356c:	31a01081 	lslcc	r1, r1, #1
    3570:	31a02082 	lslcc	r2, r2, #1
    3574:	3afffffa 	bcc	3564 <.divsi3_skip_div0_test+0x4c>
    3578:	e3a00000 	mov	r0, #0
    357c:	e1530001 	cmp	r3, r1
    3580:	20433001 	subcs	r3, r3, r1
    3584:	21800002 	orrcs	r0, r0, r2
    3588:	e15300a1 	cmp	r3, r1, lsr #1
    358c:	204330a1 	subcs	r3, r3, r1, lsr #1
    3590:	218000a2 	orrcs	r0, r0, r2, lsr #1
    3594:	e1530121 	cmp	r3, r1, lsr #2
    3598:	20433121 	subcs	r3, r3, r1, lsr #2
    359c:	21800122 	orrcs	r0, r0, r2, lsr #2
    35a0:	e15301a1 	cmp	r3, r1, lsr #3
    35a4:	204331a1 	subcs	r3, r3, r1, lsr #3
    35a8:	218001a2 	orrcs	r0, r0, r2, lsr #3
    35ac:	e3530000 	cmp	r3, #0
    35b0:	11b02222 	lsrsne	r2, r2, #4
    35b4:	11a01221 	lsrne	r1, r1, #4
    35b8:	1affffef 	bne	357c <.divsi3_skip_div0_test+0x64>
    35bc:	e35c0000 	cmp	r12, #0
    35c0:	42600000 	rsbmi	r0, r0, #0
    35c4:	e12fff1e 	bx	lr
    35c8:	e13c0000 	teq	r12, r0
    35cc:	42600000 	rsbmi	r0, r0, #0
    35d0:	e12fff1e 	bx	lr
    35d4:	33a00000 	movcc	r0, #0
    35d8:	01a00fcc 	asreq	r0, r12, #31
    35dc:	03800001 	orreq	r0, r0, #1
    35e0:	e12fff1e 	bx	lr
    35e4:	e3510801 	cmp	r1, #65536	; 0x10000
    35e8:	21a01821 	lsrcs	r1, r1, #16
    35ec:	23a02010 	movcs	r2, #16
    35f0:	33a02000 	movcc	r2, #0
    35f4:	e3510c01 	cmp	r1, #256	; 0x100
    35f8:	21a01421 	lsrcs	r1, r1, #8
    35fc:	22822008 	addcs	r2, r2, #8
    3600:	e3510010 	cmp	r1, #16
    3604:	21a01221 	lsrcs	r1, r1, #4
    3608:	22822004 	addcs	r2, r2, #4
    360c:	e3510004 	cmp	r1, #4
    3610:	82822003 	addhi	r2, r2, #3
    3614:	908220a1 	addls	r2, r2, r1, lsr #1
    3618:	e35c0000 	cmp	r12, #0
    361c:	e1a00233 	lsr	r0, r3, r2
    3620:	42600000 	rsbmi	r0, r0, #0
    3624:	e12fff1e 	bx	lr
    3628:	e3500000 	cmp	r0, #0
    362c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    3630:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    3634:	ea000007 	b	3658 <__aeabi_idiv0>

00003638 <__aeabi_idivmod>:
    3638:	e3510000 	cmp	r1, #0
    363c:	0afffff9 	beq	3628 <.divsi3_skip_div0_test+0x110>
    3640:	e92d4003 	push	{r0, r1, lr}
    3644:	ebffffb3 	bl	3518 <.divsi3_skip_div0_test>
    3648:	e8bd4006 	pop	{r1, r2, lr}
    364c:	e0030092 	mul	r3, r2, r0
    3650:	e0411003 	sub	r1, r1, r3
    3654:	e12fff1e 	bx	lr

00003658 <__aeabi_idiv0>:
    3658:	e12fff1e 	bx	lr

0000365c <__aeabi_drsub>:
    365c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    3660:	ea000000 	b	3668 <__adddf3>

00003664 <__aeabi_dsub>:
    3664:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00003668 <__adddf3>:
    3668:	e92d4030 	push	{r4, r5, lr}
    366c:	e1a04081 	lsl	r4, r1, #1
    3670:	e1a05083 	lsl	r5, r3, #1
    3674:	e1340005 	teq	r4, r5
    3678:	01300002 	teqeq	r0, r2
    367c:	1194c000 	orrsne	r12, r4, r0
    3680:	1195c002 	orrsne	r12, r5, r2
    3684:	11f0cac4 	mvnsne	r12, r4, asr #21
    3688:	11f0cac5 	mvnsne	r12, r5, asr #21
    368c:	0a00008c 	beq	38c4 <__adddf3+0x25c>
    3690:	e1a04aa4 	lsr	r4, r4, #21
    3694:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    3698:	b2655000 	rsblt	r5, r5, #0
    369c:	da000006 	ble	36bc <__adddf3+0x54>
    36a0:	e0844005 	add	r4, r4, r5
    36a4:	e0202002 	eor	r2, r0, r2
    36a8:	e0213003 	eor	r3, r1, r3
    36ac:	e0220000 	eor	r0, r2, r0
    36b0:	e0231001 	eor	r1, r3, r1
    36b4:	e0202002 	eor	r2, r0, r2
    36b8:	e0213003 	eor	r3, r1, r3
    36bc:	e3550036 	cmp	r5, #54	; 0x36
    36c0:	88bd4030 	pophi	{r4, r5, lr}
    36c4:	812fff1e 	bxhi	lr
    36c8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    36cc:	e1a01601 	lsl	r1, r1, #12
    36d0:	e3a0c601 	mov	r12, #1048576	; 0x100000
    36d4:	e18c1621 	orr	r1, r12, r1, lsr #12
    36d8:	0a000001 	beq	36e4 <__adddf3+0x7c>
    36dc:	e2700000 	rsbs	r0, r0, #0
    36e0:	e2e11000 	rsc	r1, r1, #0
    36e4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    36e8:	e1a03603 	lsl	r3, r3, #12
    36ec:	e18c3623 	orr	r3, r12, r3, lsr #12
    36f0:	0a000001 	beq	36fc <__adddf3+0x94>
    36f4:	e2722000 	rsbs	r2, r2, #0
    36f8:	e2e33000 	rsc	r3, r3, #0
    36fc:	e1340005 	teq	r4, r5
    3700:	0a000069 	beq	38ac <__adddf3+0x244>
    3704:	e2444001 	sub	r4, r4, #1
    3708:	e275e020 	rsbs	lr, r5, #32
    370c:	ba000005 	blt	3728 <__adddf3+0xc0>
    3710:	e1a0ce12 	lsl	r12, r2, lr
    3714:	e0900532 	adds	r0, r0, r2, lsr r5
    3718:	e2a11000 	adc	r1, r1, #0
    371c:	e0900e13 	adds	r0, r0, r3, lsl lr
    3720:	e0b11553 	adcs	r1, r1, r3, asr r5
    3724:	ea000006 	b	3744 <__adddf3+0xdc>
    3728:	e2455020 	sub	r5, r5, #32
    372c:	e28ee020 	add	lr, lr, #32
    3730:	e3520001 	cmp	r2, #1
    3734:	e1a0ce13 	lsl	r12, r3, lr
    3738:	238cc002 	orrcs	r12, r12, #2
    373c:	e0900553 	adds	r0, r0, r3, asr r5
    3740:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    3744:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3748:	5a000002 	bpl	3758 <__adddf3+0xf0>
    374c:	e27cc000 	rsbs	r12, r12, #0
    3750:	e2f00000 	rscs	r0, r0, #0
    3754:	e2e11000 	rsc	r1, r1, #0
    3758:	e3510601 	cmp	r1, #1048576	; 0x100000
    375c:	3a00000f 	bcc	37a0 <__adddf3+0x138>
    3760:	e3510602 	cmp	r1, #2097152	; 0x200000
    3764:	3a000006 	bcc	3784 <__adddf3+0x11c>
    3768:	e1b010a1 	lsrs	r1, r1, #1
    376c:	e1b00060 	rrxs	r0, r0
    3770:	e1a0c06c 	rrx	r12, r12
    3774:	e2844001 	add	r4, r4, #1
    3778:	e1a02a84 	lsl	r2, r4, #21
    377c:	e3720501 	cmn	r2, #4194304	; 0x400000
    3780:	2a00006b 	bcs	3934 <__adddf3+0x2cc>
    3784:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    3788:	01b0c0a0 	lsrseq	r12, r0, #1
    378c:	e2b00000 	adcs	r0, r0, #0
    3790:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3794:	e1811005 	orr	r1, r1, r5
    3798:	e8bd4030 	pop	{r4, r5, lr}
    379c:	e12fff1e 	bx	lr
    37a0:	e1b0c08c 	lsls	r12, r12, #1
    37a4:	e0b00000 	adcs	r0, r0, r0
    37a8:	e0a11001 	adc	r1, r1, r1
    37ac:	e3110601 	tst	r1, #1048576	; 0x100000
    37b0:	e2444001 	sub	r4, r4, #1
    37b4:	1afffff2 	bne	3784 <__adddf3+0x11c>
    37b8:	e3310000 	teq	r1, #0
    37bc:	13a03014 	movne	r3, #20
    37c0:	03a03034 	moveq	r3, #52	; 0x34
    37c4:	01a01000 	moveq	r1, r0
    37c8:	03a00000 	moveq	r0, #0
    37cc:	e1a02001 	mov	r2, r1
    37d0:	e3520801 	cmp	r2, #65536	; 0x10000
    37d4:	21a02822 	lsrcs	r2, r2, #16
    37d8:	22433010 	subcs	r3, r3, #16
    37dc:	e3520c01 	cmp	r2, #256	; 0x100
    37e0:	21a02422 	lsrcs	r2, r2, #8
    37e4:	22433008 	subcs	r3, r3, #8
    37e8:	e3520010 	cmp	r2, #16
    37ec:	21a02222 	lsrcs	r2, r2, #4
    37f0:	22433004 	subcs	r3, r3, #4
    37f4:	e3520004 	cmp	r2, #4
    37f8:	22433002 	subcs	r3, r3, #2
    37fc:	304330a2 	subcc	r3, r3, r2, lsr #1
    3800:	e04331a2 	sub	r3, r3, r2, lsr #3
    3804:	e2532020 	subs	r2, r3, #32
    3808:	aa000007 	bge	382c <__adddf3+0x1c4>
    380c:	e292200c 	adds	r2, r2, #12
    3810:	da000004 	ble	3828 <__adddf3+0x1c0>
    3814:	e282c014 	add	r12, r2, #20
    3818:	e262200c 	rsb	r2, r2, #12
    381c:	e1a00c11 	lsl	r0, r1, r12
    3820:	e1a01231 	lsr	r1, r1, r2
    3824:	ea000004 	b	383c <__adddf3+0x1d4>
    3828:	e2822014 	add	r2, r2, #20
    382c:	d262c020 	rsble	r12, r2, #32
    3830:	e1a01211 	lsl	r1, r1, r2
    3834:	d1811c30 	orrle	r1, r1, r0, lsr r12
    3838:	d1a00210 	lslle	r0, r0, r2
    383c:	e0544003 	subs	r4, r4, r3
    3840:	a0811a04 	addge	r1, r1, r4, lsl #20
    3844:	a1811005 	orrge	r1, r1, r5
    3848:	a8bd4030 	popge	{r4, r5, lr}
    384c:	a12fff1e 	bxge	lr
    3850:	e1e04004 	mvn	r4, r4
    3854:	e254401f 	subs	r4, r4, #31
    3858:	aa00000f 	bge	389c <__adddf3+0x234>
    385c:	e294400c 	adds	r4, r4, #12
    3860:	ca000006 	bgt	3880 <__adddf3+0x218>
    3864:	e2844014 	add	r4, r4, #20
    3868:	e2642020 	rsb	r2, r4, #32
    386c:	e1a00430 	lsr	r0, r0, r4
    3870:	e1800211 	orr	r0, r0, r1, lsl r2
    3874:	e1851431 	orr	r1, r5, r1, lsr r4
    3878:	e8bd4030 	pop	{r4, r5, lr}
    387c:	e12fff1e 	bx	lr
    3880:	e264400c 	rsb	r4, r4, #12
    3884:	e2642020 	rsb	r2, r4, #32
    3888:	e1a00230 	lsr	r0, r0, r2
    388c:	e1800411 	orr	r0, r0, r1, lsl r4
    3890:	e1a01005 	mov	r1, r5
    3894:	e8bd4030 	pop	{r4, r5, lr}
    3898:	e12fff1e 	bx	lr
    389c:	e1a00431 	lsr	r0, r1, r4
    38a0:	e1a01005 	mov	r1, r5
    38a4:	e8bd4030 	pop	{r4, r5, lr}
    38a8:	e12fff1e 	bx	lr
    38ac:	e3340000 	teq	r4, #0
    38b0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    38b4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    38b8:	02844001 	addeq	r4, r4, #1
    38bc:	12455001 	subne	r5, r5, #1
    38c0:	eaffff8f 	b	3704 <__adddf3+0x9c>
    38c4:	e1f0cac4 	mvns	r12, r4, asr #21
    38c8:	11f0cac5 	mvnsne	r12, r5, asr #21
    38cc:	0a00001d 	beq	3948 <__adddf3+0x2e0>
    38d0:	e1340005 	teq	r4, r5
    38d4:	01300002 	teqeq	r0, r2
    38d8:	0a000004 	beq	38f0 <__adddf3+0x288>
    38dc:	e194c000 	orrs	r12, r4, r0
    38e0:	01a01003 	moveq	r1, r3
    38e4:	01a00002 	moveq	r0, r2
    38e8:	e8bd4030 	pop	{r4, r5, lr}
    38ec:	e12fff1e 	bx	lr
    38f0:	e1310003 	teq	r1, r3
    38f4:	13a01000 	movne	r1, #0
    38f8:	13a00000 	movne	r0, #0
    38fc:	18bd4030 	popne	{r4, r5, lr}
    3900:	112fff1e 	bxne	lr
    3904:	e1b0caa4 	lsrs	r12, r4, #21
    3908:	1a000004 	bne	3920 <__adddf3+0x2b8>
    390c:	e1b00080 	lsls	r0, r0, #1
    3910:	e0b11001 	adcs	r1, r1, r1
    3914:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    3918:	e8bd4030 	pop	{r4, r5, lr}
    391c:	e12fff1e 	bx	lr
    3920:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    3924:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    3928:	38bd4030 	popcc	{r4, r5, lr}
    392c:	312fff1e 	bxcc	lr
    3930:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3934:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    3938:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    393c:	e3a00000 	mov	r0, #0
    3940:	e8bd4030 	pop	{r4, r5, lr}
    3944:	e12fff1e 	bx	lr
    3948:	e1f0cac4 	mvns	r12, r4, asr #21
    394c:	11a01003 	movne	r1, r3
    3950:	11a00002 	movne	r0, r2
    3954:	01f0cac5 	mvnseq	r12, r5, asr #21
    3958:	11a03001 	movne	r3, r1
    395c:	11a02000 	movne	r2, r0
    3960:	e1904601 	orrs	r4, r0, r1, lsl #12
    3964:	01925603 	orrseq	r5, r2, r3, lsl #12
    3968:	01310003 	teqeq	r1, r3
    396c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    3970:	e8bd4030 	pop	{r4, r5, lr}
    3974:	e12fff1e 	bx	lr

00003978 <__aeabi_ui2d>:
    3978:	e3300000 	teq	r0, #0
    397c:	03a01000 	moveq	r1, #0
    3980:	012fff1e 	bxeq	lr
    3984:	e92d4030 	push	{r4, r5, lr}
    3988:	e3a04b01 	mov	r4, #1024	; 0x400
    398c:	e2844032 	add	r4, r4, #50	; 0x32
    3990:	e3a05000 	mov	r5, #0
    3994:	e3a01000 	mov	r1, #0
    3998:	eaffff86 	b	37b8 <__adddf3+0x150>

0000399c <__aeabi_i2d>:
    399c:	e3300000 	teq	r0, #0
    39a0:	03a01000 	moveq	r1, #0
    39a4:	012fff1e 	bxeq	lr
    39a8:	e92d4030 	push	{r4, r5, lr}
    39ac:	e3a04b01 	mov	r4, #1024	; 0x400
    39b0:	e2844032 	add	r4, r4, #50	; 0x32
    39b4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    39b8:	42600000 	rsbmi	r0, r0, #0
    39bc:	e3a01000 	mov	r1, #0
    39c0:	eaffff7c 	b	37b8 <__adddf3+0x150>

000039c4 <__aeabi_f2d>:
    39c4:	e1b02080 	lsls	r2, r0, #1
    39c8:	e1a011c2 	asr	r1, r2, #3
    39cc:	e1a01061 	rrx	r1, r1
    39d0:	e1a00e02 	lsl	r0, r2, #28
    39d4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    39d8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    39dc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    39e0:	112fff1e 	bxne	lr
    39e4:	e3320000 	teq	r2, #0
    39e8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    39ec:	012fff1e 	bxeq	lr
    39f0:	e92d4030 	push	{r4, r5, lr}
    39f4:	e3a04d0e 	mov	r4, #896	; 0x380
    39f8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    39fc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    3a00:	eaffff6c 	b	37b8 <__adddf3+0x150>

00003a04 <__aeabi_ul2d>:
    3a04:	e1902001 	orrs	r2, r0, r1
    3a08:	012fff1e 	bxeq	lr
    3a0c:	e92d4030 	push	{r4, r5, lr}
    3a10:	e3a05000 	mov	r5, #0
    3a14:	ea000006 	b	3a34 <__aeabi_l2d+0x1c>

00003a18 <__aeabi_l2d>:
    3a18:	e1902001 	orrs	r2, r0, r1
    3a1c:	012fff1e 	bxeq	lr
    3a20:	e92d4030 	push	{r4, r5, lr}
    3a24:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    3a28:	5a000001 	bpl	3a34 <__aeabi_l2d+0x1c>
    3a2c:	e2700000 	rsbs	r0, r0, #0
    3a30:	e2e11000 	rsc	r1, r1, #0
    3a34:	e3a04b01 	mov	r4, #1024	; 0x400
    3a38:	e2844032 	add	r4, r4, #50	; 0x32
    3a3c:	e1b0cb21 	lsrs	r12, r1, #22
    3a40:	0affff44 	beq	3758 <__adddf3+0xf0>
    3a44:	e3a02003 	mov	r2, #3
    3a48:	e1b0c1ac 	lsrs	r12, r12, #3
    3a4c:	12822003 	addne	r2, r2, #3
    3a50:	e1b0c1ac 	lsrs	r12, r12, #3
    3a54:	12822003 	addne	r2, r2, #3
    3a58:	e08221ac 	add	r2, r2, r12, lsr #3
    3a5c:	e2623020 	rsb	r3, r2, #32
    3a60:	e1a0c310 	lsl	r12, r0, r3
    3a64:	e1a00230 	lsr	r0, r0, r2
    3a68:	e1800311 	orr	r0, r0, r1, lsl r3
    3a6c:	e1a01231 	lsr	r1, r1, r2
    3a70:	e0844002 	add	r4, r4, r2
    3a74:	eaffff37 	b	3758 <__adddf3+0xf0>

00003a78 <__aeabi_dmul>:
    3a78:	e92d4070 	push	{r4, r5, r6, lr}
    3a7c:	e3a0c0ff 	mov	r12, #255	; 0xff
    3a80:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    3a84:	e01c4a21 	ands	r4, r12, r1, lsr #20
    3a88:	101c5a23 	andsne	r5, r12, r3, lsr #20
    3a8c:	1134000c 	teqne	r4, r12
    3a90:	1135000c 	teqne	r5, r12
    3a94:	0b000075 	bleq	3c70 <__aeabi_dmul+0x1f8>
    3a98:	e0844005 	add	r4, r4, r5
    3a9c:	e0216003 	eor	r6, r1, r3
    3aa0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    3aa4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    3aa8:	e1905601 	orrs	r5, r0, r1, lsl #12
    3aac:	11925603 	orrsne	r5, r2, r3, lsl #12
    3ab0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    3ab4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    3ab8:	0a00001d 	beq	3b34 <__aeabi_dmul+0xbc>
    3abc:	e08ec290 	umull	r12, lr, r0, r2
    3ac0:	e3a05000 	mov	r5, #0
    3ac4:	e0a5e291 	umlal	lr, r5, r1, r2
    3ac8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    3acc:	e0a5e390 	umlal	lr, r5, r0, r3
    3ad0:	e3a06000 	mov	r6, #0
    3ad4:	e0a65391 	umlal	r5, r6, r1, r3
    3ad8:	e33c0000 	teq	r12, #0
    3adc:	138ee001 	orrne	lr, lr, #1
    3ae0:	e24440ff 	sub	r4, r4, #255	; 0xff
    3ae4:	e3560c02 	cmp	r6, #512	; 0x200
    3ae8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    3aec:	2a000002 	bcs	3afc <__aeabi_dmul+0x84>
    3af0:	e1b0e08e 	lsls	lr, lr, #1
    3af4:	e0b55005 	adcs	r5, r5, r5
    3af8:	e0a66006 	adc	r6, r6, r6
    3afc:	e1821586 	orr	r1, r2, r6, lsl #11
    3b00:	e1811aa5 	orr	r1, r1, r5, lsr #21
    3b04:	e1a00585 	lsl	r0, r5, #11
    3b08:	e1800aae 	orr	r0, r0, lr, lsr #21
    3b0c:	e1a0e58e 	lsl	lr, lr, #11
    3b10:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    3b14:	835c0c07 	cmphi	r12, #1792	; 0x700
    3b18:	8a000011 	bhi	3b64 <__aeabi_dmul+0xec>
    3b1c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    3b20:	01b0e0a0 	lsrseq	lr, r0, #1
    3b24:	e2b00000 	adcs	r0, r0, #0
    3b28:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3b2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    3b30:	e12fff1e 	bx	lr
    3b34:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    3b38:	e1861001 	orr	r1, r6, r1
    3b3c:	e1800002 	orr	r0, r0, r2
    3b40:	e0211003 	eor	r1, r1, r3
    3b44:	e05440ac 	subs	r4, r4, r12, lsr #1
    3b48:	c074500c 	rsbsgt	r5, r4, r12
    3b4c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    3b50:	c8bd4070 	popgt	{r4, r5, r6, lr}
    3b54:	c12fff1e 	bxgt	lr
    3b58:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    3b5c:	e3a0e000 	mov	lr, #0
    3b60:	e2544001 	subs	r4, r4, #1
    3b64:	ca00005d 	bgt	3ce0 <__aeabi_dmul+0x268>
    3b68:	e3740036 	cmn	r4, #54	; 0x36
    3b6c:	d3a00000 	movle	r0, #0
    3b70:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    3b74:	d8bd4070 	pople	{r4, r5, r6, lr}
    3b78:	d12fff1e 	bxle	lr
    3b7c:	e2644000 	rsb	r4, r4, #0
    3b80:	e2544020 	subs	r4, r4, #32
    3b84:	aa00001a 	bge	3bf4 <__aeabi_dmul+0x17c>
    3b88:	e294400c 	adds	r4, r4, #12
    3b8c:	ca00000c 	bgt	3bc4 <__aeabi_dmul+0x14c>
    3b90:	e2844014 	add	r4, r4, #20
    3b94:	e2645020 	rsb	r5, r4, #32
    3b98:	e1a03510 	lsl	r3, r0, r5
    3b9c:	e1a00430 	lsr	r0, r0, r4
    3ba0:	e1800511 	orr	r0, r0, r1, lsl r5
    3ba4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    3ba8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    3bac:	e0900fa3 	adds	r0, r0, r3, lsr #31
    3bb0:	e0a21431 	adc	r1, r2, r1, lsr r4
    3bb4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    3bb8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    3bbc:	e8bd4070 	pop	{r4, r5, r6, lr}
    3bc0:	e12fff1e 	bx	lr
    3bc4:	e264400c 	rsb	r4, r4, #12
    3bc8:	e2645020 	rsb	r5, r4, #32
    3bcc:	e1a03410 	lsl	r3, r0, r4
    3bd0:	e1a00530 	lsr	r0, r0, r5
    3bd4:	e1800411 	orr	r0, r0, r1, lsl r4
    3bd8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3bdc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    3be0:	e2a11000 	adc	r1, r1, #0
    3be4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    3be8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    3bec:	e8bd4070 	pop	{r4, r5, r6, lr}
    3bf0:	e12fff1e 	bx	lr
    3bf4:	e2645020 	rsb	r5, r4, #32
    3bf8:	e18ee510 	orr	lr, lr, r0, lsl r5
    3bfc:	e1a03430 	lsr	r3, r0, r4
    3c00:	e1833511 	orr	r3, r3, r1, lsl r5
    3c04:	e1a00431 	lsr	r0, r1, r4
    3c08:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3c0c:	e1c00431 	bic	r0, r0, r1, lsr r4
    3c10:	e0800fa3 	add	r0, r0, r3, lsr #31
    3c14:	e19ee083 	orrs	lr, lr, r3, lsl #1
    3c18:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    3c1c:	e8bd4070 	pop	{r4, r5, r6, lr}
    3c20:	e12fff1e 	bx	lr
    3c24:	e3340000 	teq	r4, #0
    3c28:	1a000008 	bne	3c50 <__aeabi_dmul+0x1d8>
    3c2c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    3c30:	e1b00080 	lsls	r0, r0, #1
    3c34:	e0a11001 	adc	r1, r1, r1
    3c38:	e3110601 	tst	r1, #1048576	; 0x100000
    3c3c:	02444001 	subeq	r4, r4, #1
    3c40:	0afffffa 	beq	3c30 <__aeabi_dmul+0x1b8>
    3c44:	e1811006 	orr	r1, r1, r6
    3c48:	e3350000 	teq	r5, #0
    3c4c:	112fff1e 	bxne	lr
    3c50:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    3c54:	e1b02082 	lsls	r2, r2, #1
    3c58:	e0a33003 	adc	r3, r3, r3
    3c5c:	e3130601 	tst	r3, #1048576	; 0x100000
    3c60:	02455001 	subeq	r5, r5, #1
    3c64:	0afffffa 	beq	3c54 <__aeabi_dmul+0x1dc>
    3c68:	e1833006 	orr	r3, r3, r6
    3c6c:	e12fff1e 	bx	lr
    3c70:	e134000c 	teq	r4, r12
    3c74:	e00c5a23 	and	r5, r12, r3, lsr #20
    3c78:	1135000c 	teqne	r5, r12
    3c7c:	0a000007 	beq	3ca0 <__aeabi_dmul+0x228>
    3c80:	e1906081 	orrs	r6, r0, r1, lsl #1
    3c84:	11926083 	orrsne	r6, r2, r3, lsl #1
    3c88:	1affffe5 	bne	3c24 <__aeabi_dmul+0x1ac>
    3c8c:	e0211003 	eor	r1, r1, r3
    3c90:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3c94:	e3a00000 	mov	r0, #0
    3c98:	e8bd4070 	pop	{r4, r5, r6, lr}
    3c9c:	e12fff1e 	bx	lr
    3ca0:	e1906081 	orrs	r6, r0, r1, lsl #1
    3ca4:	01a00002 	moveq	r0, r2
    3ca8:	01a01003 	moveq	r1, r3
    3cac:	11926083 	orrsne	r6, r2, r3, lsl #1
    3cb0:	0a000010 	beq	3cf8 <__aeabi_dmul+0x280>
    3cb4:	e134000c 	teq	r4, r12
    3cb8:	1a000001 	bne	3cc4 <__aeabi_dmul+0x24c>
    3cbc:	e1906601 	orrs	r6, r0, r1, lsl #12
    3cc0:	1a00000c 	bne	3cf8 <__aeabi_dmul+0x280>
    3cc4:	e135000c 	teq	r5, r12
    3cc8:	1a000003 	bne	3cdc <__aeabi_dmul+0x264>
    3ccc:	e1926603 	orrs	r6, r2, r3, lsl #12
    3cd0:	11a00002 	movne	r0, r2
    3cd4:	11a01003 	movne	r1, r3
    3cd8:	1a000006 	bne	3cf8 <__aeabi_dmul+0x280>
    3cdc:	e0211003 	eor	r1, r1, r3
    3ce0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3ce4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    3ce8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    3cec:	e3a00000 	mov	r0, #0
    3cf0:	e8bd4070 	pop	{r4, r5, r6, lr}
    3cf4:	e12fff1e 	bx	lr
    3cf8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    3cfc:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    3d00:	e8bd4070 	pop	{r4, r5, r6, lr}
    3d04:	e12fff1e 	bx	lr

00003d08 <__aeabi_ddiv>:
    3d08:	e92d4070 	push	{r4, r5, r6, lr}
    3d0c:	e3a0c0ff 	mov	r12, #255	; 0xff
    3d10:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    3d14:	e01c4a21 	ands	r4, r12, r1, lsr #20
    3d18:	101c5a23 	andsne	r5, r12, r3, lsr #20
    3d1c:	1134000c 	teqne	r4, r12
    3d20:	1135000c 	teqne	r5, r12
    3d24:	0b00005e 	bleq	3ea4 <__aeabi_ddiv+0x19c>
    3d28:	e0444005 	sub	r4, r4, r5
    3d2c:	e021e003 	eor	lr, r1, r3
    3d30:	e1925603 	orrs	r5, r2, r3, lsl #12
    3d34:	e1a01601 	lsl	r1, r1, #12
    3d38:	0a00004c 	beq	3e70 <__aeabi_ddiv+0x168>
    3d3c:	e1a03603 	lsl	r3, r3, #12
    3d40:	e3a05201 	mov	r5, #268435456	; 0x10000000
    3d44:	e1853223 	orr	r3, r5, r3, lsr #4
    3d48:	e1833c22 	orr	r3, r3, r2, lsr #24
    3d4c:	e1a02402 	lsl	r2, r2, #8
    3d50:	e1855221 	orr	r5, r5, r1, lsr #4
    3d54:	e1855c20 	orr	r5, r5, r0, lsr #24
    3d58:	e1a06400 	lsl	r6, r0, #8
    3d5c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    3d60:	e1550003 	cmp	r5, r3
    3d64:	01560002 	cmpeq	r6, r2
    3d68:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    3d6c:	e2844c03 	add	r4, r4, #768	; 0x300
    3d70:	2a000001 	bcs	3d7c <__aeabi_ddiv+0x74>
    3d74:	e1b030a3 	lsrs	r3, r3, #1
    3d78:	e1a02062 	rrx	r2, r2
    3d7c:	e0566002 	subs	r6, r6, r2
    3d80:	e0c55003 	sbc	r5, r5, r3
    3d84:	e1b030a3 	lsrs	r3, r3, #1
    3d88:	e1a02062 	rrx	r2, r2
    3d8c:	e3a00601 	mov	r0, #1048576	; 0x100000
    3d90:	e3a0c702 	mov	r12, #524288	; 0x80000
    3d94:	e056e002 	subs	lr, r6, r2
    3d98:	e0d5e003 	sbcs	lr, r5, r3
    3d9c:	20466002 	subcs	r6, r6, r2
    3da0:	21a0500e 	movcs	r5, lr
    3da4:	2180000c 	orrcs	r0, r0, r12
    3da8:	e1b030a3 	lsrs	r3, r3, #1
    3dac:	e1a02062 	rrx	r2, r2
    3db0:	e056e002 	subs	lr, r6, r2
    3db4:	e0d5e003 	sbcs	lr, r5, r3
    3db8:	20466002 	subcs	r6, r6, r2
    3dbc:	21a0500e 	movcs	r5, lr
    3dc0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    3dc4:	e1b030a3 	lsrs	r3, r3, #1
    3dc8:	e1a02062 	rrx	r2, r2
    3dcc:	e056e002 	subs	lr, r6, r2
    3dd0:	e0d5e003 	sbcs	lr, r5, r3
    3dd4:	20466002 	subcs	r6, r6, r2
    3dd8:	21a0500e 	movcs	r5, lr
    3ddc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    3de0:	e1b030a3 	lsrs	r3, r3, #1
    3de4:	e1a02062 	rrx	r2, r2
    3de8:	e056e002 	subs	lr, r6, r2
    3dec:	e0d5e003 	sbcs	lr, r5, r3
    3df0:	20466002 	subcs	r6, r6, r2
    3df4:	21a0500e 	movcs	r5, lr
    3df8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    3dfc:	e195e006 	orrs	lr, r5, r6
    3e00:	0a00000d 	beq	3e3c <__aeabi_ddiv+0x134>
    3e04:	e1a05205 	lsl	r5, r5, #4
    3e08:	e1855e26 	orr	r5, r5, r6, lsr #28
    3e0c:	e1a06206 	lsl	r6, r6, #4
    3e10:	e1a03183 	lsl	r3, r3, #3
    3e14:	e1833ea2 	orr	r3, r3, r2, lsr #29
    3e18:	e1a02182 	lsl	r2, r2, #3
    3e1c:	e1b0c22c 	lsrs	r12, r12, #4
    3e20:	1affffdb 	bne	3d94 <__aeabi_ddiv+0x8c>
    3e24:	e3110601 	tst	r1, #1048576	; 0x100000
    3e28:	1a000006 	bne	3e48 <__aeabi_ddiv+0x140>
    3e2c:	e1811000 	orr	r1, r1, r0
    3e30:	e3a00000 	mov	r0, #0
    3e34:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    3e38:	eaffffd5 	b	3d94 <__aeabi_ddiv+0x8c>
    3e3c:	e3110601 	tst	r1, #1048576	; 0x100000
    3e40:	01811000 	orreq	r1, r1, r0
    3e44:	03a00000 	moveq	r0, #0
    3e48:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    3e4c:	835c0c07 	cmphi	r12, #1792	; 0x700
    3e50:	8affff43 	bhi	3b64 <__aeabi_dmul+0xec>
    3e54:	e055c003 	subs	r12, r5, r3
    3e58:	0056c002 	subseq	r12, r6, r2
    3e5c:	01b0c0a0 	lsrseq	r12, r0, #1
    3e60:	e2b00000 	adcs	r0, r0, #0
    3e64:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3e68:	e8bd4070 	pop	{r4, r5, r6, lr}
    3e6c:	e12fff1e 	bx	lr
    3e70:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    3e74:	e18e1621 	orr	r1, lr, r1, lsr #12
    3e78:	e09440ac 	adds	r4, r4, r12, lsr #1
    3e7c:	c074500c 	rsbsgt	r5, r4, r12
    3e80:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    3e84:	c8bd4070 	popgt	{r4, r5, r6, lr}
    3e88:	c12fff1e 	bxgt	lr
    3e8c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    3e90:	e3a0e000 	mov	lr, #0
    3e94:	e2544001 	subs	r4, r4, #1
    3e98:	eaffff31 	b	3b64 <__aeabi_dmul+0xec>
    3e9c:	e185e006 	orr	lr, r5, r6
    3ea0:	eaffff2f 	b	3b64 <__aeabi_dmul+0xec>
    3ea4:	e00c5a23 	and	r5, r12, r3, lsr #20
    3ea8:	e134000c 	teq	r4, r12
    3eac:	0135000c 	teqeq	r5, r12
    3eb0:	0affff90 	beq	3cf8 <__aeabi_dmul+0x280>
    3eb4:	e134000c 	teq	r4, r12
    3eb8:	1a000006 	bne	3ed8 <__aeabi_ddiv+0x1d0>
    3ebc:	e1904601 	orrs	r4, r0, r1, lsl #12
    3ec0:	1affff8c 	bne	3cf8 <__aeabi_dmul+0x280>
    3ec4:	e135000c 	teq	r5, r12
    3ec8:	1affff83 	bne	3cdc <__aeabi_dmul+0x264>
    3ecc:	e1a00002 	mov	r0, r2
    3ed0:	e1a01003 	mov	r1, r3
    3ed4:	eaffff87 	b	3cf8 <__aeabi_dmul+0x280>
    3ed8:	e135000c 	teq	r5, r12
    3edc:	1a000004 	bne	3ef4 <__aeabi_ddiv+0x1ec>
    3ee0:	e1925603 	orrs	r5, r2, r3, lsl #12
    3ee4:	0affff68 	beq	3c8c <__aeabi_dmul+0x214>
    3ee8:	e1a00002 	mov	r0, r2
    3eec:	e1a01003 	mov	r1, r3
    3ef0:	eaffff80 	b	3cf8 <__aeabi_dmul+0x280>
    3ef4:	e1906081 	orrs	r6, r0, r1, lsl #1
    3ef8:	11926083 	orrsne	r6, r2, r3, lsl #1
    3efc:	1affff48 	bne	3c24 <__aeabi_dmul+0x1ac>
    3f00:	e1904081 	orrs	r4, r0, r1, lsl #1
    3f04:	1affff74 	bne	3cdc <__aeabi_dmul+0x264>
    3f08:	e1925083 	orrs	r5, r2, r3, lsl #1
    3f0c:	1affff5e 	bne	3c8c <__aeabi_dmul+0x214>
    3f10:	eaffff78 	b	3cf8 <__aeabi_dmul+0x280>

00003f14 <__gedf2>:
    3f14:	e3e0c000 	mvn	r12, #0
    3f18:	ea000002 	b	3f28 <__cmpdf2+0x4>

00003f1c <__ledf2>:
    3f1c:	e3a0c001 	mov	r12, #1
    3f20:	ea000000 	b	3f28 <__cmpdf2+0x4>

00003f24 <__cmpdf2>:
    3f24:	e3a0c001 	mov	r12, #1
    3f28:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    3f2c:	e1a0c081 	lsl	r12, r1, #1
    3f30:	e1f0cacc 	mvns	r12, r12, asr #21
    3f34:	e1a0c083 	lsl	r12, r3, #1
    3f38:	11f0cacc 	mvnsne	r12, r12, asr #21
    3f3c:	0a00000e 	beq	3f7c <__cmpdf2+0x58>
    3f40:	e28dd004 	add	sp, sp, #4
    3f44:	e190c081 	orrs	r12, r0, r1, lsl #1
    3f48:	0192c083 	orrseq	r12, r2, r3, lsl #1
    3f4c:	11310003 	teqne	r1, r3
    3f50:	01300002 	teqeq	r0, r2
    3f54:	03a00000 	moveq	r0, #0
    3f58:	012fff1e 	bxeq	lr
    3f5c:	e3700000 	cmn	r0, #0
    3f60:	e1310003 	teq	r1, r3
    3f64:	51510003 	cmppl	r1, r3
    3f68:	01500002 	cmpeq	r0, r2
    3f6c:	21a00fc3 	asrcs	r0, r3, #31
    3f70:	31e00fc3 	mvncc	r0, r3, asr #31
    3f74:	e3800001 	orr	r0, r0, #1
    3f78:	e12fff1e 	bx	lr
    3f7c:	e1a0c081 	lsl	r12, r1, #1
    3f80:	e1f0cacc 	mvns	r12, r12, asr #21
    3f84:	1a000001 	bne	3f90 <__cmpdf2+0x6c>
    3f88:	e190c601 	orrs	r12, r0, r1, lsl #12
    3f8c:	1a000004 	bne	3fa4 <__cmpdf2+0x80>
    3f90:	e1a0c083 	lsl	r12, r3, #1
    3f94:	e1f0cacc 	mvns	r12, r12, asr #21
    3f98:	1affffe8 	bne	3f40 <__cmpdf2+0x1c>
    3f9c:	e192c603 	orrs	r12, r2, r3, lsl #12
    3fa0:	0affffe6 	beq	3f40 <__cmpdf2+0x1c>
    3fa4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    3fa8:	e12fff1e 	bx	lr

00003fac <__aeabi_cdrcmple>:
    3fac:	e1a0c000 	mov	r12, r0
    3fb0:	e1a00002 	mov	r0, r2
    3fb4:	e1a0200c 	mov	r2, r12
    3fb8:	e1a0c001 	mov	r12, r1
    3fbc:	e1a01003 	mov	r1, r3
    3fc0:	e1a0300c 	mov	r3, r12
    3fc4:	eaffffff 	b	3fc8 <__aeabi_cdcmpeq>

00003fc8 <__aeabi_cdcmpeq>:
    3fc8:	e92d4001 	push	{r0, lr}
    3fcc:	ebffffd4 	bl	3f24 <__cmpdf2>
    3fd0:	e3500000 	cmp	r0, #0
    3fd4:	43700000 	cmnmi	r0, #0
    3fd8:	e8bd4001 	pop	{r0, lr}
    3fdc:	e12fff1e 	bx	lr

00003fe0 <__aeabi_dcmpeq>:
    3fe0:	e52de008 	str	lr, [sp, #-8]!
    3fe4:	ebfffff7 	bl	3fc8 <__aeabi_cdcmpeq>
    3fe8:	03a00001 	moveq	r0, #1
    3fec:	13a00000 	movne	r0, #0
    3ff0:	e49de008 	ldr	lr, [sp], #8
    3ff4:	e12fff1e 	bx	lr

00003ff8 <__aeabi_dcmplt>:
    3ff8:	e52de008 	str	lr, [sp, #-8]!
    3ffc:	ebfffff1 	bl	3fc8 <__aeabi_cdcmpeq>
    4000:	33a00001 	movcc	r0, #1
    4004:	23a00000 	movcs	r0, #0
    4008:	e49de008 	ldr	lr, [sp], #8
    400c:	e12fff1e 	bx	lr

00004010 <__aeabi_dcmple>:
    4010:	e52de008 	str	lr, [sp, #-8]!
    4014:	ebffffeb 	bl	3fc8 <__aeabi_cdcmpeq>
    4018:	93a00001 	movls	r0, #1
    401c:	83a00000 	movhi	r0, #0
    4020:	e49de008 	ldr	lr, [sp], #8
    4024:	e12fff1e 	bx	lr

00004028 <__aeabi_dcmpge>:
    4028:	e52de008 	str	lr, [sp, #-8]!
    402c:	ebffffde 	bl	3fac <__aeabi_cdrcmple>
    4030:	93a00001 	movls	r0, #1
    4034:	83a00000 	movhi	r0, #0
    4038:	e49de008 	ldr	lr, [sp], #8
    403c:	e12fff1e 	bx	lr

00004040 <__aeabi_dcmpgt>:
    4040:	e52de008 	str	lr, [sp, #-8]!
    4044:	ebffffd8 	bl	3fac <__aeabi_cdrcmple>
    4048:	33a00001 	movcc	r0, #1
    404c:	23a00000 	movcs	r0, #0
    4050:	e49de008 	ldr	lr, [sp], #8
    4054:	e12fff1e 	bx	lr

00004058 <__aeabi_d2iz>:
    4058:	e1a02081 	lsl	r2, r1, #1
    405c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    4060:	2a00000c 	bcs	4098 <__aeabi_d2iz+0x40>
    4064:	5a000009 	bpl	4090 <__aeabi_d2iz+0x38>
    4068:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    406c:	e0532ac2 	subs	r2, r3, r2, asr #21
    4070:	9a00000a 	bls	40a0 <__aeabi_d2iz+0x48>
    4074:	e1a03581 	lsl	r3, r1, #11
    4078:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    407c:	e1833aa0 	orr	r3, r3, r0, lsr #21
    4080:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    4084:	e1a00233 	lsr	r0, r3, r2
    4088:	12600000 	rsbne	r0, r0, #0
    408c:	e12fff1e 	bx	lr
    4090:	e3a00000 	mov	r0, #0
    4094:	e12fff1e 	bx	lr
    4098:	e1900601 	orrs	r0, r0, r1, lsl #12
    409c:	1a000002 	bne	40ac <__aeabi_d2iz+0x54>
    40a0:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    40a4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    40a8:	e12fff1e 	bx	lr
    40ac:	e3a00000 	mov	r0, #0
    40b0:	e12fff1e 	bx	lr

000040b4 <atexit>:
    40b4:	e1a01000 	mov	r1, r0
    40b8:	e3a00000 	mov	r0, #0
    40bc:	e92d4008 	push	{r3, lr}
    40c0:	e1a02000 	mov	r2, r0
    40c4:	e1a03000 	mov	r3, r0
    40c8:	eb000095 	bl	4324 <__register_exitproc>
    40cc:	e8bd4008 	pop	{r3, lr}
    40d0:	e12fff1e 	bx	lr

000040d4 <__errno>:
    40d4:	e59f3004 	ldr	r3, [pc, #4]	; 40e0 <__errno+0xc>
    40d8:	e5930000 	ldr	r0, [r3]
    40dc:	e12fff1e 	bx	lr
    40e0:	000069d0 	.word	0x000069d0

000040e4 <exit>:
    40e4:	e92d4008 	push	{r3, lr}
    40e8:	e3a01000 	mov	r1, #0
    40ec:	e1a04000 	mov	r4, r0
    40f0:	eb0000c8 	bl	4418 <__call_exitprocs>
    40f4:	e59f3018 	ldr	r3, [pc, #24]	; 4114 <exit+0x30>
    40f8:	e5930000 	ldr	r0, [r3]
    40fc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    4100:	e3530000 	cmp	r3, #0
    4104:	11a0e00f 	movne	lr, pc
    4108:	112fff13 	bxne	r3
    410c:	e1a00004 	mov	r0, r4
    4110:	eb00014c 	bl	4648 <_exit>
    4114:	00006910 	.word	0x00006910

00004118 <memset>:
    4118:	e3520003 	cmp	r2, #3
    411c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    4120:	e20110ff 	and	r1, r1, #255	; 0xff
    4124:	8a000008 	bhi	414c <memset+0x34>
    4128:	e3520000 	cmp	r2, #0
    412c:	0a000004 	beq	4144 <memset+0x2c>
    4130:	e1a03000 	mov	r3, r0
    4134:	e0822000 	add	r2, r2, r0
    4138:	e4c31001 	strb	r1, [r3], #1
    413c:	e1530002 	cmp	r3, r2
    4140:	1afffffc 	bne	4138 <memset+0x20>
    4144:	e8bd0010 	ldmfd	sp!, {r4}
    4148:	e12fff1e 	bx	lr
    414c:	e3100003 	tst	r0, #3
    4150:	e0802002 	add	r2, r0, r2
    4154:	0a000007 	beq	4178 <memset+0x60>
    4158:	e280c001 	add	r12, r0, #1
    415c:	e20c3003 	and	r3, r12, #3
    4160:	e3530000 	cmp	r3, #0
    4164:	e54c1001 	strb	r1, [r12, #-1]
    4168:	e1a0300c 	mov	r3, r12
    416c:	e28cc001 	add	r12, r12, #1
    4170:	1afffff9 	bne	415c <memset+0x44>
    4174:	ea000000 	b	417c <memset+0x64>
    4178:	e1a03000 	mov	r3, r0
    417c:	e0634002 	rsb	r4, r3, r2
    4180:	e081c401 	add	r12, r1, r1, lsl #8
    4184:	e354003f 	cmp	r4, #63	; 0x3f
    4188:	e08cc80c 	add	r12, r12, r12, lsl #16
    418c:	da00001a 	ble	41fc <memset+0xe4>
    4190:	e583c000 	str	r12, [r3]
    4194:	e583c004 	str	r12, [r3, #4]
    4198:	e583c008 	str	r12, [r3, #8]
    419c:	e583c00c 	str	r12, [r3, #12]
    41a0:	e583c010 	str	r12, [r3, #16]
    41a4:	e583c014 	str	r12, [r3, #20]
    41a8:	e583c018 	str	r12, [r3, #24]
    41ac:	e583c01c 	str	r12, [r3, #28]
    41b0:	e583c020 	str	r12, [r3, #32]
    41b4:	e583c024 	str	r12, [r3, #36]	; 0x24
    41b8:	e583c028 	str	r12, [r3, #40]	; 0x28
    41bc:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    41c0:	e583c030 	str	r12, [r3, #48]	; 0x30
    41c4:	e583c034 	str	r12, [r3, #52]	; 0x34
    41c8:	e583c038 	str	r12, [r3, #56]	; 0x38
    41cc:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    41d0:	e2833040 	add	r3, r3, #64	; 0x40
    41d4:	e0634002 	rsb	r4, r3, r2
    41d8:	e354003f 	cmp	r4, #63	; 0x3f
    41dc:	caffffeb 	bgt	4190 <memset+0x78>
    41e0:	ea000005 	b	41fc <memset+0xe4>
    41e4:	e583c000 	str	r12, [r3]
    41e8:	e583c004 	str	r12, [r3, #4]
    41ec:	e583c008 	str	r12, [r3, #8]
    41f0:	e583c00c 	str	r12, [r3, #12]
    41f4:	e2833010 	add	r3, r3, #16
    41f8:	e0634002 	rsb	r4, r3, r2
    41fc:	e354000f 	cmp	r4, #15
    4200:	cafffff7 	bgt	41e4 <memset+0xcc>
    4204:	e3540003 	cmp	r4, #3
    4208:	da000006 	ble	4228 <memset+0x110>
    420c:	e2834004 	add	r4, r3, #4
    4210:	e0643002 	rsb	r3, r4, r2
    4214:	e3530003 	cmp	r3, #3
    4218:	e504c004 	str	r12, [r4, #-4]
    421c:	e1a03004 	mov	r3, r4
    4220:	e2844004 	add	r4, r4, #4
    4224:	cafffff9 	bgt	4210 <memset+0xf8>
    4228:	e1520003 	cmp	r2, r3
    422c:	9affffc4 	bls	4144 <memset+0x2c>
    4230:	e2833001 	add	r3, r3, #1
    4234:	e2822001 	add	r2, r2, #1
    4238:	e5431001 	strb	r1, [r3, #-1]
    423c:	e2833001 	add	r3, r3, #1
    4240:	e1530002 	cmp	r3, r2
    4244:	1afffffb 	bne	4238 <memset+0x120>
    4248:	eaffffbd 	b	4144 <memset+0x2c>

0000424c <srand>:
    424c:	e59f3010 	ldr	r3, [pc, #16]	; 4264 <srand+0x18>
    4250:	e5933000 	ldr	r3, [r3]
    4254:	e3a02000 	mov	r2, #0
    4258:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    425c:	e58320ac 	str	r2, [r3, #172]	; 0xac
    4260:	e12fff1e 	bx	lr
    4264:	000069d0 	.word	0x000069d0

00004268 <rand>:
    4268:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    426c:	e59f3044 	ldr	r3, [pc, #68]	; 42b8 <rand+0x50>
    4270:	e593c000 	ldr	r12, [r3]
    4274:	e59f4040 	ldr	r4, [pc, #64]	; 42bc <rand+0x54>
    4278:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    427c:	e0040492 	mul	r4, r2, r4
    4280:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    4284:	e59f3034 	ldr	r3, [pc, #52]	; 42c0 <rand+0x58>
    4288:	e0244193 	mla	r4, r3, r1, r4
    428c:	e0810392 	umull	r0, r1, r2, r3
    4290:	e3a02001 	mov	r2, #1
    4294:	e0922000 	adds	r2, r2, r0
    4298:	e0841001 	add	r1, r4, r1
    429c:	e3a03000 	mov	r3, #0
    42a0:	e0a33001 	adc	r3, r3, r1
    42a4:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    42a8:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    42ac:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    42b0:	e8bd0010 	ldmfd	sp!, {r4}
    42b4:	e12fff1e 	bx	lr
    42b8:	000069d0 	.word	0x000069d0
    42bc:	5851f42d 	.word	0x5851f42d
    42c0:	4c957f2d 	.word	0x4c957f2d

000042c4 <strlen>:
    42c4:	e3c01003 	bic	r1, r0, #3
    42c8:	e2100003 	ands	r0, r0, #3
    42cc:	e2600000 	rsb	r0, r0, #0
    42d0:	e4913004 	ldr	r3, [r1], #4
    42d4:	e280c004 	add	r12, r0, #4
    42d8:	e1a0c18c 	lsl	r12, r12, #3
    42dc:	e3e02000 	mvn	r2, #0
    42e0:	11833c32 	orrne	r3, r3, r2, lsr r12
    42e4:	e3a0c001 	mov	r12, #1
    42e8:	e18cc40c 	orr	r12, r12, r12, lsl #8
    42ec:	e18cc80c 	orr	r12, r12, r12, lsl #16
    42f0:	e043200c 	sub	r2, r3, r12
    42f4:	e1c22003 	bic	r2, r2, r3
    42f8:	e012238c 	ands	r2, r2, r12, lsl #7
    42fc:	04913004 	ldreq	r3, [r1], #4
    4300:	02800004 	addeq	r0, r0, #4
    4304:	0afffff9 	beq	42f0 <strlen+0x2c>
    4308:	e31300ff 	tst	r3, #255	; 0xff
    430c:	12800001 	addne	r0, r0, #1
    4310:	13130cff 	tstne	r3, #65280	; 0xff00
    4314:	12800001 	addne	r0, r0, #1
    4318:	131308ff 	tstne	r3, #16711680	; 0xff0000
    431c:	12800001 	addne	r0, r0, #1
    4320:	e12fff1e 	bx	lr

00004324 <__register_exitproc>:
    4324:	e59fc0e4 	ldr	r12, [pc, #228]	; 4410 <__register_exitproc+0xec>
    4328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    432c:	e59c4000 	ldr	r4, [r12]
    4330:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    4334:	e35c0000 	cmp	r12, #0
    4338:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    433c:	e59c5004 	ldr	r5, [r12, #4]
    4340:	0584c148 	streq	r12, [r4, #328]	; 0x148
    4344:	e355001f 	cmp	r5, #31
    4348:	e24dd010 	sub	sp, sp, #16
    434c:	e1a06000 	mov	r6, r0
    4350:	da000015 	ble	43ac <__register_exitproc+0x88>
    4354:	e59f00b8 	ldr	r0, [pc, #184]	; 4414 <__register_exitproc+0xf0>
    4358:	e3500000 	cmp	r0, #0
    435c:	1a000001 	bne	4368 <__register_exitproc+0x44>
    4360:	e3e00000 	mvn	r0, #0
    4364:	ea000018 	b	43cc <__register_exitproc+0xa8>
    4368:	e3a00e19 	mov	r0, #400	; 0x190
    436c:	e58d100c 	str	r1, [sp, #12]
    4370:	e58d2008 	str	r2, [sp, #8]
    4374:	e58d3004 	str	r3, [sp, #4]
    4378:	e320f000 	nop	{0}
    437c:	e250c000 	subs	r12, r0, #0
    4380:	e59d100c 	ldr	r1, [sp, #12]
    4384:	e59d2008 	ldr	r2, [sp, #8]
    4388:	e59d3004 	ldr	r3, [sp, #4]
    438c:	0afffff3 	beq	4360 <__register_exitproc+0x3c>
    4390:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    4394:	e3a00000 	mov	r0, #0
    4398:	e58c0004 	str	r0, [r12, #4]
    439c:	e58c5000 	str	r5, [r12]
    43a0:	e584c148 	str	r12, [r4, #328]	; 0x148
    43a4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    43a8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    43ac:	e3560000 	cmp	r6, #0
    43b0:	e59c4004 	ldr	r4, [r12, #4]
    43b4:	1a000007 	bne	43d8 <__register_exitproc+0xb4>
    43b8:	e2843002 	add	r3, r4, #2
    43bc:	e2844001 	add	r4, r4, #1
    43c0:	e78c1103 	str	r1, [r12, r3, lsl #2]
    43c4:	e58c4004 	str	r4, [r12, #4]
    43c8:	e3a00000 	mov	r0, #0
    43cc:	e28dd010 	add	sp, sp, #16
    43d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    43d4:	e12fff1e 	bx	lr
    43d8:	e3a00001 	mov	r0, #1
    43dc:	e1a00410 	lsl	r0, r0, r4
    43e0:	e08c8104 	add	r8, r12, r4, lsl #2
    43e4:	e3560002 	cmp	r6, #2
    43e8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    43ec:	e5883108 	str	r3, [r8, #264]	; 0x108
    43f0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    43f4:	e1877000 	orr	r7, r7, r0
    43f8:	01830000 	orreq	r0, r3, r0
    43fc:	e1a05008 	mov	r5, r8
    4400:	e5882088 	str	r2, [r8, #136]	; 0x88
    4404:	e58c7188 	str	r7, [r12, #392]	; 0x188
    4408:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    440c:	eaffffe9 	b	43b8 <__register_exitproc+0x94>
    4410:	00006910 	.word	0x00006910
    4414:	00000000 	.word	0x00000000

00004418 <__call_exitprocs>:
    4418:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    441c:	e59f3168 	ldr	r3, [pc, #360]	; 458c <__call_exitprocs+0x174>
    4420:	e5933000 	ldr	r3, [r3]
    4424:	e24dd014 	sub	sp, sp, #20
    4428:	e58d3004 	str	r3, [sp, #4]
    442c:	e2833f52 	add	r3, r3, #328	; 0x148
    4430:	e58d0008 	str	r0, [sp, #8]
    4434:	e58d300c 	str	r3, [sp, #12]
    4438:	e1a07001 	mov	r7, r1
    443c:	e3a08001 	mov	r8, #1
    4440:	e59d3004 	ldr	r3, [sp, #4]
    4444:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    4448:	e3560000 	cmp	r6, #0
    444c:	e59db00c 	ldr	r11, [sp, #12]
    4450:	0a000033 	beq	4524 <__call_exitprocs+0x10c>
    4454:	e5965004 	ldr	r5, [r6, #4]
    4458:	e2554001 	subs	r4, r5, #1
    445c:	5286a088 	addpl	r10, r6, #136	; 0x88
    4460:	5285501f 	addpl	r5, r5, #31
    4464:	508a5105 	addpl	r5, r10, r5, lsl #2
    4468:	5a000007 	bpl	448c <__call_exitprocs+0x74>
    446c:	ea000029 	b	4518 <__call_exitprocs+0x100>
    4470:	e5953000 	ldr	r3, [r5]
    4474:	e1530007 	cmp	r3, r7
    4478:	0a000005 	beq	4494 <__call_exitprocs+0x7c>
    447c:	e2444001 	sub	r4, r4, #1
    4480:	e3740001 	cmn	r4, #1
    4484:	e2455004 	sub	r5, r5, #4
    4488:	0a000022 	beq	4518 <__call_exitprocs+0x100>
    448c:	e3570000 	cmp	r7, #0
    4490:	1afffff6 	bne	4470 <__call_exitprocs+0x58>
    4494:	e5963004 	ldr	r3, [r6, #4]
    4498:	e06a2005 	rsb	r2, r10, r5
    449c:	e2433001 	sub	r3, r3, #1
    44a0:	e0862002 	add	r2, r6, r2
    44a4:	e1530004 	cmp	r3, r4
    44a8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    44ac:	13a01000 	movne	r1, #0
    44b0:	05864004 	streq	r4, [r6, #4]
    44b4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    44b8:	e3530000 	cmp	r3, #0
    44bc:	0affffee 	beq	447c <__call_exitprocs+0x64>
    44c0:	e1a02418 	lsl	r2, r8, r4
    44c4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    44c8:	e1120001 	tst	r2, r1
    44cc:	e5969004 	ldr	r9, [r6, #4]
    44d0:	0a000016 	beq	4530 <__call_exitprocs+0x118>
    44d4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    44d8:	e1120001 	tst	r2, r1
    44dc:	1a000016 	bne	453c <__call_exitprocs+0x124>
    44e0:	e59d0008 	ldr	r0, [sp, #8]
    44e4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    44e8:	e1a0e00f 	mov	lr, pc
    44ec:	e12fff13 	bx	r3
    44f0:	e5963004 	ldr	r3, [r6, #4]
    44f4:	e1530009 	cmp	r3, r9
    44f8:	1affffd0 	bne	4440 <__call_exitprocs+0x28>
    44fc:	e59b3000 	ldr	r3, [r11]
    4500:	e1530006 	cmp	r3, r6
    4504:	1affffcd 	bne	4440 <__call_exitprocs+0x28>
    4508:	e2444001 	sub	r4, r4, #1
    450c:	e3740001 	cmn	r4, #1
    4510:	e2455004 	sub	r5, r5, #4
    4514:	1affffdc 	bne	448c <__call_exitprocs+0x74>
    4518:	e59f1070 	ldr	r1, [pc, #112]	; 4590 <__call_exitprocs+0x178>
    451c:	e3510000 	cmp	r1, #0
    4520:	1a000009 	bne	454c <__call_exitprocs+0x134>
    4524:	e28dd014 	add	sp, sp, #20
    4528:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    452c:	e12fff1e 	bx	lr
    4530:	e1a0e00f 	mov	lr, pc
    4534:	e12fff13 	bx	r3
    4538:	eaffffec 	b	44f0 <__call_exitprocs+0xd8>
    453c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    4540:	e1a0e00f 	mov	lr, pc
    4544:	e12fff13 	bx	r3
    4548:	eaffffe8 	b	44f0 <__call_exitprocs+0xd8>
    454c:	e5963004 	ldr	r3, [r6, #4]
    4550:	e3530000 	cmp	r3, #0
    4554:	e5963000 	ldr	r3, [r6]
    4558:	1a000008 	bne	4580 <__call_exitprocs+0x168>
    455c:	e3530000 	cmp	r3, #0
    4560:	0a000006 	beq	4580 <__call_exitprocs+0x168>
    4564:	e1a00006 	mov	r0, r6
    4568:	e58b3000 	str	r3, [r11]
    456c:	e320f000 	nop	{0}
    4570:	e59b6000 	ldr	r6, [r11]
    4574:	e3560000 	cmp	r6, #0
    4578:	1affffb5 	bne	4454 <__call_exitprocs+0x3c>
    457c:	eaffffe8 	b	4524 <__call_exitprocs+0x10c>
    4580:	e1a0b006 	mov	r11, r6
    4584:	e1a06003 	mov	r6, r3
    4588:	eafffff9 	b	4574 <__call_exitprocs+0x15c>
    458c:	00006910 	.word	0x00006910
    4590:	00000000 	.word	0x00000000

00004594 <register_fini>:
    4594:	e92d4008 	push	{r3, lr}
    4598:	e59f3010 	ldr	r3, [pc, #16]	; 45b0 <register_fini+0x1c>
    459c:	e3530000 	cmp	r3, #0
    45a0:	159f000c 	ldrne	r0, [pc, #12]	; 45b4 <register_fini+0x20>
    45a4:	1bfffec2 	blne	40b4 <atexit>
    45a8:	e8bd4008 	pop	{r3, lr}
    45ac:	e12fff1e 	bx	lr
    45b0:	00006938 	.word	0x00006938
    45b4:	000045b8 	.word	0x000045b8

000045b8 <__libc_fini_array>:
    45b8:	e92d4038 	push	{r3, r4, r5, lr}
    45bc:	e59f5030 	ldr	r5, [pc, #48]	; 45f4 <__libc_fini_array+0x3c>
    45c0:	e59f4030 	ldr	r4, [pc, #48]	; 45f8 <__libc_fini_array+0x40>
    45c4:	e0654004 	rsb	r4, r5, r4
    45c8:	e1b04144 	asrs	r4, r4, #2
    45cc:	10855104 	addne	r5, r5, r4, lsl #2
    45d0:	0a000004 	beq	45e8 <__libc_fini_array+0x30>
    45d4:	e5353004 	ldr	r3, [r5, #-4]!
    45d8:	e1a0e00f 	mov	lr, pc
    45dc:	e12fff13 	bx	r3
    45e0:	e2544001 	subs	r4, r4, #1
    45e4:	1afffffa 	bne	45d4 <__libc_fini_array+0x1c>
    45e8:	eb0008d2 	bl	6938 <__libc_fini>
    45ec:	e8bd4038 	pop	{r3, r4, r5, lr}
    45f0:	e12fff1e 	bx	lr
    45f4:	00006950 	.word	0x00006950
    45f8:	00006954 	.word	0x00006954

000045fc <__cs3_premain>:
    45fc:	e92d4008 	push	{r3, lr}
    4600:	eb00001d 	bl	467c <__libc_init_array>
    4604:	e59f3030 	ldr	r3, [pc, #48]	; 463c <__cs3_premain+0x40>
    4608:	e3530000 	cmp	r3, #0
    460c:	15930000 	ldrne	r0, [r3]
    4610:	01a00003 	moveq	r0, r3
    4614:	e59f3024 	ldr	r3, [pc, #36]	; 4640 <__cs3_premain+0x44>
    4618:	e3530000 	cmp	r3, #0
    461c:	15931000 	ldrne	r1, [r3]
    4620:	01a01003 	moveq	r1, r3
    4624:	e3a02000 	mov	r2, #0
    4628:	ebffef0b 	bl	25c <main>
    462c:	e59f3010 	ldr	r3, [pc, #16]	; 4644 <__cs3_premain+0x48>
    4630:	e3530000 	cmp	r3, #0
    4634:	1bfffeaa 	blne	40e4 <exit>
    4638:	eafffffe 	b	4638 <__cs3_premain+0x3c>
	...
    4644:	000040e4 	.word	0x000040e4

00004648 <_exit>:
    4648:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    464c:	e3a00018 	mov	r0, #24
    4650:	e59f1004 	ldr	r1, [pc, #4]	; 465c <_exit+0x14>
    4654:	ef123456 	svc	0x00123456
    4658:	eafffffe 	b	4658 <_exit+0x10>
    465c:	00020026 	.word	0x00020026

00004660 <__cs3_isr_interrupt>:
    4660:	eafffffe 	b	4660 <__cs3_isr_interrupt>

00004664 <__cs3_isr_undef>:
    4664:	eafffffe 	b	4664 <__cs3_isr_undef>

00004668 <__cs3_isr_swi>:
    4668:	eafffffe 	b	4668 <__cs3_isr_swi>

0000466c <__cs3_isr_pabort>:
    466c:	eafffffe 	b	466c <__cs3_isr_pabort>

00004670 <__cs3_isr_dabort>:
    4670:	eafffffe 	b	4670 <__cs3_isr_dabort>

00004674 <__cs3_isr_irq>:
    4674:	eafffffe 	b	4674 <__cs3_isr_irq>

00004678 <__cs3_isr_fiq>:
    4678:	eafffffe 	b	4678 <__cs3_isr_fiq>

0000467c <__libc_init_array>:
    467c:	e92d4070 	push	{r4, r5, r6, lr}
    4680:	e59f506c 	ldr	r5, [pc, #108]	; 46f4 <__libc_init_array+0x78>
    4684:	e59f606c 	ldr	r6, [pc, #108]	; 46f8 <__libc_init_array+0x7c>
    4688:	e0656006 	rsb	r6, r5, r6
    468c:	e1b06146 	asrs	r6, r6, #2
    4690:	12455004 	subne	r5, r5, #4
    4694:	13a04000 	movne	r4, #0
    4698:	0a000005 	beq	46b4 <__libc_init_array+0x38>
    469c:	e5b53004 	ldr	r3, [r5, #4]!
    46a0:	e2844001 	add	r4, r4, #1
    46a4:	e1a0e00f 	mov	lr, pc
    46a8:	e12fff13 	bx	r3
    46ac:	e1560004 	cmp	r6, r4
    46b0:	1afffff9 	bne	469c <__libc_init_array+0x20>
    46b4:	e59f5040 	ldr	r5, [pc, #64]	; 46fc <__libc_init_array+0x80>
    46b8:	e59f6040 	ldr	r6, [pc, #64]	; 4700 <__libc_init_array+0x84>
    46bc:	e0656006 	rsb	r6, r5, r6
    46c0:	eb000894 	bl	6918 <_init>
    46c4:	e1b06146 	asrs	r6, r6, #2
    46c8:	12455004 	subne	r5, r5, #4
    46cc:	13a04000 	movne	r4, #0
    46d0:	0a000005 	beq	46ec <__libc_init_array+0x70>
    46d4:	e5b53004 	ldr	r3, [r5, #4]!
    46d8:	e2844001 	add	r4, r4, #1
    46dc:	e1a0e00f 	mov	lr, pc
    46e0:	e12fff13 	bx	r3
    46e4:	e1560004 	cmp	r6, r4
    46e8:	1afffff9 	bne	46d4 <__libc_init_array+0x58>
    46ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    46f0:	e12fff1e 	bx	lr
    46f4:	00006930 	.word	0x00006930
    46f8:	00006930 	.word	0x00006930
    46fc:	00006930 	.word	0x00006930
    4700:	00006938 	.word	0x00006938

Disassembly of section .rodata:

00004708 <intToChar>:
    4708:	33323130 37363534 00003938 41544a0a     0123456789...JTA
    4718:	41552047 74205452 0a747365 0000203e     G UART test.> ..
    4728:	6572500a 61207373 6b20796e 74207965     .Press any key t
    4738:	6f63206f 6e69746e 3e0a6575 00000020     o continue.> ...

00004748 <COSs>:
    4748:	00000000 3ff00000 91d14e3c 3feffe5c     .......?<N..\..?
    4758:	b573eab3 3feffb15 fcb923a3 3feff487     ..s....?.#.....?
    4768:	d5cfaace 3fefec56 d288ce70 3fefe0de     ....V..?p......?
    4778:	a9fbe76d 3fefd2f1 5c28f5c3 3fefc28f     m......?..(\...?
    4788:	a0275254 3fefb089 07c84b5e 3fef9b3d     TR'....?^K..=..?
    4798:	4a2339c1 3fef837b 67381d7e 3fef6944     .9#J{..?~.8gDi.?
    47a8:	5f06f694 3fef4c98 e8a71de7 3fef2e48     ..._.L.?....H..?
    47b8:	95e9e1b1 3fef0cb2 1de69ad4 3feee8a7     .......?.......?
    47c8:	37b4a234 3feec2f8 7525460b 3fee9a02     4..7...?.F%u...?
    47d8:	4467381d 3fee6f69 374bc6a8 3fee4189     .8gDio.?..K7.A.?
    47e8:	bc01a36e 3fee1205 1b71758e 3fede00d     n......?.uq....?
    47f8:	559b3d08 3fedab9f 6a7ef9db 3fed74bc     .=.U...?..~j.t.?
    4808:	5a1cac08 3fed3b64 db8bac71 3fed0068     ...Zd;.?q...h..?
    4818:	37b4a234 3fecc2f8 6e978d50 3fec8312     4..7...?P..n...?
    4828:	80346dc6 3fec40b7 23a29c78 3febfcb9     .m4..@.?x..#...?
    4838:	a1cac083 3febb645 b1c432ca 3feb6e2e     ....E..?.2...n.?
    4848:	e5604189 3feb22d0 61e4f766 3fead6a1     .A`..".?f..a...?
    4858:	020c49ba 3fea872b eb1c432d 3fea36e2     .I..+..?-C...6.?
    4868:	f7ced917 3fe9e353 9652bd3c 3fe98e21     ....S..?<.R.!..?
    4878:	c6a7ef9e 3fe9374b d1b71759 3fe8de00     ....K7.?Y......?
    4888:	6e978d50 3fe88312 9d495183 3fe82680     P..n...?.QI..&.?
    4898:	a6b50b0f 3fe7c779 f9096bba 3fe767a0     ....y..?.k...g.?
    48a8:	6f0068dc 3fe70481 2de00d1b 3fe6a090     .h.o...?...-...?
    48b8:	7e90ff97 3fe63afb a9fbe76d 3fe5d2f1     ...~.:.?m......?
    48c8:	67381d7e 3fe56944 6d5cfaad 3fe4fec5     ~.8gDi.?..\m...?
    48d8:	4e3bcd36 3fe491d1 c0ebedfa 3fe42339     6.;N...?....9#.?
    48e8:	7c84b5dd 3fe3b3d0 12d77319 3fe341f2     ...|...?.s...A.?
    48f8:	f212d773 3fe2cf41 631f8a09 3fe25aee     s...A..?...c.Z.?
    4908:	65fd8adb 3fe1e4f7 faacd9e8 3fe16d5c     ...e...?....\m.?
    4918:	d844d014 3fe0f4f0 47ae147b 3fe07ae1     ..D....?{..G.z.?
    4928:	00000000 3fe00000 94467382 3fdf06f6     .......?.sF....?
    4938:	ba5e353f 3fde0c49 04189375 3fdd0e56     ?5^.I..?u...V..?
    4948:	dfa43fe6 3fdc0ebe ded288ce 3fdb0be0     .?.....?.......?
    4958:	6fd21ff3 3fda075f 92a30553 3fd9013a     ...o_..?S...:..?
    4968:	474538ef 3fd7f972 8db8bac7 3fd6f006     .8EGr..?.......?
    4978:	f7ced917 3fd5e353 61e4f766 3fd4d6a1     ....S..?f..a...?
    4988:	ef9db22d 3fd3c6a7 7d566cf4 3fd2b6ae     -......?.lV}...?
    4998:	2eb1c433 3fd1a36e e00d1b71 3fd0902d     3...n..?q...-..?
    49a8:	467381d8 3fcef694 cccccccd 3fcccccc     ..sF...?.......?
    49b8:	9a6b50b1 3fca9c77 6809d495 3fc86c22     .Pk.w..?...h"l.?
    49c8:	594af4f1 3fc63886 4a8c154d 3fc404ea     ..JY.8.?M..J...?
    49d8:	3bcd35a8 3fc1d14e a161e4f7 3fbf34d6     .5.;N..?..a..4.?
    49e8:	126e978d 3fbac083 3c361134 3fb652bd     ..n....?4.6<.R.?
    49f8:	ad42c3ca 3fb1de69 cb295e9e 3faac710     ..B.i..?.^)....?
    4a08:	ad42c3ca 3fa1de69 1eb851ec 3f91eb85     ..B.i..?.Q.....?
	...
    4a20:	1eb851ec bf91eb85 ad42c3ca bfa1de69     .Q........B.i...
    4a30:	cb295e9e bfaac710 ad42c3ca bfb1de69     .^).......B.i...
    4a40:	3c361134 bfb652bd 126e978d bfbac083     4.6<.R....n.....
    4a50:	a161e4f7 bfbf34d6 3bcd35a8 bfc1d14e     ..a..4...5.;N...
    4a60:	4a8c154d bfc404ea 594af4f1 bfc63886     M..J......JY.8..
    4a70:	6809d495 bfc86c22 9a6b50b1 bfca9c77     ...h"l...Pk.w...
    4a80:	cccccccd bfcccccc 467381d8 bfcef694     ..........sF....
    4a90:	e00d1b71 bfd0902d 2eb1c433 bfd1a36e     q...-...3...n...
    4aa0:	7d566cf4 bfd2b6ae ef9db22d bfd3c6a7     .lV}....-.......
    4ab0:	61e4f766 bfd4d6a1 f7ced917 bfd5e353     f..a........S...
    4ac0:	8db8bac7 bfd6f006 474538ef bfd7f972     .........8EGr...
    4ad0:	92a30553 bfd9013a 6fd21ff3 bfda075f     S...:......o_...
    4ae0:	ded288ce bfdb0be0 dfa43fe6 bfdc0ebe     .........?......
    4af0:	04189375 bfdd0e56 ba5e353f bfde0c49     u...V...?5^.I...
    4b00:	94467382 bfdf06f6 00000000 bfe00000     .sF.............
    4b10:	47ae147b bfe07ae1 d844d014 bfe0f4f0     {..G.z....D.....
    4b20:	faacd9e8 bfe16d5c 65fd8adb bfe1e4f7     ....\m.....e....
    4b30:	631f8a09 bfe25aee f212d773 bfe2cf41     ...c.Z..s...A...
    4b40:	12d77319 bfe341f2 7c84b5dd bfe3b3d0     .s...A.....|....
    4b50:	c0ebedfa bfe42339 4e3bcd36 bfe491d1     ....9#..6.;N....
    4b60:	6d5cfaad bfe4fec5 67381d7e bfe56944     ..\m....~.8gDi..
    4b70:	a9fbe76d bfe5d2f1 7e90ff97 bfe63afb     m..........~.:..
    4b80:	2de00d1b bfe6a090 6f0068dc bfe70481     ...-.....h.o....
    4b90:	f9096bba bfe767a0 a6b50b0f bfe7c779     .k...g......y...
    4ba0:	9d495183 bfe82680 6e978d50 bfe88312     .QI..&..P..n....
    4bb0:	d1b71759 bfe8de00 c6a7ef9e bfe9374b     Y...........K7..
    4bc0:	9652bd3c bfe98e21 f7ced917 bfe9e353     <.R.!.......S...
    4bd0:	eb1c432d bfea36e2 020c49ba bfea872b     -C...6...I..+...
    4be0:	61e4f766 bfead6a1 e5604189 bfeb22d0     f..a.....A`.."..
    4bf0:	b1c432ca bfeb6e2e a1cac083 bfebb645     .2...n......E...
    4c00:	23a29c78 bfebfcb9 80346dc6 bfec40b7     x..#.....m4..@..
    4c10:	6e978d50 bfec8312 37b4a234 bfecc2f8     P..n....4..7....
    4c20:	db8bac71 bfed0068 5a1cac08 bfed3b64     q...h......Zd;..
    4c30:	6a7ef9db bfed74bc 559b3d08 bfedab9f     ..~j.t...=.U....
    4c40:	1b71758e bfede00d bc01a36e bfee1205     .uq.....n.......
    4c50:	374bc6a8 bfee4189 4467381d bfee6f69     ..K7.A...8gDio..
    4c60:	7525460b bfee9a02 37b4a234 bfeec2f8     .F%u....4..7....
    4c70:	1de69ad4 bfeee8a7 95e9e1b1 bfef0cb2     ................
    4c80:	e8a71de7 bfef2e48 5f06f694 bfef4c98     ....H......_.L..
    4c90:	67381d7e bfef6944 4a2339c1 bfef837b     ~.8gDi...9#J{...
    4ca0:	07c84b5e bfef9b3d a0275254 bfefb089     ^K..=...TR'.....
    4cb0:	5c28f5c3 bfefc28f a9fbe76d bfefd2f1     ..(\....m.......
    4cc0:	d288ce70 bfefe0de d5cfaace bfefec56     p...........V...
    4cd0:	fcb923a3 bfeff487 b573eab3 bfeffb15     .#........s.....
    4ce0:	91d14e3c bfeffe5c 00000000 bff00000     <N..\...........
    4cf0:	91d14e3c bfeffe5c b573eab3 bfeffb15     <N..\.....s.....
    4d00:	fcb923a3 bfeff487 d5cfaace bfefec56     .#..........V...
    4d10:	d288ce70 bfefe0de a9fbe76d bfefd2f1     p.......m.......
    4d20:	5c28f5c3 bfefc28f a0275254 bfefb089     ..(\....TR'.....
    4d30:	07c84b5e bfef9b3d 4a2339c1 bfef837b     ^K..=....9#J{...
    4d40:	67381d7e bfef6944 5f06f694 bfef4c98     ~.8gDi....._.L..
    4d50:	e8a71de7 bfef2e48 95e9e1b1 bfef0cb2     ....H...........
    4d60:	1de69ad4 bfeee8a7 37b4a234 bfeec2f8     ........4..7....
    4d70:	7525460b bfee9a02 4467381d bfee6f69     .F%u.....8gDio..
    4d80:	374bc6a8 bfee4189 bc01a36e bfee1205     ..K7.A..n.......
    4d90:	1b71758e bfede00d 559b3d08 bfedab9f     .uq......=.U....
    4da0:	6a7ef9db bfed74bc 5a1cac08 bfed3b64     ..~j.t.....Zd;..
    4db0:	db8bac71 bfed0068 37b4a234 bfecc2f8     q...h...4..7....
    4dc0:	6e978d50 bfec8312 80346dc6 bfec40b7     P..n.....m4..@..
    4dd0:	23a29c78 bfebfcb9 a1cac083 bfebb645     x..#........E...
    4de0:	b1c432ca bfeb6e2e e5604189 bfeb22d0     .2...n...A`.."..
    4df0:	61e4f766 bfead6a1 020c49ba bfea872b     f..a.....I..+...
    4e00:	eb1c432d bfea36e2 f7ced917 bfe9e353     -C...6......S...
    4e10:	9652bd3c bfe98e21 c6a7ef9e bfe9374b     <.R.!.......K7..
    4e20:	d1b71759 bfe8de00 6e978d50 bfe88312     Y.......P..n....
    4e30:	9d495183 bfe82680 a6b50b0f bfe7c779     .QI..&......y...
    4e40:	f9096bba bfe767a0 6f0068dc bfe70481     .k...g...h.o....
    4e50:	2de00d1b bfe6a090 7e90ff97 bfe63afb     ...-.......~.:..
    4e60:	a9fbe76d bfe5d2f1 67381d7e bfe56944     m.......~.8gDi..
    4e70:	6d5cfaad bfe4fec5 4e3bcd36 bfe491d1     ..\m....6.;N....
    4e80:	c0ebedfa bfe42339 7c84b5dd bfe3b3d0     ....9#.....|....
    4e90:	12d77319 bfe341f2 f212d773 bfe2cf41     .s...A..s...A...
    4ea0:	631f8a09 bfe25aee 65fd8adb bfe1e4f7     ...c.Z.....e....
    4eb0:	faacd9e8 bfe16d5c d844d014 bfe0f4f0     ....\m....D.....
    4ec0:	47ae147b bfe07ae1 00000000 bfe00000     {..G.z..........
    4ed0:	94467382 bfdf06f6 ba5e353f bfde0c49     .sF.....?5^.I...
    4ee0:	04189375 bfdd0e56 dfa43fe6 bfdc0ebe     u...V....?......
    4ef0:	ded288ce bfdb0be0 6fd21ff3 bfda075f     ...........o_...
    4f00:	92a30553 bfd9013a 474538ef bfd7f972     S...:....8EGr...
    4f10:	8db8bac7 bfd6f006 f7ced917 bfd5e353     ............S...
    4f20:	61e4f766 bfd4d6a1 ef9db22d bfd3c6a7     f..a....-.......
    4f30:	7d566cf4 bfd2b6ae 2eb1c433 bfd1a36e     .lV}....3...n...
    4f40:	e00d1b71 bfd0902d 467381d8 bfcef694     q...-.....sF....
    4f50:	cccccccd bfcccccc 9a6b50b1 bfca9c77     .........Pk.w...
    4f60:	6809d495 bfc86c22 594af4f1 bfc63886     ...h"l....JY.8..
    4f70:	4a8c154d bfc404ea 3bcd35a8 bfc1d14e     M..J.....5.;N...
    4f80:	a161e4f7 bfbf34d6 126e978d bfbac083     ..a..4....n.....
    4f90:	3c361134 bfb652bd ad42c3ca bfb1de69     4.6<.R....B.i...
    4fa0:	cb295e9e bfaac710 ad42c3ca bfa1de69     .^).......B.i...
    4fb0:	1eb851ec bf91eb85 00000000 80000000     .Q..............
    4fc0:	1eb851ec 3f91eb85 ad42c3ca 3fa1de69     .Q.....?..B.i..?
    4fd0:	cb295e9e 3faac710 ad42c3ca 3fb1de69     .^)....?..B.i..?
    4fe0:	3c361134 3fb652bd 126e978d 3fbac083     4.6<.R.?..n....?
    4ff0:	a161e4f7 3fbf34d6 3bcd35a8 3fc1d14e     ..a..4.?.5.;N..?
    5000:	4a8c154d 3fc404ea 594af4f1 3fc63886     M..J...?..JY.8.?
    5010:	6809d495 3fc86c22 9a6b50b1 3fca9c77     ...h"l.?.Pk.w..?
    5020:	cccccccd 3fcccccc 467381d8 3fcef694     .......?..sF...?
    5030:	e00d1b71 3fd0902d 2eb1c433 3fd1a36e     q...-..?3...n..?
    5040:	7d566cf4 3fd2b6ae ef9db22d 3fd3c6a7     .lV}...?-......?
    5050:	61e4f766 3fd4d6a1 f7ced917 3fd5e353     f..a...?....S..?
    5060:	8db8bac7 3fd6f006 474538ef 3fd7f972     .......?.8EGr..?
    5070:	92a30553 3fd9013a 6fd21ff3 3fda075f     S...:..?...o_..?
    5080:	ded288ce 3fdb0be0 dfa43fe6 3fdc0ebe     .......?.?.....?
    5090:	04189375 3fdd0e56 ba5e353f 3fde0c49     u...V..??5^.I..?
    50a0:	94467382 3fdf06f6 00000000 3fe00000     .sF....?.......?
    50b0:	47ae147b 3fe07ae1 d844d014 3fe0f4f0     {..G.z.?..D....?
    50c0:	faacd9e8 3fe16d5c 65fd8adb 3fe1e4f7     ....\m.?...e...?
    50d0:	631f8a09 3fe25aee f212d773 3fe2cf41     ...c.Z.?s...A..?
    50e0:	12d77319 3fe341f2 7c84b5dd 3fe3b3d0     .s...A.?...|...?
    50f0:	c0ebedfa 3fe42339 4e3bcd36 3fe491d1     ....9#.?6.;N...?
    5100:	6d5cfaad 3fe4fec5 67381d7e 3fe56944     ..\m...?~.8gDi.?
    5110:	a9fbe76d 3fe5d2f1 7e90ff97 3fe63afb     m......?...~.:.?
    5120:	2de00d1b 3fe6a090 6f0068dc 3fe70481     ...-...?.h.o...?
    5130:	f9096bba 3fe767a0 a6b50b0f 3fe7c779     .k...g.?....y..?
    5140:	9d495183 3fe82680 6e978d50 3fe88312     .QI..&.?P..n...?
    5150:	d1b71759 3fe8de00 c6a7ef9e 3fe9374b     Y......?....K7.?
    5160:	9652bd3c 3fe98e21 f7ced917 3fe9e353     <.R.!..?....S..?
    5170:	eb1c432d 3fea36e2 020c49ba 3fea872b     -C...6.?.I..+..?
    5180:	61e4f766 3fead6a1 e5604189 3feb22d0     f..a...?.A`..".?
    5190:	b1c432ca 3feb6e2e a1cac083 3febb645     .2...n.?....E..?
    51a0:	23a29c78 3febfcb9 80346dc6 3fec40b7     x..#...?.m4..@.?
    51b0:	6e978d50 3fec8312 37b4a234 3fecc2f8     P..n...?4..7...?
    51c0:	db8bac71 3fed0068 5a1cac08 3fed3b64     q...h..?...Zd;.?
    51d0:	6a7ef9db 3fed74bc 559b3d08 3fedab9f     ..~j.t.?.=.U...?
    51e0:	1b71758e 3fede00d bc01a36e 3fee1205     .uq....?n......?
    51f0:	374bc6a8 3fee4189 4467381d 3fee6f69     ..K7.A.?.8gDio.?
    5200:	7525460b 3fee9a02 37b4a234 3feec2f8     .F%u...?4..7...?
    5210:	1de69ad4 3feee8a7 95e9e1b1 3fef0cb2     .......?.......?
    5220:	e8a71de7 3fef2e48 5f06f694 3fef4c98     ....H..?..._.L.?
    5230:	67381d7e 3fef6944 4a2339c1 3fef837b     ~.8gDi.?.9#J{..?
    5240:	07c84b5e 3fef9b3d a0275254 3fefb089     ^K..=..?TR'....?
    5250:	5c28f5c3 3fefc28f a9fbe76d 3fefd2f1     ..(\...?m......?
    5260:	d288ce70 3fefe0de d5cfaace 3fefec56     p......?....V..?
    5270:	fcb923a3 3feff487 b573eab3 3feffb15     .#.....?..s....?
    5280:	91d14e3c 3feffe5c                       <N..\..?

00005288 <SINs>:
	...
    5290:	1eb851ec 3f91eb85 ad42c3ca 3fa1de69     .Q.....?..B.i..?
    52a0:	cb295e9e 3faac710 ad42c3ca 3fb1de69     .^)....?..B.i..?
    52b0:	3c361134 3fb652bd 126e978d 3fbac083     4.6<.R.?..n....?
    52c0:	a161e4f7 3fbf34d6 3bcd35a8 3fc1d14e     ..a..4.?.5.;N..?
    52d0:	4a8c154d 3fc404ea 594af4f1 3fc63886     M..J...?..JY.8.?
    52e0:	6809d495 3fc86c22 9a6b50b1 3fca9c77     ...h"l.?.Pk.w..?
    52f0:	cccccccd 3fcccccc 467381d8 3fcef694     .......?..sF...?
    5300:	e00d1b71 3fd0902d 2eb1c433 3fd1a36e     q...-..?3...n..?
    5310:	7d566cf4 3fd2b6ae ef9db22d 3fd3c6a7     .lV}...?-......?
    5320:	61e4f766 3fd4d6a1 f7ced917 3fd5e353     f..a...?....S..?
    5330:	8db8bac7 3fd6f006 474538ef 3fd7f972     .......?.8EGr..?
    5340:	92a30553 3fd9013a 6fd21ff3 3fda075f     S...:..?...o_..?
    5350:	ded288ce 3fdb0be0 dfa43fe6 3fdc0ebe     .......?.?.....?
    5360:	04189375 3fdd0e56 ba5e353f 3fde0c49     u...V..??5^.I..?
    5370:	94467382 3fdf06f6 00000000 3fe00000     .sF....?.......?
    5380:	47ae147b 3fe07ae1 d844d014 3fe0f4f0     {..G.z.?..D....?
    5390:	faacd9e8 3fe16d5c 65fd8adb 3fe1e4f7     ....\m.?...e...?
    53a0:	631f8a09 3fe25aee f212d773 3fe2cf41     ...c.Z.?s...A..?
    53b0:	12d77319 3fe341f2 7c84b5dd 3fe3b3d0     .s...A.?...|...?
    53c0:	c0ebedfa 3fe42339 4e3bcd36 3fe491d1     ....9#.?6.;N...?
    53d0:	6d5cfaad 3fe4fec5 67381d7e 3fe56944     ..\m...?~.8gDi.?
    53e0:	a9fbe76d 3fe5d2f1 7e90ff97 3fe63afb     m......?...~.:.?
    53f0:	2de00d1b 3fe6a090 6f0068dc 3fe70481     ...-...?.h.o...?
    5400:	f9096bba 3fe767a0 a6b50b0f 3fe7c779     .k...g.?....y..?
    5410:	9d495183 3fe82680 6e978d50 3fe88312     .QI..&.?P..n...?
    5420:	d1b71759 3fe8de00 c6a7ef9e 3fe9374b     Y......?....K7.?
    5430:	9652bd3c 3fe98e21 f7ced917 3fe9e353     <.R.!..?....S..?
    5440:	eb1c432d 3fea36e2 020c49ba 3fea872b     -C...6.?.I..+..?
    5450:	61e4f766 3fead6a1 e5604189 3feb22d0     f..a...?.A`..".?
    5460:	b1c432ca 3feb6e2e a1cac083 3febb645     .2...n.?....E..?
    5470:	23a29c78 3febfcb9 80346dc6 3fec40b7     x..#...?.m4..@.?
    5480:	6e978d50 3fec8312 37b4a234 3fecc2f8     P..n...?4..7...?
    5490:	db8bac71 3fed0068 5a1cac08 3fed3b64     q...h..?...Zd;.?
    54a0:	6a7ef9db 3fed74bc 559b3d08 3fedab9f     ..~j.t.?.=.U...?
    54b0:	1b71758e 3fede00d bc01a36e 3fee1205     .uq....?n......?
    54c0:	374bc6a8 3fee4189 4467381d 3fee6f69     ..K7.A.?.8gDio.?
    54d0:	7525460b 3fee9a02 37b4a234 3feec2f8     .F%u...?4..7...?
    54e0:	1de69ad4 3feee8a7 95e9e1b1 3fef0cb2     .......?.......?
    54f0:	e8a71de7 3fef2e48 5f06f694 3fef4c98     ....H..?..._.L.?
    5500:	67381d7e 3fef6944 4a2339c1 3fef837b     ~.8gDi.?.9#J{..?
    5510:	07c84b5e 3fef9b3d a0275254 3fefb089     ^K..=..?TR'....?
    5520:	5c28f5c3 3fefc28f a9fbe76d 3fefd2f1     ..(\...?m......?
    5530:	d288ce70 3fefe0de d5cfaace 3fefec56     p......?....V..?
    5540:	fcb923a3 3feff487 b573eab3 3feffb15     .#.....?..s....?
    5550:	91d14e3c 3feffe5c 00000000 3ff00000     <N..\..?.......?
    5560:	91d14e3c 3feffe5c b573eab3 3feffb15     <N..\..?..s....?
    5570:	fcb923a3 3feff487 d5cfaace 3fefec56     .#.....?....V..?
    5580:	d288ce70 3fefe0de a9fbe76d 3fefd2f1     p......?m......?
    5590:	5c28f5c3 3fefc28f a0275254 3fefb089     ..(\...?TR'....?
    55a0:	07c84b5e 3fef9b3d 4a2339c1 3fef837b     ^K..=..?.9#J{..?
    55b0:	67381d7e 3fef6944 5f06f694 3fef4c98     ~.8gDi.?..._.L.?
    55c0:	e8a71de7 3fef2e48 95e9e1b1 3fef0cb2     ....H..?.......?
    55d0:	1de69ad4 3feee8a7 37b4a234 3feec2f8     .......?4..7...?
    55e0:	7525460b 3fee9a02 4467381d 3fee6f69     .F%u...?.8gDio.?
    55f0:	374bc6a8 3fee4189 bc01a36e 3fee1205     ..K7.A.?n......?
    5600:	1b71758e 3fede00d 559b3d08 3fedab9f     .uq....?.=.U...?
    5610:	6a7ef9db 3fed74bc 5a1cac08 3fed3b64     ..~j.t.?...Zd;.?
    5620:	db8bac71 3fed0068 37b4a234 3fecc2f8     q...h..?4..7...?
    5630:	6e978d50 3fec8312 80346dc6 3fec40b7     P..n...?.m4..@.?
    5640:	23a29c78 3febfcb9 a1cac083 3febb645     x..#...?....E..?
    5650:	b1c432ca 3feb6e2e e5604189 3feb22d0     .2...n.?.A`..".?
    5660:	61e4f766 3fead6a1 020c49ba 3fea872b     f..a...?.I..+..?
    5670:	eb1c432d 3fea36e2 f7ced917 3fe9e353     -C...6.?....S..?
    5680:	9652bd3c 3fe98e21 c6a7ef9e 3fe9374b     <.R.!..?....K7.?
    5690:	d1b71759 3fe8de00 6e978d50 3fe88312     Y......?P..n...?
    56a0:	9d495183 3fe82680 a6b50b0f 3fe7c779     .QI..&.?....y..?
    56b0:	f9096bba 3fe767a0 6f0068dc 3fe70481     .k...g.?.h.o...?
    56c0:	2de00d1b 3fe6a090 7e90ff97 3fe63afb     ...-...?...~.:.?
    56d0:	a9fbe76d 3fe5d2f1 67381d7e 3fe56944     m......?~.8gDi.?
    56e0:	6d5cfaad 3fe4fec5 4e3bcd36 3fe491d1     ..\m...?6.;N...?
    56f0:	c0ebedfa 3fe42339 7c84b5dd 3fe3b3d0     ....9#.?...|...?
    5700:	12d77319 3fe341f2 f212d773 3fe2cf41     .s...A.?s...A..?
    5710:	631f8a09 3fe25aee 65fd8adb 3fe1e4f7     ...c.Z.?...e...?
    5720:	faacd9e8 3fe16d5c d844d014 3fe0f4f0     ....\m.?..D....?
    5730:	47ae147b 3fe07ae1 00000000 3fe00000     {..G.z.?.......?
    5740:	94467382 3fdf06f6 ba5e353f 3fde0c49     .sF....??5^.I..?
    5750:	04189375 3fdd0e56 dfa43fe6 3fdc0ebe     u...V..?.?.....?
    5760:	ded288ce 3fdb0be0 6fd21ff3 3fda075f     .......?...o_..?
    5770:	92a30553 3fd9013a 474538ef 3fd7f972     S...:..?.8EGr..?
    5780:	8db8bac7 3fd6f006 f7ced917 3fd5e353     .......?....S..?
    5790:	61e4f766 3fd4d6a1 ef9db22d 3fd3c6a7     f..a...?-......?
    57a0:	7d566cf4 3fd2b6ae 2eb1c433 3fd1a36e     .lV}...?3...n..?
    57b0:	e00d1b71 3fd0902d 467381d8 3fcef694     q...-..?..sF...?
    57c0:	cccccccd 3fcccccc 9a6b50b1 3fca9c77     .......?.Pk.w..?
    57d0:	6809d495 3fc86c22 594af4f1 3fc63886     ...h"l.?..JY.8.?
    57e0:	4a8c154d 3fc404ea 3bcd35a8 3fc1d14e     M..J...?.5.;N..?
    57f0:	a161e4f7 3fbf34d6 126e978d 3fbac083     ..a..4.?..n....?
    5800:	3c361134 3fb652bd ad42c3ca 3fb1de69     4.6<.R.?..B.i..?
    5810:	cb295e9e 3faac710 ad42c3ca 3fa1de69     .^)....?..B.i..?
    5820:	1eb851ec 3f91eb85 00000000 00000000     .Q.....?........
    5830:	1eb851ec bf91eb85 ad42c3ca bfa1de69     .Q........B.i...
    5840:	cb295e9e bfaac710 ad42c3ca bfb1de69     .^).......B.i...
    5850:	3c361134 bfb652bd 126e978d bfbac083     4.6<.R....n.....
    5860:	a161e4f7 bfbf34d6 3bcd35a8 bfc1d14e     ..a..4...5.;N...
    5870:	4a8c154d bfc404ea 594af4f1 bfc63886     M..J......JY.8..
    5880:	6809d495 bfc86c22 9a6b50b1 bfca9c77     ...h"l...Pk.w...
    5890:	cccccccd bfcccccc 467381d8 bfcef694     ..........sF....
    58a0:	e00d1b71 bfd0902d 2eb1c433 bfd1a36e     q...-...3...n...
    58b0:	7d566cf4 bfd2b6ae ef9db22d bfd3c6a7     .lV}....-.......
    58c0:	61e4f766 bfd4d6a1 f7ced917 bfd5e353     f..a........S...
    58d0:	8db8bac7 bfd6f006 474538ef bfd7f972     .........8EGr...
    58e0:	92a30553 bfd9013a 6fd21ff3 bfda075f     S...:......o_...
    58f0:	ded288ce bfdb0be0 dfa43fe6 bfdc0ebe     .........?......
    5900:	04189375 bfdd0e56 ba5e353f bfde0c49     u...V...?5^.I...
    5910:	94467382 bfdf06f6 00000000 bfe00000     .sF.............
    5920:	47ae147b bfe07ae1 d844d014 bfe0f4f0     {..G.z....D.....
    5930:	faacd9e8 bfe16d5c 65fd8adb bfe1e4f7     ....\m.....e....
    5940:	631f8a09 bfe25aee f212d773 bfe2cf41     ...c.Z..s...A...
    5950:	12d77319 bfe341f2 7c84b5dd bfe3b3d0     .s...A.....|....
    5960:	c0ebedfa bfe42339 4e3bcd36 bfe491d1     ....9#..6.;N....
    5970:	6d5cfaad bfe4fec5 67381d7e bfe56944     ..\m....~.8gDi..
    5980:	a9fbe76d bfe5d2f1 7e90ff97 bfe63afb     m..........~.:..
    5990:	2de00d1b bfe6a090 6f0068dc bfe70481     ...-.....h.o....
    59a0:	f9096bba bfe767a0 a6b50b0f bfe7c779     .k...g......y...
    59b0:	9d495183 bfe82680 6e978d50 bfe88312     .QI..&..P..n....
    59c0:	d1b71759 bfe8de00 c6a7ef9e bfe9374b     Y...........K7..
    59d0:	9652bd3c bfe98e21 f7ced917 bfe9e353     <.R.!.......S...
    59e0:	eb1c432d bfea36e2 020c49ba bfea872b     -C...6...I..+...
    59f0:	61e4f766 bfead6a1 e5604189 bfeb22d0     f..a.....A`.."..
    5a00:	b1c432ca bfeb6e2e a1cac083 bfebb645     .2...n......E...
    5a10:	23a29c78 bfebfcb9 80346dc6 bfec40b7     x..#.....m4..@..
    5a20:	6e978d50 bfec8312 37b4a234 bfecc2f8     P..n....4..7....
    5a30:	db8bac71 bfed0068 5a1cac08 bfed3b64     q...h......Zd;..
    5a40:	6a7ef9db bfed74bc 559b3d08 bfedab9f     ..~j.t...=.U....
    5a50:	1b71758e bfede00d bc01a36e bfee1205     .uq.....n.......
    5a60:	374bc6a8 bfee4189 4467381d bfee6f69     ..K7.A...8gDio..
    5a70:	7525460b bfee9a02 37b4a234 bfeec2f8     .F%u....4..7....
    5a80:	1de69ad4 bfeee8a7 95e9e1b1 bfef0cb2     ................
    5a90:	e8a71de7 bfef2e48 5f06f694 bfef4c98     ....H......_.L..
    5aa0:	67381d7e bfef6944 4a2339c1 bfef837b     ~.8gDi...9#J{...
    5ab0:	07c84b5e bfef9b3d a0275254 bfefb089     ^K..=...TR'.....
    5ac0:	5c28f5c3 bfefc28f a9fbe76d bfefd2f1     ..(\....m.......
    5ad0:	d288ce70 bfefe0de d5cfaace bfefec56     p...........V...
    5ae0:	fcb923a3 bfeff487 b573eab3 bfeffb15     .#........s.....
    5af0:	91d14e3c bfeffe5c 00000000 bff00000     <N..\...........
    5b00:	91d14e3c bfeffe5c b573eab3 bfeffb15     <N..\.....s.....
    5b10:	fcb923a3 bfeff487 d5cfaace bfefec56     .#..........V...
    5b20:	d288ce70 bfefe0de a9fbe76d bfefd2f1     p.......m.......
    5b30:	5c28f5c3 bfefc28f a0275254 bfefb089     ..(\....TR'.....
    5b40:	07c84b5e bfef9b3d 4a2339c1 bfef837b     ^K..=....9#J{...
    5b50:	67381d7e bfef6944 5f06f694 bfef4c98     ~.8gDi....._.L..
    5b60:	e8a71de7 bfef2e48 95e9e1b1 bfef0cb2     ....H...........
    5b70:	1de69ad4 bfeee8a7 37b4a234 bfeec2f8     ........4..7....
    5b80:	7525460b bfee9a02 4467381d bfee6f69     .F%u.....8gDio..
    5b90:	374bc6a8 bfee4189 bc01a36e bfee1205     ..K7.A..n.......
    5ba0:	1b71758e bfede00d 559b3d08 bfedab9f     .uq......=.U....
    5bb0:	6a7ef9db bfed74bc 5a1cac08 bfed3b64     ..~j.t.....Zd;..
    5bc0:	db8bac71 bfed0068 37b4a234 bfecc2f8     q...h...4..7....
    5bd0:	6e978d50 bfec8312 80346dc6 bfec40b7     P..n.....m4..@..
    5be0:	23a29c78 bfebfcb9 a1cac083 bfebb645     x..#........E...
    5bf0:	b1c432ca bfeb6e2e e5604189 bfeb22d0     .2...n...A`.."..
    5c00:	61e4f766 bfead6a1 020c49ba bfea872b     f..a.....I..+...
    5c10:	eb1c432d bfea36e2 f7ced917 bfe9e353     -C...6......S...
    5c20:	9652bd3c bfe98e21 c6a7ef9e bfe9374b     <.R.!.......K7..
    5c30:	d1b71759 bfe8de00 6e978d50 bfe88312     Y.......P..n....
    5c40:	9d495183 bfe82680 a6b50b0f bfe7c779     .QI..&......y...
    5c50:	f9096bba bfe767a0 6f0068dc bfe70481     .k...g...h.o....
    5c60:	2de00d1b bfe6a090 7e90ff97 bfe63afb     ...-.......~.:..
    5c70:	a9fbe76d bfe5d2f1 67381d7e bfe56944     m.......~.8gDi..
    5c80:	6d5cfaad bfe4fec5 4e3bcd36 bfe491d1     ..\m....6.;N....
    5c90:	c0ebedfa bfe42339 7c84b5dd bfe3b3d0     ....9#.....|....
    5ca0:	12d77319 bfe341f2 f212d773 bfe2cf41     .s...A..s...A...
    5cb0:	631f8a09 bfe25aee 65fd8adb bfe1e4f7     ...c.Z.....e....
    5cc0:	faacd9e8 bfe16d5c d844d014 bfe0f4f0     ....\m....D.....
    5cd0:	47ae147b bfe07ae1 00000000 bfe00000     {..G.z..........
    5ce0:	94467382 bfdf06f6 ba5e353f bfde0c49     .sF.....?5^.I...
    5cf0:	04189375 bfdd0e56 dfa43fe6 bfdc0ebe     u...V....?......
    5d00:	ded288ce bfdb0be0 6fd21ff3 bfda075f     ...........o_...
    5d10:	92a30553 bfd9013a 474538ef bfd7f972     S...:....8EGr...
    5d20:	8db8bac7 bfd6f006 f7ced917 bfd5e353     ............S...
    5d30:	61e4f766 bfd4d6a1 ef9db22d bfd3c6a7     f..a....-.......
    5d40:	7d566cf4 bfd2b6ae 2eb1c433 bfd1a36e     .lV}....3...n...
    5d50:	e00d1b71 bfd0902d 467381d8 bfcef694     q...-.....sF....
    5d60:	cccccccd bfcccccc 9a6b50b1 bfca9c77     .........Pk.w...
    5d70:	6809d495 bfc86c22 594af4f1 bfc63886     ...h"l....JY.8..
    5d80:	4a8c154d bfc404ea 3bcd35a8 bfc1d14e     M..J.....5.;N...
    5d90:	a161e4f7 bfbf34d6 126e978d bfbac083     ..a..4....n.....
    5da0:	3c361134 bfb652bd ad42c3ca bfb1de69     4.6<.R....B.i...
    5db0:	cb295e9e bfaac710 ad42c3ca bfa1de69     .^).......B.i...
    5dc0:	1eb851ec bf91eb85                       .Q......

00005dc8 <SIN_large>:
    5dc8:	00000000 00000477 000008ef 00000d65     ....w.......e...
    5dd8:	000011db 0000164f 00001ac2 00001f32     ....O.......2...
    5de8:	000023a0 0000280c 00002c74 000030d8     .#...(..t,...0..
    5df8:	00003539 00003996 00003dee 00004241     95...9...=..AB..
    5e08:	00004690 00004ad8 00004f1b 00005358     .F...J...O..XS..
    5e18:	0000578e 00005bbe 00005fe6 00006406     .W...[..._...d..
    5e28:	0000681f 00006c30 00007039 00007438     .h..0l..9p..8t..
    5e38:	0000782f 00007c1c 00007fff 000083d9     /x...|..........
    5e48:	000087a8 00008b6d 00008f27 000092d5     ....m...'.......
    5e58:	00009679 00009a10 00009d9b 0000a11b     y...............
    5e68:	0000a48d 0000a7f3 0000ab4c 0000ae97     ........L.......
    5e78:	0000b1d5 0000b504 0000b826 0000bb39     ........&...9...
    5e88:	0000be3e 0000c134 0000c41b 0000c6f3     >...4...........
    5e98:	0000c9bb 0000cc73 0000cf1b 0000d1b3     ....s...........
    5ea8:	0000d43b 0000d6b3 0000d919 0000db6f     ;...........o...
    5eb8:	0000ddb3 0000dfe7 0000e208 0000e419     ................
    5ec8:	0000e617 0000e803 0000e9de 0000eba6     ................
    5ed8:	0000ed5b 0000eeff 0000f08f 0000f20d     [...............
    5ee8:	0000f378 0000f4d0 0000f615 0000f746     x...........F...
    5ef8:	0000f865 0000f970 0000fa67 0000fb4b     e...p...g...K...
    5f08:	0000fc1c 0000fcd9 0000fd82 0000fe17     ................
    5f18:	0000fe98 0000ff06 0000ff60 0000ffa6     ........`.......
    5f28:	0000ffd8 0000fff6 00010000 0000fff6     ................
    5f38:	0000ffd8 0000ffa6 0000ff60 0000ff06     ........`.......
    5f48:	0000fe98 0000fe17 0000fd82 0000fcd9     ................
    5f58:	0000fc1c 0000fb4b 0000fa67 0000f970     ....K...g...p...
    5f68:	0000f865 0000f746 0000f615 0000f4d0     e...F...........
    5f78:	0000f378 0000f20d 0000f08f 0000eeff     x...............
    5f88:	0000ed5b 0000eba6 0000e9de 0000e803     [...............
    5f98:	0000e617 0000e419 0000e208 0000dfe7     ................
    5fa8:	0000ddb3 0000db6f 0000d919 0000d6b3     ....o...........
    5fb8:	0000d43b 0000d1b3 0000cf1b 0000cc73     ;...........s...
    5fc8:	0000c9bb 0000c6f3 0000c41b 0000c134     ............4...
    5fd8:	0000be3e 0000bb39 0000b826 0000b504     >...9...&.......
    5fe8:	0000b1d5 0000ae97 0000ab4c 0000a7f3     ........L.......
    5ff8:	0000a48d 0000a11b 00009d9b 00009a10     ................
    6008:	00009679 000092d5 00008f27 00008b6d     y.......'...m...
    6018:	000087a8 000083d9 00007fff 00007c1c     .............|..
    6028:	0000782f 00007438 00007039 00006c30     /x..8t..9p..0l..
    6038:	0000681f 00006406 00005fe6 00005bbe     .h...d..._...[..
    6048:	0000578e 00005358 00004f1b 00004ad8     .W..XS...O...J..
    6058:	00004690 00004241 00003dee 00003996     .F..AB...=...9..
    6068:	00003539 000030d8 00002c74 0000280c     95...0..t,...(..
    6078:	000023a0 00001f32 00001ac2 0000164f     .#..2.......O...
    6088:	000011db 00000d65 000008ef 00000477     ....e.......w...
    6098:	00000000 fffffb89 fffff711 fffff29b     ................
    60a8:	ffffee25 ffffe9b1 ffffe53e ffffe0ce     %.......>.......
    60b8:	ffffdc60 ffffd7f4 ffffd38c ffffcf28     `...........(...
    60c8:	ffffcac7 ffffc66a ffffc212 ffffbdbf     ....j...........
    60d8:	ffffb970 ffffb528 ffffb0e5 ffffaca8     p...(...........
    60e8:	ffffa872 ffffa442 ffffa01a ffff9bfa     r...B...........
    60f8:	ffff97e1 ffff93d0 ffff8fc7 ffff8bc8     ................
    6108:	ffff87d1 ffff83e4 ffff8000 ffff7c27     ............'|..
    6118:	ffff7858 ffff7493 ffff70d9 ffff6d2b     Xx...t...p..+m..
    6128:	ffff6987 ffff65f0 ffff6265 ffff5ee5     .i...e..eb...^..
    6138:	ffff5b73 ffff580d ffff54b4 ffff5169     s[...X...T..iQ..
    6148:	ffff4e2b ffff4afc ffff47da ffff44c7     +N...J...G...D..
    6158:	ffff41c2 ffff3ecc ffff3be5 ffff390d     .A...>...;...9..
    6168:	ffff3645 ffff338d ffff30e5 ffff2e4d     E6...3...0..M...
    6178:	ffff2bc5 ffff294d ffff26e7 ffff2491     .+..M)...&...$..
    6188:	ffff224d ffff2019 ffff1df8 ffff1be7     M"... ..........
    6198:	ffff19e9 ffff17fd ffff1622 ffff145a     ........"...Z...
    61a8:	ffff12a5 ffff1101 ffff0f71 ffff0df3     ........q.......
    61b8:	ffff0c88 ffff0b30 ffff09eb ffff08ba     ....0...........
    61c8:	ffff079b ffff0690 ffff0599 ffff04b5     ................
    61d8:	ffff03e4 ffff0327 ffff027e ffff01e9     ....'...~.......
    61e8:	ffff0168 ffff00fa ffff00a0 ffff005a     h...........Z...
    61f8:	ffff0028 ffff000a ffff0000 ffff000a     (...............
    6208:	ffff0028 ffff005a ffff00a0 ffff00fa     (...Z...........
    6218:	ffff0168 ffff01e9 ffff027e ffff0327     h.......~...'...
    6228:	ffff03e4 ffff04b5 ffff0599 ffff0690     ................
    6238:	ffff079b ffff08ba ffff09eb ffff0b30     ............0...
    6248:	ffff0c88 ffff0df3 ffff0f71 ffff1101     ........q.......
    6258:	ffff12a5 ffff145a ffff1622 ffff17fd     ....Z...".......
    6268:	ffff19e9 ffff1be7 ffff1df8 ffff2019     ............. ..
    6278:	ffff224d ffff2491 ffff26e7 ffff294d     M"...$...&..M)..
    6288:	ffff2bc5 ffff2e4d ffff30e5 ffff338d     .+..M....0...3..
    6298:	ffff3645 ffff390d ffff3be5 ffff3ecc     E6...9...;...>..
    62a8:	ffff41c2 ffff44c7 ffff47da ffff4afc     .A...D...G...J..
    62b8:	ffff4e2b ffff5169 ffff54b4 ffff580d     +N..iQ...T...X..
    62c8:	ffff5b73 ffff5ee5 ffff6265 ffff65f0     s[...^..eb...e..
    62d8:	ffff6987 ffff6d2b ffff70d9 ffff7493     .i..+m...p...t..
    62e8:	ffff7858 ffff7c27 ffff8000 ffff83e4     Xx..'|..........
    62f8:	ffff87d1 ffff8bc8 ffff8fc7 ffff93d0     ................
    6308:	ffff97e1 ffff9bfa ffffa01a ffffa442     ............B...
    6318:	ffffa872 ffffaca8 ffffb0e5 ffffb528     r...........(...
    6328:	ffffb970 ffffbdbf ffffc212 ffffc66a     p...........j...
    6338:	ffffcac7 ffffcf28 ffffd38c ffffd7f4     ....(...........
    6348:	ffffdc60 ffffe0ce ffffe53e ffffe9b1     `.......>.......
    6358:	ffffee25 fffff29b fffff711 fffffb89     %...............

00006368 <COS_large>:
    6368:	00010000 0000fff6 0000ffd8 0000ffa6     ................
    6378:	0000ff60 0000ff06 0000fe98 0000fe17     `...............
    6388:	0000fd82 0000fcd9 0000fc1c 0000fb4b     ............K...
    6398:	0000fa67 0000f970 0000f865 0000f746     g...p...e...F...
    63a8:	0000f615 0000f4d0 0000f378 0000f20d     ........x.......
    63b8:	0000f08f 0000eeff 0000ed5b 0000eba6     ........[.......
    63c8:	0000e9de 0000e803 0000e617 0000e419     ................
    63d8:	0000e208 0000dfe7 0000ddb3 0000db6f     ............o...
    63e8:	0000d919 0000d6b3 0000d43b 0000d1b3     ........;.......
    63f8:	0000cf1b 0000cc73 0000c9bb 0000c6f3     ....s...........
    6408:	0000c41b 0000c134 0000be3e 0000bb39     ....4...>...9...
    6418:	0000b826 0000b504 0000b1d5 0000ae97     &...............
    6428:	0000ab4c 0000a7f3 0000a48d 0000a11b     L...............
    6438:	00009d9b 00009a10 00009679 000092d5     ........y.......
    6448:	00008f27 00008b6d 000087a8 000083d9     '...m...........
    6458:	00008000 00007c1c 0000782f 00007438     .....|../x..8t..
    6468:	00007039 00006c30 0000681f 00006406     9p..0l...h...d..
    6478:	00005fe6 00005bbe 0000578e 00005358     ._...[...W..XS..
    6488:	00004f1b 00004ad8 00004690 00004241     .O...J...F..AB..
    6498:	00003dee 00003996 00003539 000030d8     .=...9..95...0..
    64a8:	00002c74 0000280c 000023a0 00001f32     t,...(...#..2...
    64b8:	00001ac2 0000164f 000011db 00000d65     ....O.......e...
    64c8:	000008ef 00000477 00000000 fffffb89     ....w...........
    64d8:	fffff711 fffff29b ffffee25 ffffe9b1     ........%.......
    64e8:	ffffe53e ffffe0ce ffffdc60 ffffd7f4     >.......`.......
    64f8:	ffffd38c ffffcf28 ffffcac7 ffffc66a     ....(.......j...
    6508:	ffffc212 ffffbdbf ffffb970 ffffb528     ........p...(...
    6518:	ffffb0e5 ffffaca8 ffffa872 ffffa442     ........r...B...
    6528:	ffffa01a ffff9bfa ffff97e1 ffff93d0     ................
    6538:	ffff8fc7 ffff8bc8 ffff87d1 ffff83e4     ................
    6548:	ffff8001 ffff7c27 ffff7858 ffff7493     ....'|..Xx...t..
    6558:	ffff70d9 ffff6d2b ffff6987 ffff65f0     .p..+m...i...e..
    6568:	ffff6265 ffff5ee5 ffff5b73 ffff580d     eb...^..s[...X..
    6578:	ffff54b4 ffff5169 ffff4e2b ffff4afc     .T..iQ..+N...J..
    6588:	ffff47da ffff44c7 ffff41c2 ffff3ecc     .G...D...A...>..
    6598:	ffff3be5 ffff390d ffff3645 ffff338d     .;...9..E6...3..
    65a8:	ffff30e5 ffff2e4d ffff2bc5 ffff294d     .0..M....+..M)..
    65b8:	ffff26e7 ffff2491 ffff224d ffff2019     .&...$..M"... ..
    65c8:	ffff1df8 ffff1be7 ffff19e9 ffff17fd     ................
    65d8:	ffff1622 ffff145a ffff12a5 ffff1101     "...Z...........
    65e8:	ffff0f71 ffff0df3 ffff0c88 ffff0b30     q...........0...
    65f8:	ffff09eb ffff08ba ffff079b ffff0690     ................
    6608:	ffff0599 ffff04b5 ffff03e4 ffff0327     ............'...
    6618:	ffff027e ffff01e9 ffff0168 ffff00fa     ~.......h.......
    6628:	ffff00a0 ffff005a ffff0028 ffff000a     ....Z...(.......
    6638:	ffff0000 ffff000a ffff0028 ffff005a     ........(...Z...
    6648:	ffff00a0 ffff00fa ffff0168 ffff01e9     ........h.......
    6658:	ffff027e ffff0327 ffff03e4 ffff04b5     ~...'...........
    6668:	ffff0599 ffff0690 ffff079b ffff08ba     ................
    6678:	ffff09eb ffff0b30 ffff0c88 ffff0df3     ....0...........
    6688:	ffff0f71 ffff1101 ffff12a5 ffff145a     q...........Z...
    6698:	ffff1622 ffff17fd ffff19e9 ffff1be7     "...............
    66a8:	ffff1df8 ffff2019 ffff224d ffff2491     ..... ..M"...$..
    66b8:	ffff26e7 ffff294d ffff2bc5 ffff2e4d     .&..M)...+..M...
    66c8:	ffff30e5 ffff338d ffff3645 ffff390d     .0...3..E6...9..
    66d8:	ffff3be5 ffff3ecc ffff41c2 ffff44c7     .;...>...A...D..
    66e8:	ffff47da ffff4afc ffff4e2b ffff5169     .G...J..+N..iQ..
    66f8:	ffff54b4 ffff580d ffff5b73 ffff5ee5     .T...X..s[...^..
    6708:	ffff6265 ffff65f0 ffff6987 ffff6d2b     eb...e...i..+m..
    6718:	ffff70d9 ffff7493 ffff7858 ffff7c27     .p...t..Xx..'|..
    6728:	ffff8000 ffff83e4 ffff87d1 ffff8bc8     ................
    6738:	ffff8fc7 ffff93d0 ffff97e1 ffff9bfa     ................
    6748:	ffffa01a ffffa442 ffffa872 ffffaca8     ....B...r.......
    6758:	ffffb0e5 ffffb528 ffffb970 ffffbdbf     ....(...p.......
    6768:	ffffc212 ffffc66a ffffcac7 ffffcf28     ....j.......(...
    6778:	ffffd38c ffffd7f4 ffffdc60 ffffe0ce     ........`.......
    6788:	ffffe53e ffffe9b1 ffffee25 fffff29b     >.......%.......
    6798:	fffff711 fffffb89 00000000 00000477     ............w...
    67a8:	000008ef 00000d65 000011db 0000164f     ....e.......O...
    67b8:	00001ac2 00001f32 000023a0 0000280c     ....2....#...(..
    67c8:	00002c74 000030d8 00003539 00003996     t,...0..95...9..
    67d8:	00003dee 00004241 00004690 00004ad8     .=..AB...F...J..
    67e8:	00004f1b 00005358 0000578e 00005bbe     .O..XS...W...[..
    67f8:	00005fe6 00006406 0000681f 00006c30     ._...d...h..0l..
    6808:	00007039 00007438 0000782f 00007c1c     9p..8t../x...|..
    6818:	00008000 000083d9 000087a8 00008b6d     ............m...
    6828:	00008f27 000092d5 00009679 00009a10     '.......y.......
    6838:	00009d9b 0000a11b 0000a48d 0000a7f3     ................
    6848:	0000ab4c 0000ae97 0000b1d5 0000b504     L...............
    6858:	0000b826 0000bb39 0000be3e 0000c134     &...9...>...4...
    6868:	0000c41b 0000c6f3 0000c9bb 0000cc73     ............s...
    6878:	0000cf1b 0000d1b3 0000d43b 0000d6b3     ........;.......
    6888:	0000d919 0000db6f 0000ddb3 0000dfe7     ....o...........
    6898:	0000e208 0000e419 0000e617 0000e803     ................
    68a8:	0000e9de 0000eba6 0000ed5b 0000eeff     ........[.......
    68b8:	0000f08f 0000f20d 0000f378 0000f4d0     ........x.......
    68c8:	0000f615 0000f746 0000f865 0000f970     ....F...e...p...
    68d8:	0000fa67 0000fb4b 0000fc1c 0000fcd9     g...K...........
    68e8:	0000fd82 0000fe17 0000fe98 0000ff06     ................
    68f8:	0000ff60 0000ffa6 0000ffd8 0000fff6     `...............
    6908:	74727173 00000000                       sqrt....

00006910 <_global_impure_ptr>:
    6910:	000069d8 00000043                       .i..C...

00006918 <_init>:
    6918:	e1a0c00d 	mov	r12, sp
    691c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6920:	e24cb004 	sub	r11, r12, #4
    6924:	e24bd028 	sub	sp, r11, #40	; 0x28
    6928:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    692c:	e12fff1e 	bx	lr

00006930 <__init_array_start>:
    6930:	00004594 	.word	0x00004594

00006934 <__frame_dummy_init_array_entry>:
    6934:	00000208                                ....

00006938 <__libc_fini>:
    6938:	e1a0c00d 	mov	r12, sp
    693c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6940:	e24cb004 	sub	r11, r12, #4
    6944:	e24bd028 	sub	sp, r11, #40	; 0x28
    6948:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    694c:	e12fff1e 	bx	lr

00006950 <__fini_array_start>:
    6950:	000001c4 	.word	0x000001c4

00006954 <__cs3_regions>:
	...
    6960:	00006e08 	.word	0x00006e08
    6964:	00009c80 	.word	0x00009c80
