
E:/ece243/project/ece243project/realone/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 08 57 00 00 0c 57 00 00 10 57 00 00     @....W...W...W..
      30:	14 57 00 00 04 57 00 00 18 57 00 00 1c 57 00 00     .W...W...W...W..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb001571 	bl	56a0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00007de0 	.word	0x00007de0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00008278 	.word	0x00008278

00000124 <__cs3_heap_start_ptr>:
     124:	00011f10 	.word	0x00011f10

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00008280 	.word	0x00008280
     170:	00008283 	.word	0x00008283
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00008280 	.word	0x00008280
     1bc:	00008280 	.word	0x00008280
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00008280 	.word	0x00008280
     200:	00000000 	.word	0x00000000
     204:	000057a8 	.word	0x000057a8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000057a8 	.word	0x000057a8
     250:	00008284 	.word	0x00008284
     254:	00007de0 	.word	0x00007de0
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "tests/tests.h"

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
    // led_test();
    // uart_test();
    //audio_test();
    // hex_test();
     audio_transform_test();
     264:	eb0003b8 	bl	114c <audio_transform_test>
    //display_test();
    // color_test();

    for (;;); 
     268:	eafffffe 	b	268 <main+0xc>

0000026c <VIS_ERROR_Handler>:
#include "values.h"
void VIS_ERROR_Handler() {
     26c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     270:	e28db000 	add	r11, sp, #0
    // if error happens, stop here
    for (;;);
     274:	eafffffe 	b	274 <VIS_ERROR_Handler+0x8>

00000278 <VIS_Uart_TxChar>:
#include "JTAG_UART.h"

static volatile int * red_LED_ptr = (int *)0xFF200000;
const char intToChar[10] = {'0','1','2','3','4','5','6','7','8','9'};  

void VIS_Uart_TxChar(volatile int * JTAG_UART_ptr, char c) {
     278:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     27c:	e28db000 	add	r11, sp, #0
     280:	e24dd00c 	sub	sp, sp, #12
     284:	e50b0008 	str	r0, [r11, #-8]
     288:	e1a03001 	mov	r3, r1
     28c:	e54b3009 	strb	r3, [r11, #-9]
    *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     290:	e3073de8 	movw	r3, #32232	; 0x7de8
     294:	e3403000 	movt	r3, #0
     298:	e5933000 	ldr	r3, [r3]
     29c:	e3a02001 	mov	r2, #1
     2a0:	e5832000 	str	r2, [r3]
    while (!((*(JTAG_UART_ptr + 1)) & 0xFFFF0000)) {
     2a4:	e1a00000 	nop			; (mov r0, r0)
     2a8:	e51b3008 	ldr	r3, [r11, #-8]
     2ac:	e2833004 	add	r3, r3, #4
     2b0:	e5933000 	ldr	r3, [r3]
     2b4:	e1a03823 	lsr	r3, r3, #16
     2b8:	e1a03803 	lsl	r3, r3, #16
     2bc:	e3530000 	cmp	r3, #0
     2c0:	0afffff8 	beq	2a8 <VIS_Uart_TxChar+0x30>
        // if space, echo character, else wait
    } 
    *(JTAG_UART_ptr) = c;
     2c4:	e55b2009 	ldrb	r2, [r11, #-9]
     2c8:	e51b3008 	ldr	r3, [r11, #-8]
     2cc:	e5832000 	str	r2, [r3]
    *(red_LED_ptr) = 0x0; // turn off LEDR[0]
     2d0:	e3073de8 	movw	r3, #32232	; 0x7de8
     2d4:	e3403000 	movt	r3, #0
     2d8:	e5933000 	ldr	r3, [r3]
     2dc:	e3a02000 	mov	r2, #0
     2e0:	e5832000 	str	r2, [r3]
}
     2e4:	e28bd000 	add	sp, r11, #0
     2e8:	e8bd0800 	ldmfd	sp!, {r11}
     2ec:	e12fff1e 	bx	lr

000002f0 <VIS_Uart_Tx>:

void VIS_Uart_Tx(volatile int * JTAG_UART_ptr, char * s, int size) {
     2f0:	e92d4800 	push	{r11, lr}
     2f4:	e28db004 	add	r11, sp, #4
     2f8:	e24dd018 	sub	sp, sp, #24
     2fc:	e50b0010 	str	r0, [r11, #-16]
     300:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
     304:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    
    for (int i = 0; i < size; i++)
     308:	e3a03000 	mov	r3, #0
     30c:	e50b3008 	str	r3, [r11, #-8]
     310:	ea000009 	b	33c <VIS_Uart_Tx+0x4c>
        VIS_Uart_TxChar(JTAG_UART_ptr, s[i]);
     314:	e51b3008 	ldr	r3, [r11, #-8]
     318:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     31c:	e0823003 	add	r3, r2, r3
     320:	e5d33000 	ldrb	r3, [r3]
     324:	e51b0010 	ldr	r0, [r11, #-16]
     328:	e1a01003 	mov	r1, r3
     32c:	ebffffd1 	bl	278 <VIS_Uart_TxChar>
    *(red_LED_ptr) = 0x0; // turn off LEDR[0]
}

void VIS_Uart_Tx(volatile int * JTAG_UART_ptr, char * s, int size) {
    
    for (int i = 0; i < size; i++)
     330:	e51b3008 	ldr	r3, [r11, #-8]
     334:	e2833001 	add	r3, r3, #1
     338:	e50b3008 	str	r3, [r11, #-8]
     33c:	e51b2008 	ldr	r2, [r11, #-8]
     340:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     344:	e1520003 	cmp	r2, r3
     348:	bafffff1 	blt	314 <VIS_Uart_Tx+0x24>
        VIS_Uart_TxChar(JTAG_UART_ptr, s[i]);
}
     34c:	e24bd004 	sub	sp, r11, #4
     350:	e8bd8800 	pop	{r11, pc}

00000354 <VIS_UART_TxInt>:

void VIS_UART_TxInt(volatile int * JTAG_UART_ptr, int num) {
     354:	e92d4800 	push	{r11, lr}
     358:	e28db004 	add	r11, sp, #4
     35c:	e24dd010 	sub	sp, sp, #16
     360:	e50b0010 	str	r0, [r11, #-16]
     364:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    if (num < 0) {
     368:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     36c:	e3530000 	cmp	r3, #0
     370:	aa000005 	bge	38c <VIS_UART_TxInt+0x38>
        num = -num;
     374:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     378:	e2633000 	rsb	r3, r3, #0
     37c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        VIS_Uart_TxChar(JTAG_UART_ptr, '-');
     380:	e51b0010 	ldr	r0, [r11, #-16]
     384:	e3a0102d 	mov	r1, #45	; 0x2d
     388:	ebffffba 	bl	278 <VIS_Uart_TxChar>
    }
    if (num < 10) {
     38c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     390:	e3530009 	cmp	r3, #9
     394:	ca000008 	bgt	3bc <VIS_UART_TxInt+0x68>
        VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num]);
     398:	e30537b0 	movw	r3, #22448	; 0x57b0
     39c:	e3403000 	movt	r3, #0
     3a0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     3a4:	e0833002 	add	r3, r3, r2
     3a8:	e5d33000 	ldrb	r3, [r3]
     3ac:	e51b0010 	ldr	r0, [r11, #-16]
     3b0:	e1a01003 	mov	r1, r3
     3b4:	ebffffaf 	bl	278 <VIS_Uart_TxChar>
     3b8:	ea00002b 	b	46c <VIS_UART_TxInt+0x118>
    } else {
        int tens = 1;
     3bc:	e3a03001 	mov	r3, #1
     3c0:	e50b3008 	str	r3, [r11, #-8]
        while (num / tens > 0) tens *= 10;
     3c4:	ea000005 	b	3e0 <VIS_UART_TxInt+0x8c>
     3c8:	e51b2008 	ldr	r2, [r11, #-8]
     3cc:	e1a03002 	mov	r3, r2
     3d0:	e1a03103 	lsl	r3, r3, #2
     3d4:	e0833002 	add	r3, r3, r2
     3d8:	e1a03083 	lsl	r3, r3, #1
     3dc:	e50b3008 	str	r3, [r11, #-8]
     3e0:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     3e4:	e51b1008 	ldr	r1, [r11, #-8]
     3e8:	eb001146 	bl	4908 <__aeabi_idiv>
     3ec:	e1a03000 	mov	r3, r0
     3f0:	e3530000 	cmp	r3, #0
     3f4:	cafffff3 	bgt	3c8 <VIS_UART_TxInt+0x74>
        while (tens > 1) {
     3f8:	ea000018 	b	460 <VIS_UART_TxInt+0x10c>
            tens /= 10;
     3fc:	e51b2008 	ldr	r2, [r11, #-8]
     400:	e3063667 	movw	r3, #26215	; 0x6667
     404:	e3463666 	movt	r3, #26214	; 0x6666
     408:	e0c31293 	smull	r1, r3, r3, r2
     40c:	e1a01143 	asr	r1, r3, #2
     410:	e1a03fc2 	asr	r3, r2, #31
     414:	e0633001 	rsb	r3, r3, r1
     418:	e50b3008 	str	r3, [r11, #-8]
            VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num / tens]);
     41c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     420:	e51b1008 	ldr	r1, [r11, #-8]
     424:	eb001137 	bl	4908 <__aeabi_idiv>
     428:	e1a03000 	mov	r3, r0
     42c:	e1a02003 	mov	r2, r3
     430:	e30537b0 	movw	r3, #22448	; 0x57b0
     434:	e3403000 	movt	r3, #0
     438:	e7d33002 	ldrb	r3, [r3, r2]
     43c:	e51b0010 	ldr	r0, [r11, #-16]
     440:	e1a01003 	mov	r1, r3
     444:	ebffff8b 	bl	278 <VIS_Uart_TxChar>
            num %= tens;
     448:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     44c:	e1a00003 	mov	r0, r3
     450:	e51b1008 	ldr	r1, [r11, #-8]
     454:	eb001175 	bl	4a30 <__aeabi_idivmod>
     458:	e1a03001 	mov	r3, r1
     45c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    if (num < 10) {
        VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num]);
    } else {
        int tens = 1;
        while (num / tens > 0) tens *= 10;
        while (tens > 1) {
     460:	e51b3008 	ldr	r3, [r11, #-8]
     464:	e3530001 	cmp	r3, #1
     468:	caffffe3 	bgt	3fc <VIS_UART_TxInt+0xa8>
            tens /= 10;
            VIS_Uart_TxChar(JTAG_UART_ptr, intToChar[num / tens]);
            num %= tens;
        }
    }
}
     46c:	e24bd004 	sub	sp, r11, #4
     470:	e8bd8800 	pop	{r11, pc}

00000474 <VIS_UART_TxEnter>:

void VIS_UART_TxEnter(volatile int * JTAG_UART_ptr) {
     474:	e92d4800 	push	{r11, lr}
     478:	e28db004 	add	r11, sp, #4
     47c:	e24dd008 	sub	sp, sp, #8
     480:	e50b0008 	str	r0, [r11, #-8]
    VIS_Uart_TxChar(JTAG_UART_ptr, '\r');
     484:	e51b0008 	ldr	r0, [r11, #-8]
     488:	e3a0100d 	mov	r1, #13
     48c:	ebffff79 	bl	278 <VIS_Uart_TxChar>
    VIS_Uart_TxChar(JTAG_UART_ptr, '\n');
     490:	e51b0008 	ldr	r0, [r11, #-8]
     494:	e3a0100a 	mov	r1, #10
     498:	ebffff76 	bl	278 <VIS_Uart_TxChar>
}
     49c:	e24bd004 	sub	sp, r11, #4
     4a0:	e8bd8800 	pop	{r11, pc}

000004a4 <VIS_Uart_RxChar>:

char VIS_Uart_RxChar(volatile int * JTAG_UART_ptr) {
     4a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     4a8:	e28db000 	add	r11, sp, #0
     4ac:	e24dd014 	sub	sp, sp, #20
     4b0:	e50b0010 	str	r0, [r11, #-16]
    int data;
    data = *(JTAG_UART_ptr); // read the JTAG_UART data register
     4b4:	e51b3010 	ldr	r3, [r11, #-16]
     4b8:	e5933000 	ldr	r3, [r3]
     4bc:	e50b3008 	str	r3, [r11, #-8]
    if (data & 0x00008000)   // check RVALID to see if there is new data
     4c0:	e51b3008 	ldr	r3, [r11, #-8]
     4c4:	e2033902 	and	r3, r3, #32768	; 0x8000
     4c8:	e3530000 	cmp	r3, #0
     4cc:	0a000002 	beq	4dc <VIS_Uart_RxChar+0x38>
        return ((char)data & 0xFF);
     4d0:	e51b3008 	ldr	r3, [r11, #-8]
     4d4:	e6ef3073 	uxtb	r3, r3
     4d8:	ea000000 	b	4e0 <VIS_Uart_RxChar+0x3c>
    else
        return ('\0');
     4dc:	e3a03000 	mov	r3, #0
}
     4e0:	e1a00003 	mov	r0, r3
     4e4:	e28bd000 	add	sp, r11, #0
     4e8:	e8bd0800 	ldmfd	sp!, {r11}
     4ec:	e12fff1e 	bx	lr

000004f0 <VIS_LED_Get>:
#include "LED.h"
#include "../values.h"

static volatile unsigned * red_LED_ptr = (unsigned *)0xFF200000;

unsigned VIS_LED_Get(unsigned index) {
     4f0:	e92d4800 	push	{r11, lr}
     4f4:	e28db004 	add	r11, sp, #4
     4f8:	e24dd010 	sub	sp, sp, #16
     4fc:	e50b0010 	str	r0, [r11, #-16]
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     500:	e51b3010 	ldr	r3, [r11, #-16]
     504:	e3530009 	cmp	r3, #9
     508:	9a000000 	bls	510 <VIS_LED_Get+0x20>
     50c:	ebffff56 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     510:	e3073dec 	movw	r3, #32236	; 0x7dec
     514:	e3403000 	movt	r3, #0
     518:	e5933000 	ldr	r3, [r3]
     51c:	e5933000 	ldr	r3, [r3]
     520:	e50b3008 	str	r3, [r11, #-8]
    return led & (0x1u << index);
     524:	e51b3010 	ldr	r3, [r11, #-16]
     528:	e3a02001 	mov	r2, #1
     52c:	e1a02312 	lsl	r2, r2, r3
     530:	e51b3008 	ldr	r3, [r11, #-8]
     534:	e0023003 	and	r3, r2, r3
}
     538:	e1a00003 	mov	r0, r3
     53c:	e24bd004 	sub	sp, r11, #4
     540:	e8bd8800 	pop	{r11, pc}

00000544 <VIS_LED_Set>:

void VIS_LED_Set(unsigned index, unsigned status) {
     544:	e92d4800 	push	{r11, lr}
     548:	e28db004 	add	r11, sp, #4
     54c:	e24dd010 	sub	sp, sp, #16
     550:	e50b0010 	str	r0, [r11, #-16]
     554:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     558:	e51b3010 	ldr	r3, [r11, #-16]
     55c:	e3530009 	cmp	r3, #9
     560:	9a000000 	bls	568 <VIS_LED_Set+0x24>
     564:	ebffff40 	bl	26c <VIS_ERROR_Handler>
    if (status != VIS_LED_SET && status != VIS_LED_RESET) VIS_ERROR_Handler();
     568:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     56c:	e3530001 	cmp	r3, #1
     570:	0a000003 	beq	584 <VIS_LED_Set+0x40>
     574:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     578:	e3530000 	cmp	r3, #0
     57c:	0a000000 	beq	584 <VIS_LED_Set+0x40>
     580:	ebffff39 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     584:	e3073dec 	movw	r3, #32236	; 0x7dec
     588:	e3403000 	movt	r3, #0
     58c:	e5933000 	ldr	r3, [r3]
     590:	e5933000 	ldr	r3, [r3]
     594:	e50b3008 	str	r3, [r11, #-8]
    if (status == VIS_LED_SET) {
     598:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     59c:	e3530001 	cmp	r3, #1
     5a0:	1a000006 	bne	5c0 <VIS_LED_Set+0x7c>
        led |= 0x1u << index;
     5a4:	e51b3010 	ldr	r3, [r11, #-16]
     5a8:	e3a02001 	mov	r2, #1
     5ac:	e1a03312 	lsl	r3, r2, r3
     5b0:	e51b2008 	ldr	r2, [r11, #-8]
     5b4:	e1823003 	orr	r3, r2, r3
     5b8:	e50b3008 	str	r3, [r11, #-8]
     5bc:	ea000006 	b	5dc <VIS_LED_Set+0x98>
    } else {
        led &= ~(0x1u << index);
     5c0:	e51b3010 	ldr	r3, [r11, #-16]
     5c4:	e3a02001 	mov	r2, #1
     5c8:	e1a03312 	lsl	r3, r2, r3
     5cc:	e1e03003 	mvn	r3, r3
     5d0:	e51b2008 	ldr	r2, [r11, #-8]
     5d4:	e0023003 	and	r3, r2, r3
     5d8:	e50b3008 	str	r3, [r11, #-8]
    }
    *(red_LED_ptr) = led;
     5dc:	e3073dec 	movw	r3, #32236	; 0x7dec
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5933000 	ldr	r3, [r3]
     5e8:	e51b2008 	ldr	r2, [r11, #-8]
     5ec:	e5832000 	str	r2, [r3]
}
     5f0:	e24bd004 	sub	sp, r11, #4
     5f4:	e8bd8800 	pop	{r11, pc}

000005f8 <VIS_LED_Toggle>:

unsigned VIS_LED_Toggle(unsigned index) {
     5f8:	e92d4800 	push	{r11, lr}
     5fc:	e28db004 	add	r11, sp, #4
     600:	e24dd010 	sub	sp, sp, #16
     604:	e50b0010 	str	r0, [r11, #-16]
#ifdef DEBUG
    if (index > 9) VIS_ERROR_Handler();    
     608:	e51b3010 	ldr	r3, [r11, #-16]
     60c:	e3530009 	cmp	r3, #9
     610:	9a000000 	bls	618 <VIS_LED_Toggle+0x20>
     614:	ebffff14 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    unsigned led = *(red_LED_ptr);
     618:	e3073dec 	movw	r3, #32236	; 0x7dec
     61c:	e3403000 	movt	r3, #0
     620:	e5933000 	ldr	r3, [r3]
     624:	e5933000 	ldr	r3, [r3]
     628:	e50b3008 	str	r3, [r11, #-8]
    led ^= 0x1u << index;
     62c:	e51b3010 	ldr	r3, [r11, #-16]
     630:	e3a02001 	mov	r2, #1
     634:	e1a03312 	lsl	r3, r2, r3
     638:	e51b2008 	ldr	r2, [r11, #-8]
     63c:	e0223003 	eor	r3, r2, r3
     640:	e50b3008 	str	r3, [r11, #-8]
    *(red_LED_ptr) = led;
     644:	e3073dec 	movw	r3, #32236	; 0x7dec
     648:	e3403000 	movt	r3, #0
     64c:	e5933000 	ldr	r3, [r3]
     650:	e51b2008 	ldr	r2, [r11, #-8]
     654:	e5832000 	str	r2, [r3]
    return led & (0x1u << index);
     658:	e51b3010 	ldr	r3, [r11, #-16]
     65c:	e3a02001 	mov	r2, #1
     660:	e1a02312 	lsl	r2, r2, r3
     664:	e51b3008 	ldr	r3, [r11, #-8]
     668:	e0023003 	and	r3, r2, r3
}
     66c:	e1a00003 	mov	r0, r3
     670:	e24bd004 	sub	sp, r11, #4
     674:	e8bd8800 	pop	{r11, pc}

00000678 <VIS_LED_SetAll>:

void VIS_LED_SetAll() {
     678:	e92d4800 	push	{r11, lr}
     67c:	e28db004 	add	r11, sp, #4
     680:	e24dd008 	sub	sp, sp, #8
    for (unsigned i = 0; i <= 9; i++) {
     684:	e3a03000 	mov	r3, #0
     688:	e50b3008 	str	r3, [r11, #-8]
     68c:	ea000005 	b	6a8 <VIS_LED_SetAll+0x30>
        VIS_LED_Set(i, VIS_LED_SET);
     690:	e51b0008 	ldr	r0, [r11, #-8]
     694:	e3a01001 	mov	r1, #1
     698:	ebffffa9 	bl	544 <VIS_LED_Set>
    *(red_LED_ptr) = led;
    return led & (0x1u << index);
}

void VIS_LED_SetAll() {
    for (unsigned i = 0; i <= 9; i++) {
     69c:	e51b3008 	ldr	r3, [r11, #-8]
     6a0:	e2833001 	add	r3, r3, #1
     6a4:	e50b3008 	str	r3, [r11, #-8]
     6a8:	e51b3008 	ldr	r3, [r11, #-8]
     6ac:	e3530009 	cmp	r3, #9
     6b0:	9afffff6 	bls	690 <VIS_LED_SetAll+0x18>
        VIS_LED_Set(i, VIS_LED_SET);
    }
}
     6b4:	e24bd004 	sub	sp, r11, #4
     6b8:	e8bd8800 	pop	{r11, pc}

000006bc <VIS_LED_ResetAll>:
void VIS_LED_ResetAll() {
     6bc:	e92d4800 	push	{r11, lr}
     6c0:	e28db004 	add	r11, sp, #4
     6c4:	e24dd008 	sub	sp, sp, #8
    for (unsigned i = 0; i <= 9; i++) {
     6c8:	e3a03000 	mov	r3, #0
     6cc:	e50b3008 	str	r3, [r11, #-8]
     6d0:	ea000005 	b	6ec <VIS_LED_ResetAll+0x30>
        VIS_LED_Set(i, VIS_LED_RESET);
     6d4:	e51b0008 	ldr	r0, [r11, #-8]
     6d8:	e3a01000 	mov	r1, #0
     6dc:	ebffff98 	bl	544 <VIS_LED_Set>
    for (unsigned i = 0; i <= 9; i++) {
        VIS_LED_Set(i, VIS_LED_SET);
    }
}
void VIS_LED_ResetAll() {
    for (unsigned i = 0; i <= 9; i++) {
     6e0:	e51b3008 	ldr	r3, [r11, #-8]
     6e4:	e2833001 	add	r3, r3, #1
     6e8:	e50b3008 	str	r3, [r11, #-8]
     6ec:	e51b3008 	ldr	r3, [r11, #-8]
     6f0:	e3530009 	cmp	r3, #9
     6f4:	9afffff6 	bls	6d4 <VIS_LED_ResetAll+0x18>
        VIS_LED_Set(i, VIS_LED_RESET);
    }
     6f8:	e24bd004 	sub	sp, r11, #4
     6fc:	e8bd8800 	pop	{r11, pc}

00000700 <VIS_HEX_Set>:
    [0x4] = 0b1100110, 0b1101101, 0b11111101, 0b111,
    [0x8] = 0b1111111, 0b1101111, 0b1110111, 0b1111100, 
    [0xC] = 0b111001, 0b1011110, 0b1111001, 0b1110001
};

void VIS_HEX_Set(unsigned index, unsigned data) {
     700:	e92d4800 	push	{r11, lr}
     704:	e28db004 	add	r11, sp, #4
     708:	e24dd010 	sub	sp, sp, #16
     70c:	e50b0010 	str	r0, [r11, #-16]
     710:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
#ifdef DEBUG
    if (index > 6) VIS_ERROR_Handler();
     714:	e51b3010 	ldr	r3, [r11, #-16]
     718:	e3530006 	cmp	r3, #6
     71c:	9a000000 	bls	724 <VIS_HEX_Set+0x24>
     720:	ebfffed1 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    data &= 0x7F;
     724:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     728:	e203307f 	and	r3, r3, #127	; 0x7f
     72c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    if (index < 4) {
     730:	e51b3010 	ldr	r3, [r11, #-16]
     734:	e3530003 	cmp	r3, #3
     738:	8a000017 	bhi	79c <VIS_HEX_Set+0x9c>
        // HEX 0 ~ 3
        unsigned original = *(HEX3_HEX0_ptr);
     73c:	e3073df0 	movw	r3, #32240	; 0x7df0
     740:	e3403000 	movt	r3, #0
     744:	e5933000 	ldr	r3, [r3]
     748:	e5933000 	ldr	r3, [r3]
     74c:	e50b3008 	str	r3, [r11, #-8]
        // clear the byte
        original &= ~(0xFF << (index << 3));
     750:	e51b3010 	ldr	r3, [r11, #-16]
     754:	e1a03183 	lsl	r3, r3, #3
     758:	e3a020ff 	mov	r2, #255	; 0xff
     75c:	e1a03312 	lsl	r3, r2, r3
     760:	e1e03003 	mvn	r3, r3
     764:	e51b2008 	ldr	r2, [r11, #-8]
     768:	e0023003 	and	r3, r2, r3
     76c:	e50b3008 	str	r3, [r11, #-8]
        *(HEX3_HEX0_ptr) = original | (data << (index << 3));
     770:	e3073df0 	movw	r3, #32240	; 0x7df0
     774:	e3403000 	movt	r3, #0
     778:	e5933000 	ldr	r3, [r3]
     77c:	e51b2010 	ldr	r2, [r11, #-16]
     780:	e1a02182 	lsl	r2, r2, #3
     784:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     788:	e1a01211 	lsl	r1, r1, r2
     78c:	e51b2008 	ldr	r2, [r11, #-8]
     790:	e1812002 	orr	r2, r1, r2
     794:	e5832000 	str	r2, [r3]
     798:	ea000018 	b	800 <VIS_HEX_Set+0x100>
    } else {
        // HEX 4 ~ 5
        unsigned original = *(HEX5_HEX4_ptr);
     79c:	e3073df4 	movw	r3, #32244	; 0x7df4
     7a0:	e3403000 	movt	r3, #0
     7a4:	e5933000 	ldr	r3, [r3]
     7a8:	e5933000 	ldr	r3, [r3]
     7ac:	e50b300c 	str	r3, [r11, #-12]
        // clear the byte
        original &= ~(0xFF << ((index - 4) << 3));
     7b0:	e51b3010 	ldr	r3, [r11, #-16]
     7b4:	e2433004 	sub	r3, r3, #4
     7b8:	e1a03183 	lsl	r3, r3, #3
     7bc:	e3a020ff 	mov	r2, #255	; 0xff
     7c0:	e1a03312 	lsl	r3, r2, r3
     7c4:	e1e03003 	mvn	r3, r3
     7c8:	e51b200c 	ldr	r2, [r11, #-12]
     7cc:	e0023003 	and	r3, r2, r3
     7d0:	e50b300c 	str	r3, [r11, #-12]
        *(HEX5_HEX4_ptr) = original | (data << ((index - 4) << 3));
     7d4:	e3073df4 	movw	r3, #32244	; 0x7df4
     7d8:	e3403000 	movt	r3, #0
     7dc:	e5933000 	ldr	r3, [r3]
     7e0:	e51b2010 	ldr	r2, [r11, #-16]
     7e4:	e2422004 	sub	r2, r2, #4
     7e8:	e1a02182 	lsl	r2, r2, #3
     7ec:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     7f0:	e1a01211 	lsl	r1, r1, r2
     7f4:	e51b200c 	ldr	r2, [r11, #-12]
     7f8:	e1812002 	orr	r2, r1, r2
     7fc:	e5832000 	str	r2, [r3]
    }
}
     800:	e24bd004 	sub	sp, r11, #4
     804:	e8bd8800 	pop	{r11, pc}

00000808 <VIS_HEX_SetDigit>:

void VIS_HEX_SetDigit(unsigned index, unsigned data) {
     808:	e92d4800 	push	{r11, lr}
     80c:	e28db004 	add	r11, sp, #4
     810:	e24dd008 	sub	sp, sp, #8
     814:	e50b0008 	str	r0, [r11, #-8]
     818:	e50b100c 	str	r1, [r11, #-12]
#ifdef DEBUG
    if (index > 6) VIS_ERROR_Handler();
     81c:	e51b3008 	ldr	r3, [r11, #-8]
     820:	e3530006 	cmp	r3, #6
     824:	9a000000 	bls	82c <VIS_HEX_SetDigit+0x24>
     828:	ebfffe8f 	bl	26c <VIS_ERROR_Handler>
    if (data > 0xF) VIS_ERROR_Handler();
     82c:	e51b300c 	ldr	r3, [r11, #-12]
     830:	e353000f 	cmp	r3, #15
     834:	9a000000 	bls	83c <VIS_HEX_SetDigit+0x34>
     838:	ebfffe8b 	bl	26c <VIS_ERROR_Handler>
#endif // DEBUG
    VIS_HEX_Set(index, HEX_HEXs[data]);
     83c:	e3073df8 	movw	r3, #32248	; 0x7df8
     840:	e3403000 	movt	r3, #0
     844:	e51b200c 	ldr	r2, [r11, #-12]
     848:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     84c:	e51b0008 	ldr	r0, [r11, #-8]
     850:	e1a01003 	mov	r1, r3
     854:	ebffffa9 	bl	700 <VIS_HEX_Set>
}
     858:	e24bd004 	sub	sp, r11, #4
     85c:	e8bd8800 	pop	{r11, pc}

00000860 <VIS_HEX_SetUint_HEX>:

void VIS_HEX_SetUint_HEX(unsigned data) {
     860:	e92d4800 	push	{r11, lr}
     864:	e28db004 	add	r11, sp, #4
     868:	e24dd010 	sub	sp, sp, #16
     86c:	e50b0010 	str	r0, [r11, #-16]
    data &= 0xFFFFFF;
     870:	e51b3010 	ldr	r3, [r11, #-16]
     874:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
     878:	e50b3010 	str	r3, [r11, #-16]
    for (unsigned i = 0; i <= 5; i++) {
     87c:	e3a03000 	mov	r3, #0
     880:	e50b3008 	str	r3, [r11, #-8]
     884:	ea00000a 	b	8b4 <VIS_HEX_SetUint_HEX+0x54>
        VIS_HEX_SetDigit(i, data & (0xF));
     888:	e51b3010 	ldr	r3, [r11, #-16]
     88c:	e203300f 	and	r3, r3, #15
     890:	e51b0008 	ldr	r0, [r11, #-8]
     894:	e1a01003 	mov	r1, r3
     898:	ebffffda 	bl	808 <VIS_HEX_SetDigit>
        data >>= 4;
     89c:	e51b3010 	ldr	r3, [r11, #-16]
     8a0:	e1a03223 	lsr	r3, r3, #4
     8a4:	e50b3010 	str	r3, [r11, #-16]
    VIS_HEX_Set(index, HEX_HEXs[data]);
}

void VIS_HEX_SetUint_HEX(unsigned data) {
    data &= 0xFFFFFF;
    for (unsigned i = 0; i <= 5; i++) {
     8a8:	e51b3008 	ldr	r3, [r11, #-8]
     8ac:	e2833001 	add	r3, r3, #1
     8b0:	e50b3008 	str	r3, [r11, #-8]
     8b4:	e51b3008 	ldr	r3, [r11, #-8]
     8b8:	e3530005 	cmp	r3, #5
     8bc:	9afffff1 	bls	888 <VIS_HEX_SetUint_HEX+0x28>
        VIS_HEX_SetDigit(i, data & (0xF));
        data >>= 4;
    }
}
     8c0:	e24bd004 	sub	sp, r11, #4
     8c4:	e8bd8800 	pop	{r11, pc}

000008c8 <VIS_HEX_SetUint_DEC>:

void VIS_HEX_SetUint_DEC(unsigned data) {
     8c8:	e92d4800 	push	{r11, lr}
     8cc:	e28db004 	add	r11, sp, #4
     8d0:	e24dd010 	sub	sp, sp, #16
     8d4:	e50b0010 	str	r0, [r11, #-16]
    data %= 1000000;
     8d8:	e51b2010 	ldr	r2, [r11, #-16]
     8dc:	e30d3e83 	movw	r3, #56963	; 0xde83
     8e0:	e344331b 	movt	r3, #17179	; 0x431b
     8e4:	e0831293 	umull	r1, r3, r3, r2
     8e8:	e1a01923 	lsr	r1, r3, #18
     8ec:	e3043240 	movw	r3, #16960	; 0x4240
     8f0:	e340300f 	movt	r3, #15
     8f4:	e0030193 	mul	r3, r3, r1
     8f8:	e0633002 	rsb	r3, r3, r2
     8fc:	e50b3010 	str	r3, [r11, #-16]
    for (unsigned i = 0; i <= 5; i++) {
     900:	e3a03000 	mov	r3, #0
     904:	e50b3008 	str	r3, [r11, #-8]
     908:	ea000015 	b	964 <VIS_HEX_SetUint_DEC+0x9c>
        VIS_HEX_SetDigit(i, data %10);
     90c:	e51b1010 	ldr	r1, [r11, #-16]
     910:	e30c3ccd 	movw	r3, #52429	; 0xcccd
     914:	e34c3ccc 	movt	r3, #52428	; 0xcccc
     918:	e0832193 	umull	r2, r3, r3, r1
     91c:	e1a021a3 	lsr	r2, r3, #3
     920:	e1a03002 	mov	r3, r2
     924:	e1a03103 	lsl	r3, r3, #2
     928:	e0833002 	add	r3, r3, r2
     92c:	e1a03083 	lsl	r3, r3, #1
     930:	e0632001 	rsb	r2, r3, r1
     934:	e51b0008 	ldr	r0, [r11, #-8]
     938:	e1a01002 	mov	r1, r2
     93c:	ebffffb1 	bl	808 <VIS_HEX_SetDigit>
        data /= 10;
     940:	e51b2010 	ldr	r2, [r11, #-16]
     944:	e30c3ccd 	movw	r3, #52429	; 0xcccd
     948:	e34c3ccc 	movt	r3, #52428	; 0xcccc
     94c:	e0831293 	umull	r1, r3, r3, r2
     950:	e1a031a3 	lsr	r3, r3, #3
     954:	e50b3010 	str	r3, [r11, #-16]
    }
}

void VIS_HEX_SetUint_DEC(unsigned data) {
    data %= 1000000;
    for (unsigned i = 0; i <= 5; i++) {
     958:	e51b3008 	ldr	r3, [r11, #-8]
     95c:	e2833001 	add	r3, r3, #1
     960:	e50b3008 	str	r3, [r11, #-8]
     964:	e51b3008 	ldr	r3, [r11, #-8]
     968:	e3530005 	cmp	r3, #5
     96c:	9affffe6 	bls	90c <VIS_HEX_SetUint_DEC+0x44>
        VIS_HEX_SetDigit(i, data %10);
        data /= 10;
    }
     970:	e24bd004 	sub	sp, r11, #4
     974:	e8bd8800 	pop	{r11, pc}

00000978 <led_test>:

static volatile int *JTAG_UART_ptr = (int *)JTAG_UART_BASE; // JTAG UART address
static volatile int * audio_ptr   = (int *)AUDIO_BASE; // Audio in address

// LED test passed
void led_test() {
     978:	e92d4800 	push	{r11, lr}
     97c:	e28db004 	add	r11, sp, #4
    VIS_LED_Set(1, VIS_LED_SET);
     980:	e3a00001 	mov	r0, #1
     984:	e3a01001 	mov	r1, #1
     988:	ebfffeed 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(3, VIS_LED_SET);
     98c:	e3a00003 	mov	r0, #3
     990:	e3a01001 	mov	r1, #1
     994:	ebfffeea 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(5, VIS_LED_SET);
     998:	e3a00005 	mov	r0, #5
     99c:	e3a01001 	mov	r1, #1
     9a0:	ebfffee7 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(7, VIS_LED_SET);
     9a4:	e3a00007 	mov	r0, #7
     9a8:	e3a01001 	mov	r1, #1
     9ac:	ebfffee4 	bl	544 <VIS_LED_Set>
    VIS_LED_Toggle(9);
     9b0:	e3a00009 	mov	r0, #9
     9b4:	ebffff0f 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Toggle(2);
     9b8:	e3a00002 	mov	r0, #2
     9bc:	ebffff0d 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Toggle(2);
     9c0:	e3a00002 	mov	r0, #2
     9c4:	ebffff0b 	bl	5f8 <VIS_LED_Toggle>
    VIS_LED_Set(4, VIS_LED_SET);
     9c8:	e3a00004 	mov	r0, #4
     9cc:	e3a01001 	mov	r1, #1
     9d0:	ebfffedb 	bl	544 <VIS_LED_Set>
    VIS_LED_Set(4, VIS_LED_RESET);
     9d4:	e3a00004 	mov	r0, #4
     9d8:	e3a01000 	mov	r1, #0
     9dc:	ebfffed8 	bl	544 <VIS_LED_Set>
}
     9e0:	e8bd8800 	pop	{r11, pc}

000009e4 <audio_test>:

void audio_test() {
     9e4:	e92d4800 	push	{r11, lr}
     9e8:	e28db004 	add	r11, sp, #4
     9ec:	e24ddc19 	sub	sp, sp, #6400	; 0x1900
     9f0:	e24dd008 	sub	sp, sp, #8
 /* used for audio record/playback */
    int fifospace, buffer_index = 0;
     9f4:	e3a03000 	mov	r3, #0
     9f8:	e50b3008 	str	r3, [r11, #-8]
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];

    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     9fc:	e3073e3c 	movw	r3, #32316	; 0x7e3c
     a00:	e3403000 	movt	r3, #0
     a04:	e5933000 	ldr	r3, [r3]
     a08:	e5933004 	ldr	r3, [r3, #4]
     a0c:	e50b300c 	str	r3, [r11, #-12]
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
     a10:	ea000000 	b	a18 <audio_test+0x34>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
                // reset counter
                buffer_index = 0;
            }
            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
     a14:	e1a00000 	nop			; (mov r0, r0)
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
     a18:	e1a00000 	nop			; (mov r0, r0)
     a1c:	e51b300c 	ldr	r3, [r11, #-12]
     a20:	e6ef3073 	uxtb	r3, r3
     a24:	e3530000 	cmp	r3, #0
     a28:	0afffffb 	beq	a1c <audio_test+0x38>
            *(audio_ptr + 2)  = *(audio_ptr + 2) >> 6;
     a2c:	e3073e3c 	movw	r3, #32316	; 0x7e3c
     a30:	e3403000 	movt	r3, #0
     a34:	e5933000 	ldr	r3, [r3]
     a38:	e2832008 	add	r2, r3, #8
     a3c:	e3073e3c 	movw	r3, #32316	; 0x7e3c
     a40:	e3403000 	movt	r3, #0
     a44:	e5933000 	ldr	r3, [r3]
     a48:	e2833008 	add	r3, r3, #8
     a4c:	e5933000 	ldr	r3, [r3]
     a50:	e1a03343 	asr	r3, r3, #6
     a54:	e5823000 	str	r3, [r2]
            *(audio_ptr + 3)  = *(audio_ptr + 3) >> 6;
     a58:	e3073e3c 	movw	r3, #32316	; 0x7e3c
     a5c:	e3403000 	movt	r3, #0
     a60:	e5933000 	ldr	r3, [r3]
     a64:	e283200c 	add	r2, r3, #12
     a68:	e3073e3c 	movw	r3, #32316	; 0x7e3c
     a6c:	e3403000 	movt	r3, #0
     a70:	e5933000 	ldr	r3, [r3]
     a74:	e283300c 	add	r3, r3, #12
     a78:	e5933000 	ldr	r3, [r3]
     a7c:	e1a03343 	asr	r3, r3, #6
     a80:	e5823000 	str	r3, [r2]
            ++buffer_index;
     a84:	e51b3008 	ldr	r3, [r11, #-8]
     a88:	e2833001 	add	r3, r3, #1
     a8c:	e50b3008 	str	r3, [r11, #-8]
            if (buffer_index >= 0xFFFFFF) buffer_index = 0;
     a90:	e51b2008 	ldr	r2, [r11, #-8]
     a94:	e30f3ffe 	movw	r3, #65534	; 0xfffe
     a98:	e34030ff 	movt	r3, #255	; 0xff
     a9c:	e1520003 	cmp	r2, r3
     aa0:	da000001 	ble	aac <audio_test+0xc8>
     aa4:	e3a03000 	mov	r3, #0
     aa8:	e50b3008 	str	r3, [r11, #-8]
            VIS_HEX_SetUint_HEX(buffer_index);
     aac:	e51b3008 	ldr	r3, [r11, #-8]
     ab0:	e1a00003 	mov	r0, r3
     ab4:	ebffff69 	bl	860 <VIS_HEX_SetUint_HEX>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
     ab8:	e3073e38 	movw	r3, #32312	; 0x7e38
     abc:	e3403000 	movt	r3, #0
     ac0:	e5933000 	ldr	r3, [r3]
     ac4:	e1a00003 	mov	r0, r3
     ac8:	ebfffe75 	bl	4a4 <VIS_Uart_RxChar>
     acc:	e1a03000 	mov	r3, r0
     ad0:	e3530000 	cmp	r3, #0
     ad4:	0affffce 	beq	a14 <audio_test+0x30>
                // reset counter
                buffer_index = 0;
     ad8:	e3a03000 	mov	r3, #0
     adc:	e50b3008 	str	r3, [r11, #-8]
            }
            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
     ae0:	eaffffcb 	b	a14 <audio_test+0x30>

00000ae4 <uart_test>:
        VIS_UART_TxInt(JTAG_UART_ptr, left_buffer[i]);
        VIS_Uart_Tx(JTAG_UART_ptr, "\r\n", strlen("\r\n"));
    }
}

void uart_test() {
     ae4:	e92d4810 	push	{r4, r11, lr}
     ae8:	e28db008 	add	r11, sp, #8
     aec:	e24dd024 	sub	sp, sp, #36	; 0x24
    
    char text_string[] = "\nJTAG UART test\n> \0";
     af0:	e30537bc 	movw	r3, #22460	; 0x57bc
     af4:	e3403000 	movt	r3, #0
     af8:	e24bc028 	sub	r12, r11, #40	; 0x28
     afc:	e1a0e003 	mov	lr, r3
     b00:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     b04:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     b08:	e59e3000 	ldr	r3, [lr]
     b0c:	e58c3000 	str	r3, [r12]
    char c;

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     b10:	e3073e38 	movw	r3, #32312	; 0x7e38
     b14:	e3403000 	movt	r3, #0
     b18:	e5934000 	ldr	r4, [r3]
     b1c:	e24b3028 	sub	r3, r11, #40	; 0x28
     b20:	e1a00003 	mov	r0, r3
     b24:	eb00120f 	bl	5368 <strlen>
     b28:	e1a03000 	mov	r3, r0
     b2c:	e24b2028 	sub	r2, r11, #40	; 0x28
     b30:	e1a00004 	mov	r0, r4
     b34:	e1a01002 	mov	r1, r2
     b38:	e1a02003 	mov	r2, r3
     b3c:	ebfffdeb 	bl	2f0 <VIS_Uart_Tx>

    for (int i = 0; i < BUF_SIZE; i++) {
     b40:	e3a03000 	mov	r3, #0
     b44:	e50b3010 	str	r3, [r11, #-16]
     b48:	ea00000e 	b	b88 <uart_test+0xa4>
        VIS_UART_TxInt(JTAG_UART_ptr, i);
     b4c:	e3073e38 	movw	r3, #32312	; 0x7e38
     b50:	e3403000 	movt	r3, #0
     b54:	e5933000 	ldr	r3, [r3]
     b58:	e1a00003 	mov	r0, r3
     b5c:	e51b1010 	ldr	r1, [r11, #-16]
     b60:	ebfffdfb 	bl	354 <VIS_UART_TxInt>
        VIS_Uart_TxChar(JTAG_UART_ptr, ' ');
     b64:	e3073e38 	movw	r3, #32312	; 0x7e38
     b68:	e3403000 	movt	r3, #0
     b6c:	e5933000 	ldr	r3, [r3]
     b70:	e1a00003 	mov	r0, r3
     b74:	e3a01020 	mov	r1, #32
     b78:	ebfffdbe 	bl	278 <VIS_Uart_TxChar>
    char text_string[] = "\nJTAG UART test\n> \0";
    char c;

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));

    for (int i = 0; i < BUF_SIZE; i++) {
     b7c:	e51b3010 	ldr	r3, [r11, #-16]
     b80:	e2833001 	add	r3, r3, #1
     b84:	e50b3010 	str	r3, [r11, #-16]
     b88:	e51b2010 	ldr	r2, [r11, #-16]
     b8c:	e300331f 	movw	r3, #799	; 0x31f
     b90:	e1520003 	cmp	r2, r3
     b94:	daffffec 	ble	b4c <uart_test+0x68>
     b98:	ea000000 	b	ba0 <uart_test+0xbc>
        if (c != '\0') {
            VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));

            VIS_Uart_TxChar(JTAG_UART_ptr, c);
        }
    }
     b9c:	e1a00000 	nop			; (mov r0, r0)
    }

    /* read and echo characters */
    while (1)
    {
        c = VIS_Uart_RxChar(JTAG_UART_ptr);
     ba0:	e3073e38 	movw	r3, #32312	; 0x7e38
     ba4:	e3403000 	movt	r3, #0
     ba8:	e5933000 	ldr	r3, [r3]
     bac:	e1a00003 	mov	r0, r3
     bb0:	ebfffe3b 	bl	4a4 <VIS_Uart_RxChar>
     bb4:	e1a03000 	mov	r3, r0
     bb8:	e54b3011 	strb	r3, [r11, #-17]	; 0xffffffef
        if (c != '\0') {
     bbc:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
     bc0:	e3530000 	cmp	r3, #0
     bc4:	0afffff4 	beq	b9c <uart_test+0xb8>
            VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     bc8:	e3073e38 	movw	r3, #32312	; 0x7e38
     bcc:	e3403000 	movt	r3, #0
     bd0:	e5934000 	ldr	r4, [r3]
     bd4:	e24b3028 	sub	r3, r11, #40	; 0x28
     bd8:	e1a00003 	mov	r0, r3
     bdc:	eb0011e1 	bl	5368 <strlen>
     be0:	e1a03000 	mov	r3, r0
     be4:	e24b2028 	sub	r2, r11, #40	; 0x28
     be8:	e1a00004 	mov	r0, r4
     bec:	e1a01002 	mov	r1, r2
     bf0:	e1a02003 	mov	r2, r3
     bf4:	ebfffdbd 	bl	2f0 <VIS_Uart_Tx>

            VIS_Uart_TxChar(JTAG_UART_ptr, c);
     bf8:	e3073e38 	movw	r3, #32312	; 0x7e38
     bfc:	e3403000 	movt	r3, #0
     c00:	e5932000 	ldr	r2, [r3]
     c04:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
     c08:	e1a00002 	mov	r0, r2
     c0c:	e1a01003 	mov	r1, r3
     c10:	ebfffd98 	bl	278 <VIS_Uart_TxChar>
        }
    }
     c14:	eaffffe0 	b	b9c <uart_test+0xb8>

00000c18 <hex_test>:
}

void hex_test() {
     c18:	e92d4810 	push	{r4, r11, lr}
     c1c:	e28db008 	add	r11, sp, #8
     c20:	e24dd024 	sub	sp, sp, #36	; 0x24
    char text_string[] = "\nPress any key to continue\n> \0";
     c24:	e30537d0 	movw	r3, #22480	; 0x57d0
     c28:	e3403000 	movt	r3, #0
     c2c:	e24bc02c 	sub	r12, r11, #44	; 0x2c
     c30:	e1a0e003 	mov	lr, r3
     c34:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     c38:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     c3c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
     c40:	e8ac0007 	stmia	r12!, {r0, r1, r2}
     c44:	e1cc30b0 	strh	r3, [r12]
     c48:	e28cc002 	add	r12, r12, #2
     c4c:	e1a03823 	lsr	r3, r3, #16
     c50:	e5cc3000 	strb	r3, [r12]
    VIS_HEX_Set(0, (0x1U << 6) + 0x1U);
     c54:	e3a00000 	mov	r0, #0
     c58:	e3a01041 	mov	r1, #65	; 0x41
     c5c:	ebfffea7 	bl	700 <VIS_HEX_Set>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     c60:	e3073e38 	movw	r3, #32312	; 0x7e38
     c64:	e3403000 	movt	r3, #0
     c68:	e5934000 	ldr	r4, [r3]
     c6c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     c70:	e1a00003 	mov	r0, r3
     c74:	eb0011bb 	bl	5368 <strlen>
     c78:	e1a03000 	mov	r3, r0
     c7c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     c80:	e1a00004 	mov	r0, r4
     c84:	e1a01002 	mov	r1, r2
     c88:	e1a02003 	mov	r2, r3
     c8c:	ebfffd97 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     c90:	e1a00000 	nop			; (mov r0, r0)
     c94:	e3073e38 	movw	r3, #32312	; 0x7e38
     c98:	e3403000 	movt	r3, #0
     c9c:	e5933000 	ldr	r3, [r3]
     ca0:	e1a00003 	mov	r0, r3
     ca4:	ebfffdfe 	bl	4a4 <VIS_Uart_RxChar>
     ca8:	e1a03000 	mov	r3, r0
     cac:	e3530000 	cmp	r3, #0
     cb0:	0afffff7 	beq	c94 <hex_test+0x7c>
    VIS_HEX_SetDigit(1, 0x3);
     cb4:	e3a00001 	mov	r0, #1
     cb8:	e3a01003 	mov	r1, #3
     cbc:	ebfffed1 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     cc0:	e3073e38 	movw	r3, #32312	; 0x7e38
     cc4:	e3403000 	movt	r3, #0
     cc8:	e5934000 	ldr	r4, [r3]
     ccc:	e24b302c 	sub	r3, r11, #44	; 0x2c
     cd0:	e1a00003 	mov	r0, r3
     cd4:	eb0011a3 	bl	5368 <strlen>
     cd8:	e1a03000 	mov	r3, r0
     cdc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     ce0:	e1a00004 	mov	r0, r4
     ce4:	e1a01002 	mov	r1, r2
     ce8:	e1a02003 	mov	r2, r3
     cec:	ebfffd7f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     cf0:	e1a00000 	nop			; (mov r0, r0)
     cf4:	e3073e38 	movw	r3, #32312	; 0x7e38
     cf8:	e3403000 	movt	r3, #0
     cfc:	e5933000 	ldr	r3, [r3]
     d00:	e1a00003 	mov	r0, r3
     d04:	ebfffde6 	bl	4a4 <VIS_Uart_RxChar>
     d08:	e1a03000 	mov	r3, r0
     d0c:	e3530000 	cmp	r3, #0
     d10:	0afffff7 	beq	cf4 <hex_test+0xdc>
    VIS_HEX_SetDigit(2, 0x2);
     d14:	e3a00002 	mov	r0, #2
     d18:	e3a01002 	mov	r1, #2
     d1c:	ebfffeb9 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     d20:	e3073e38 	movw	r3, #32312	; 0x7e38
     d24:	e3403000 	movt	r3, #0
     d28:	e5934000 	ldr	r4, [r3]
     d2c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     d30:	e1a00003 	mov	r0, r3
     d34:	eb00118b 	bl	5368 <strlen>
     d38:	e1a03000 	mov	r3, r0
     d3c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     d40:	e1a00004 	mov	r0, r4
     d44:	e1a01002 	mov	r1, r2
     d48:	e1a02003 	mov	r2, r3
     d4c:	ebfffd67 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     d50:	e1a00000 	nop			; (mov r0, r0)
     d54:	e3073e38 	movw	r3, #32312	; 0x7e38
     d58:	e3403000 	movt	r3, #0
     d5c:	e5933000 	ldr	r3, [r3]
     d60:	e1a00003 	mov	r0, r3
     d64:	ebfffdce 	bl	4a4 <VIS_Uart_RxChar>
     d68:	e1a03000 	mov	r3, r0
     d6c:	e3530000 	cmp	r3, #0
     d70:	0afffff7 	beq	d54 <hex_test+0x13c>
    VIS_HEX_SetDigit(3, 0x1);
     d74:	e3a00003 	mov	r0, #3
     d78:	e3a01001 	mov	r1, #1
     d7c:	ebfffea1 	bl	808 <VIS_HEX_SetDigit>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     d80:	e3073e38 	movw	r3, #32312	; 0x7e38
     d84:	e3403000 	movt	r3, #0
     d88:	e5934000 	ldr	r4, [r3]
     d8c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     d90:	e1a00003 	mov	r0, r3
     d94:	eb001173 	bl	5368 <strlen>
     d98:	e1a03000 	mov	r3, r0
     d9c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     da0:	e1a00004 	mov	r0, r4
     da4:	e1a01002 	mov	r1, r2
     da8:	e1a02003 	mov	r2, r3
     dac:	ebfffd4f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     db0:	e1a00000 	nop			; (mov r0, r0)
     db4:	e3073e38 	movw	r3, #32312	; 0x7e38
     db8:	e3403000 	movt	r3, #0
     dbc:	e5933000 	ldr	r3, [r3]
     dc0:	e1a00003 	mov	r0, r3
     dc4:	ebfffdb6 	bl	4a4 <VIS_Uart_RxChar>
     dc8:	e1a03000 	mov	r3, r0
     dcc:	e3530000 	cmp	r3, #0
     dd0:	0afffff7 	beq	db4 <hex_test+0x19c>
    VIS_HEX_Set(4, (0x1U << 6) + 0x1U);
     dd4:	e3a00004 	mov	r0, #4
     dd8:	e3a01041 	mov	r1, #65	; 0x41
     ddc:	ebfffe47 	bl	700 <VIS_HEX_Set>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     de0:	e3073e38 	movw	r3, #32312	; 0x7e38
     de4:	e3403000 	movt	r3, #0
     de8:	e5934000 	ldr	r4, [r3]
     dec:	e24b302c 	sub	r3, r11, #44	; 0x2c
     df0:	e1a00003 	mov	r0, r3
     df4:	eb00115b 	bl	5368 <strlen>
     df8:	e1a03000 	mov	r3, r0
     dfc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     e00:	e1a00004 	mov	r0, r4
     e04:	e1a01002 	mov	r1, r2
     e08:	e1a02003 	mov	r2, r3
     e0c:	ebfffd37 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     e10:	e1a00000 	nop			; (mov r0, r0)
     e14:	e3073e38 	movw	r3, #32312	; 0x7e38
     e18:	e3403000 	movt	r3, #0
     e1c:	e5933000 	ldr	r3, [r3]
     e20:	e1a00003 	mov	r0, r3
     e24:	ebfffd9e 	bl	4a4 <VIS_Uart_RxChar>
     e28:	e1a03000 	mov	r3, r0
     e2c:	e3530000 	cmp	r3, #0
     e30:	0afffff7 	beq	e14 <hex_test+0x1fc>
    VIS_HEX_SetDigit(5, 0xF);
     e34:	e3a00005 	mov	r0, #5
     e38:	e3a0100f 	mov	r1, #15
     e3c:	ebfffe71 	bl	808 <VIS_HEX_SetDigit>

    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     e40:	e3073e38 	movw	r3, #32312	; 0x7e38
     e44:	e3403000 	movt	r3, #0
     e48:	e5934000 	ldr	r4, [r3]
     e4c:	e24b302c 	sub	r3, r11, #44	; 0x2c
     e50:	e1a00003 	mov	r0, r3
     e54:	eb001143 	bl	5368 <strlen>
     e58:	e1a03000 	mov	r3, r0
     e5c:	e24b202c 	sub	r2, r11, #44	; 0x2c
     e60:	e1a00004 	mov	r0, r4
     e64:	e1a01002 	mov	r1, r2
     e68:	e1a02003 	mov	r2, r3
     e6c:	ebfffd1f 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     e70:	e1a00000 	nop			; (mov r0, r0)
     e74:	e3073e38 	movw	r3, #32312	; 0x7e38
     e78:	e3403000 	movt	r3, #0
     e7c:	e5933000 	ldr	r3, [r3]
     e80:	e1a00003 	mov	r0, r3
     e84:	ebfffd86 	bl	4a4 <VIS_Uart_RxChar>
     e88:	e1a03000 	mov	r3, r0
     e8c:	e3530000 	cmp	r3, #0
     e90:	0afffff7 	beq	e74 <hex_test+0x25c>

    VIS_HEX_SetUint_DEC(123456);
     e94:	e30e0240 	movw	r0, #57920	; 0xe240
     e98:	e3400001 	movt	r0, #1
     e9c:	ebfffe89 	bl	8c8 <VIS_HEX_SetUint_DEC>
    VIS_Uart_Tx(JTAG_UART_ptr, text_string, strlen(text_string));
     ea0:	e3073e38 	movw	r3, #32312	; 0x7e38
     ea4:	e3403000 	movt	r3, #0
     ea8:	e5934000 	ldr	r4, [r3]
     eac:	e24b302c 	sub	r3, r11, #44	; 0x2c
     eb0:	e1a00003 	mov	r0, r3
     eb4:	eb00112b 	bl	5368 <strlen>
     eb8:	e1a03000 	mov	r3, r0
     ebc:	e24b202c 	sub	r2, r11, #44	; 0x2c
     ec0:	e1a00004 	mov	r0, r4
     ec4:	e1a01002 	mov	r1, r2
     ec8:	e1a02003 	mov	r2, r3
     ecc:	ebfffd07 	bl	2f0 <VIS_Uart_Tx>
    while(VIS_Uart_RxChar(JTAG_UART_ptr) == '\0');
     ed0:	e1a00000 	nop			; (mov r0, r0)
     ed4:	e3073e38 	movw	r3, #32312	; 0x7e38
     ed8:	e3403000 	movt	r3, #0
     edc:	e5933000 	ldr	r3, [r3]
     ee0:	e1a00003 	mov	r0, r3
     ee4:	ebfffd6e 	bl	4a4 <VIS_Uart_RxChar>
     ee8:	e1a03000 	mov	r3, r0
     eec:	e3530000 	cmp	r3, #0
     ef0:	0afffff7 	beq	ed4 <hex_test+0x2bc>

    VIS_HEX_SetUint_HEX(0x123ACF);
     ef4:	e3030acf 	movw	r0, #15055	; 0x3acf
     ef8:	e3400012 	movt	r0, #18
     efc:	ebfffe57 	bl	860 <VIS_HEX_SetUint_HEX>
    
}
     f00:	e24bd008 	sub	sp, r11, #8
     f04:	e8bd8810 	pop	{r4, r11, pc}

00000f08 <display_test>:

void display_test() {
     f08:	e92d4810 	push	{r4, r11, lr}
     f0c:	e28db008 	add	r11, sp, #8
     f10:	e24ddefa 	sub	sp, sp, #4000	; 0xfa0
     f14:	e24dd00c 	sub	sp, sp, #12
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
     f18:	e3a00103 	mov	r0, #-1073741824	; 0xc0000000
     f1c:	e3a01332 	mov	r1, #-939524096	; 0xc8000000
     f20:	eb0003b8 	bl	1e08 <VIS_VGA_SetBuffer>
    unsigned k = 100;
     f24:	e3a03064 	mov	r3, #100	; 0x64
     f28:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    unsigned fakeSpect[MAX_LINES] = {0}; 
     f2c:	e24b3efa 	sub	r3, r11, #4000	; 0xfa0
     f30:	e243300c 	sub	r3, r3, #12
     f34:	e2433008 	sub	r3, r3, #8
     f38:	e3a02efa 	mov	r2, #4000	; 0xfa0
     f3c:	e1a00003 	mov	r0, r3
     f40:	e3a01000 	mov	r1, #0
     f44:	eb00109c 	bl	51bc <memset>
    while(1) {
        for (unsigned i = 0; i < k; i++) {
     f48:	e3a03000 	mov	r3, #0
     f4c:	e50b3010 	str	r3, [r11, #-16]
     f50:	ea00006b 	b	1104 <display_test+0x1fc>
            if (i != 0 && rand() % 10 < 2)
     f54:	e51b3010 	ldr	r3, [r11, #-16]
     f58:	e3530000 	cmp	r3, #0
     f5c:	0a00002d 	beq	1018 <display_test+0x110>
     f60:	eb0010e9 	bl	530c <rand>
     f64:	e1a01000 	mov	r1, r0
     f68:	e3063667 	movw	r3, #26215	; 0x6667
     f6c:	e3463666 	movt	r3, #26214	; 0x6666
     f70:	e0c30193 	smull	r0, r3, r3, r1
     f74:	e1a02143 	asr	r2, r3, #2
     f78:	e1a03fc1 	asr	r3, r1, #31
     f7c:	e0632002 	rsb	r2, r3, r2
     f80:	e1a03002 	mov	r3, r2
     f84:	e1a03103 	lsl	r3, r3, #2
     f88:	e0833002 	add	r3, r3, r2
     f8c:	e1a03083 	lsl	r3, r3, #1
     f90:	e0632001 	rsb	r2, r3, r1
     f94:	e3520001 	cmp	r2, #1
     f98:	ca00001e 	bgt	1018 <display_test+0x110>
                fakeSpect[i] = fakeSpect[i - 1] + (rand() % 800 - 400);
     f9c:	e51b3010 	ldr	r3, [r11, #-16]
     fa0:	e2432001 	sub	r2, r3, #1
     fa4:	e30f3058 	movw	r3, #61528	; 0xf058
     fa8:	e34f3fff 	movt	r3, #65535	; 0xffff
     fac:	e1a02102 	lsl	r2, r2, #2
     fb0:	e24b100c 	sub	r1, r11, #12
     fb4:	e0812002 	add	r2, r1, r2
     fb8:	e0823003 	add	r3, r2, r3
     fbc:	e5934000 	ldr	r4, [r3]
     fc0:	eb0010d1 	bl	530c <rand>
     fc4:	e1a02000 	mov	r2, r0
     fc8:	e308351f 	movw	r3, #34079	; 0x851f
     fcc:	e34531eb 	movt	r3, #20971	; 0x51eb
     fd0:	e0c30293 	smull	r0, r3, r3, r2
     fd4:	e1a01443 	asr	r1, r3, #8
     fd8:	e1a03fc2 	asr	r3, r2, #31
     fdc:	e0633001 	rsb	r3, r3, r1
     fe0:	e3a01e32 	mov	r1, #800	; 0x320
     fe4:	e0030391 	mul	r3, r1, r3
     fe8:	e0633002 	rsb	r3, r3, r2
     fec:	e0843003 	add	r3, r4, r3
     ff0:	e2432e19 	sub	r2, r3, #400	; 0x190
     ff4:	e51b1010 	ldr	r1, [r11, #-16]
     ff8:	e30f3058 	movw	r3, #61528	; 0xf058
     ffc:	e34f3fff 	movt	r3, #65535	; 0xffff
    1000:	e1a01101 	lsl	r1, r1, #2
    1004:	e24b000c 	sub	r0, r11, #12
    1008:	e0801001 	add	r1, r0, r1
    100c:	e0813003 	add	r3, r1, r3
    1010:	e5832000 	str	r2, [r3]
    1014:	ea000037 	b	10f8 <display_test+0x1f0>
            else if (rand() % 10 < 3)
    1018:	eb0010bb 	bl	530c <rand>
    101c:	e1a01000 	mov	r1, r0
    1020:	e3063667 	movw	r3, #26215	; 0x6667
    1024:	e3463666 	movt	r3, #26214	; 0x6666
    1028:	e0c32193 	smull	r2, r3, r3, r1
    102c:	e1a02143 	asr	r2, r3, #2
    1030:	e1a03fc1 	asr	r3, r1, #31
    1034:	e0632002 	rsb	r2, r3, r2
    1038:	e1a03002 	mov	r3, r2
    103c:	e1a03103 	lsl	r3, r3, #2
    1040:	e0833002 	add	r3, r3, r2
    1044:	e1a03083 	lsl	r3, r3, #1
    1048:	e0632001 	rsb	r2, r3, r1
    104c:	e3520002 	cmp	r2, #2
    1050:	ca000014 	bgt	10a8 <display_test+0x1a0>
                fakeSpect[i] = rand() % 20000;
    1054:	eb0010ac 	bl	530c <rand>
    1058:	e1a02000 	mov	r2, r0
    105c:	e3083bad 	movw	r3, #35757	; 0x8bad
    1060:	e34638db 	movt	r3, #26843	; 0x68db
    1064:	e0c30293 	smull	r0, r3, r3, r2
    1068:	e1a016c3 	asr	r1, r3, #13
    106c:	e1a03fc2 	asr	r3, r2, #31
    1070:	e0633001 	rsb	r3, r3, r1
    1074:	e3041e20 	movw	r1, #20000	; 0x4e20
    1078:	e0030391 	mul	r3, r1, r3
    107c:	e0633002 	rsb	r3, r3, r2
    1080:	e1a02003 	mov	r2, r3
    1084:	e51b1010 	ldr	r1, [r11, #-16]
    1088:	e30f3058 	movw	r3, #61528	; 0xf058
    108c:	e34f3fff 	movt	r3, #65535	; 0xffff
    1090:	e1a01101 	lsl	r1, r1, #2
    1094:	e24b000c 	sub	r0, r11, #12
    1098:	e0801001 	add	r1, r0, r1
    109c:	e0813003 	add	r3, r1, r3
    10a0:	e5832000 	str	r2, [r3]
    10a4:	ea000013 	b	10f8 <display_test+0x1f0>
            else 
                fakeSpect[i] = rand() % 12000;
    10a8:	eb001097 	bl	530c <rand>
    10ac:	e1a02000 	mov	r2, r0
    10b0:	e30139f1 	movw	r3, #6641	; 0x19f1
    10b4:	e3403576 	movt	r3, #1398	; 0x576
    10b8:	e0c31293 	smull	r1, r3, r3, r2
    10bc:	e1a01443 	asr	r1, r3, #8
    10c0:	e1a03fc2 	asr	r3, r2, #31
    10c4:	e0633001 	rsb	r3, r3, r1
    10c8:	e3021ee0 	movw	r1, #12000	; 0x2ee0
    10cc:	e0030391 	mul	r3, r1, r3
    10d0:	e0633002 	rsb	r3, r3, r2
    10d4:	e1a02003 	mov	r2, r3
    10d8:	e51b1010 	ldr	r1, [r11, #-16]
    10dc:	e30f3058 	movw	r3, #61528	; 0xf058
    10e0:	e34f3fff 	movt	r3, #65535	; 0xffff
    10e4:	e1a01101 	lsl	r1, r1, #2
    10e8:	e24b000c 	sub	r0, r11, #12
    10ec:	e0801001 	add	r1, r0, r1
    10f0:	e0813003 	add	r3, r1, r3
    10f4:	e5832000 	str	r2, [r3]
void display_test() {
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
    unsigned k = 100;
    unsigned fakeSpect[MAX_LINES] = {0}; 
    while(1) {
        for (unsigned i = 0; i < k; i++) {
    10f8:	e51b3010 	ldr	r3, [r11, #-16]
    10fc:	e2833001 	add	r3, r3, #1
    1100:	e50b3010 	str	r3, [r11, #-16]
    1104:	e51b2010 	ldr	r2, [r11, #-16]
    1108:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    110c:	e1520003 	cmp	r2, r3
    1110:	3affff8f 	bcc	f54 <display_test+0x4c>
            else if (rand() % 10 < 3)
                fakeSpect[i] = rand() % 20000;
            else 
                fakeSpect[i] = rand() % 12000;
        }
        VIS_VGA_UpdateFrame(k, fakeSpect);
    1114:	e24b3efa 	sub	r3, r11, #4000	; 0xfa0
    1118:	e243300c 	sub	r3, r3, #12
    111c:	e2433008 	sub	r3, r3, #8
    1120:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
    1124:	e1a01003 	mov	r1, r3
    1128:	eb0001c1 	bl	1834 <VIS_VGA_UpdateFrame>
        // VIS_VGA_ColorTest();
    }
    112c:	eaffff85 	b	f48 <display_test+0x40>

00001130 <color_test>:
}

void color_test() {
    1130:	e92d4800 	push	{r11, lr}
    1134:	e28db004 	add	r11, sp, #4
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
    1138:	e3a00103 	mov	r0, #-1073741824	; 0xc0000000
    113c:	e3a01332 	mov	r1, #-939524096	; 0xc8000000
    1140:	eb000330 	bl	1e08 <VIS_VGA_SetBuffer>
    VIS_VGA_ColorTest();
    1144:	eb0002f6 	bl	1d24 <VIS_VGA_ColorTest>
}
    1148:	e8bd8800 	pop	{r11, pc}

0000114c <audio_transform_test>:

void audio_transform_test() {
    114c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, r11, lr}
    1150:	e28db01c 	add	r11, sp, #28
    1154:	e24dd090 	sub	sp, sp, #144	; 0x90
    VIS_VGA_SetBuffer(SDRAM_BASE, FPGA_ONCHIP_BASE);
    1158:	e3a00103 	mov	r0, #-1073741824	; 0xc0000000
    115c:	e3a01332 	mov	r1, #-939524096	; 0xc8000000
    1160:	eb000328 	bl	1e08 <VIS_VGA_SetBuffer>
    volatile int * red_LED_ptr = (int *)LEDR_BASE;
    1164:	e3a03000 	mov	r3, #0
    1168:	e34f3f20 	movt	r3, #65312	; 0xff20
    116c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    volatile int * audio_ptr   = (int *)AUDIO_BASE;
    1170:	e3a03dc1 	mov	r3, #12352	; 0x3040
    1174:	e34f3f20 	movt	r3, #65312	; 0xff20
    1178:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

    /* used for audio record/playback */
    int fifospace;
    int buffer_index = 0;
    117c:	e3a03000 	mov	r3, #0
    1180:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int fourierIndex = 0;
    1184:	e3a03000 	mov	r3, #0
    1188:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    const int fourierLength = 240;
    118c:	e3a030f0 	mov	r3, #240	; 0xf0
    1190:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    Complex cArray[fourierLength];
    1194:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1198:	e2433001 	sub	r3, r3, #1
    119c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    11a0:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    11a4:	e1a02001 	mov	r2, r1
    11a8:	e3a03000 	mov	r3, #0
    11ac:	e1a01d22 	lsr	r1, r2, #26
    11b0:	e1a05303 	lsl	r5, r3, #6
    11b4:	e1815005 	orr	r5, r1, r5
    11b8:	e1a04302 	lsl	r4, r2, #6
    11bc:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    11c0:	e1a02001 	mov	r2, r1
    11c4:	e3a03000 	mov	r3, #0
    11c8:	e1a01d22 	lsr	r1, r2, #26
    11cc:	e1a07303 	lsl	r7, r3, #6
    11d0:	e1817007 	orr	r7, r1, r7
    11d4:	e1a06302 	lsl	r6, r2, #6
    11d8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    11dc:	e1a03183 	lsl	r3, r3, #3
    11e0:	e2833003 	add	r3, r3, #3
    11e4:	e2833007 	add	r3, r3, #7
    11e8:	e1a031a3 	lsr	r3, r3, #3
    11ec:	e1a03183 	lsl	r3, r3, #3
    11f0:	e04dd003 	sub	sp, sp, r3
    11f4:	e1a0300d 	mov	r3, sp
    11f8:	e2833003 	add	r3, r3, #3
    11fc:	e1a03123 	lsr	r3, r3, #2
    1200:	e1a03103 	lsl	r3, r3, #2
    1204:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    Complex fourierResult[fourierLength];
    1208:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    120c:	e2433001 	sub	r3, r3, #1
    1210:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
    1214:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    1218:	e1a02001 	mov	r2, r1
    121c:	e3a03000 	mov	r3, #0
    1220:	e1a01d22 	lsr	r1, r2, #26
    1224:	e1a09303 	lsl	r9, r3, #6
    1228:	e1819009 	orr	r9, r1, r9
    122c:	e1a08302 	lsl	r8, r2, #6
    1230:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    1234:	e1a02001 	mov	r2, r1
    1238:	e3a03000 	mov	r3, #0
    123c:	e1a01d22 	lsr	r1, r2, #26
    1240:	e1a00303 	lsl	r0, r3, #6
    1244:	e50b0070 	str	r0, [r11, #-112]	; 0xffffff90
    1248:	e51b0070 	ldr	r0, [r11, #-112]	; 0xffffff90
    124c:	e1810000 	orr	r0, r1, r0
    1250:	e50b0070 	str	r0, [r11, #-112]	; 0xffffff90
    1254:	e1a01302 	lsl	r1, r2, #6
    1258:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    125c:	e1a03183 	lsl	r3, r3, #3
    1260:	e2833003 	add	r3, r3, #3
    1264:	e2833007 	add	r3, r3, #7
    1268:	e1a031a3 	lsr	r3, r3, #3
    126c:	e1a03183 	lsl	r3, r3, #3
    1270:	e04dd003 	sub	sp, sp, r3
    1274:	e1a0300d 	mov	r3, sp
    1278:	e2833003 	add	r3, r3, #3
    127c:	e1a03123 	lsr	r3, r3, #2
    1280:	e1a03103 	lsl	r3, r3, #2
    1284:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    unsigned result[fourierLength];
    1288:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    128c:	e2433001 	sub	r3, r3, #1
    1290:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
    1294:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    1298:	e1a02001 	mov	r2, r1
    129c:	e3a03000 	mov	r3, #0
    12a0:	e1a01da2 	lsr	r1, r2, #27
    12a4:	e1a00283 	lsl	r0, r3, #5
    12a8:	e50b0078 	str	r0, [r11, #-120]	; 0xffffff88
    12ac:	e51b0078 	ldr	r0, [r11, #-120]	; 0xffffff88
    12b0:	e1810000 	orr	r0, r1, r0
    12b4:	e50b0078 	str	r0, [r11, #-120]	; 0xffffff88
    12b8:	e1a01282 	lsl	r1, r2, #5
    12bc:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    12c0:	e1a02001 	mov	r2, r1
    12c4:	e3a03000 	mov	r3, #0
    12c8:	e1a01da2 	lsr	r1, r2, #27
    12cc:	e1a00283 	lsl	r0, r3, #5
    12d0:	e50b0080 	str	r0, [r11, #-128]	; 0xffffff80
    12d4:	e51b0080 	ldr	r0, [r11, #-128]	; 0xffffff80
    12d8:	e1810000 	orr	r0, r1, r0
    12dc:	e50b0080 	str	r0, [r11, #-128]	; 0xffffff80
    12e0:	e1a01282 	lsl	r1, r2, #5
    12e4:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    12e8:	e1a03103 	lsl	r3, r3, #2
    12ec:	e2833003 	add	r3, r3, #3
    12f0:	e2833007 	add	r3, r3, #7
    12f4:	e1a031a3 	lsr	r3, r3, #3
    12f8:	e1a03183 	lsl	r3, r3, #3
    12fc:	e04dd003 	sub	sp, sp, r3
    1300:	e1a0300d 	mov	r3, sp
    1304:	e2833003 	add	r3, r3, #3
    1308:	e1a03123 	lsr	r3, r3, #2
    130c:	e1a03103 	lsl	r3, r3, #2
    1310:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
    Complex c;

    Complex omegaInverse[fourierLength];
    1314:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1318:	e2433001 	sub	r3, r3, #1
    131c:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
    1320:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    1324:	e1a02001 	mov	r2, r1
    1328:	e3a03000 	mov	r3, #0
    132c:	e1a01d22 	lsr	r1, r2, #26
    1330:	e1a00303 	lsl	r0, r3, #6
    1334:	e50b0088 	str	r0, [r11, #-136]	; 0xffffff78
    1338:	e51b0088 	ldr	r0, [r11, #-136]	; 0xffffff78
    133c:	e1810000 	orr	r0, r1, r0
    1340:	e50b0088 	str	r0, [r11, #-136]	; 0xffffff78
    1344:	e1a01302 	lsl	r1, r2, #6
    1348:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    134c:	e1a02001 	mov	r2, r1
    1350:	e3a03000 	mov	r3, #0
    1354:	e1a01d22 	lsr	r1, r2, #26
    1358:	e1a00303 	lsl	r0, r3, #6
    135c:	e50b0090 	str	r0, [r11, #-144]	; 0xffffff70
    1360:	e51b0090 	ldr	r0, [r11, #-144]	; 0xffffff70
    1364:	e1810000 	orr	r0, r1, r0
    1368:	e50b0090 	str	r0, [r11, #-144]	; 0xffffff70
    136c:	e1a01302 	lsl	r1, r2, #6
    1370:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1374:	e1a03183 	lsl	r3, r3, #3
    1378:	e2833003 	add	r3, r3, #3
    137c:	e2833007 	add	r3, r3, #7
    1380:	e1a031a3 	lsr	r3, r3, #3
    1384:	e1a03183 	lsl	r3, r3, #3
    1388:	e04dd003 	sub	sp, sp, r3
    138c:	e1a0300d 	mov	r3, sp
    1390:	e2833003 	add	r3, r3, #3
    1394:	e1a03123 	lsr	r3, r3, #2
    1398:	e1a03103 	lsl	r3, r3, #2
    139c:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac

    Complex omegaExp[fourierLength][fourierLength];
    13a0:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    13a4:	e2433001 	sub	r3, r3, #1
    13a8:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
    13ac:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    13b0:	e1a02001 	mov	r2, r1
    13b4:	e3a03000 	mov	r3, #0
    13b8:	e1a01d22 	lsr	r1, r2, #26
    13bc:	e1a00303 	lsl	r0, r3, #6
    13c0:	e50b0098 	str	r0, [r11, #-152]	; 0xffffff68
    13c4:	e51b0098 	ldr	r0, [r11, #-152]	; 0xffffff68
    13c8:	e1810000 	orr	r0, r1, r0
    13cc:	e50b0098 	str	r0, [r11, #-152]	; 0xffffff68
    13d0:	e1a01302 	lsl	r1, r2, #6
    13d4:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    13d8:	e2433001 	sub	r3, r3, #1
    13dc:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
    13e0:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    13e4:	e1a00003 	mov	r0, r3
    13e8:	e3a01000 	mov	r1, #0
    13ec:	e51bc034 	ldr	r12, [r11, #-52]	; 0xffffffcc
    13f0:	e1a0200c 	mov	r2, r12
    13f4:	e3a03000 	mov	r3, #0
    13f8:	e00e0192 	mul	lr, r2, r1
    13fc:	e00c0390 	mul	r12, r0, r3
    1400:	e08ec00c 	add	r12, lr, r12
    1404:	e0832290 	umull	r2, r3, r0, r2
    1408:	e08c1003 	add	r1, r12, r3
    140c:	e1a03001 	mov	r3, r1
    1410:	e1a01d22 	lsr	r1, r2, #26
    1414:	e1a00303 	lsl	r0, r3, #6
    1418:	e50b00a0 	str	r0, [r11, #-160]	; 0xffffff60
    141c:	e51b00a0 	ldr	r0, [r11, #-160]	; 0xffffff60
    1420:	e1810000 	orr	r0, r1, r0
    1424:	e50b00a0 	str	r0, [r11, #-160]	; 0xffffff60
    1428:	e1a01302 	lsl	r1, r2, #6
    142c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1430:	e1a00003 	mov	r0, r3
    1434:	e3a01000 	mov	r1, #0
    1438:	e51bc034 	ldr	r12, [r11, #-52]	; 0xffffffcc
    143c:	e1a0200c 	mov	r2, r12
    1440:	e3a03000 	mov	r3, #0
    1444:	e00e0192 	mul	lr, r2, r1
    1448:	e00c0390 	mul	r12, r0, r3
    144c:	e08ec00c 	add	r12, lr, r12
    1450:	e0832290 	umull	r2, r3, r0, r2
    1454:	e08c1003 	add	r1, r12, r3
    1458:	e1a03001 	mov	r3, r1
    145c:	e1a01d22 	lsr	r1, r2, #26
    1460:	e1a00303 	lsl	r0, r3, #6
    1464:	e50b00a8 	str	r0, [r11, #-168]	; 0xffffff58
    1468:	e51b00a8 	ldr	r0, [r11, #-168]	; 0xffffff58
    146c:	e1810000 	orr	r0, r1, r0
    1470:	e50b00a8 	str	r0, [r11, #-168]	; 0xffffff58
    1474:	e1a01302 	lsl	r1, r2, #6
    1478:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    147c:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    1480:	e0030392 	mul	r3, r2, r3
    1484:	e1a03183 	lsl	r3, r3, #3
    1488:	e2833003 	add	r3, r3, #3
    148c:	e2833007 	add	r3, r3, #7
    1490:	e1a031a3 	lsr	r3, r3, #3
    1494:	e1a03183 	lsl	r3, r3, #3
    1498:	e04dd003 	sub	sp, sp, r3
    149c:	e1a0300d 	mov	r3, sp
    14a0:	e2833003 	add	r3, r3, #3
    14a4:	e1a03123 	lsr	r3, r3, #2
    14a8:	e1a03103 	lsl	r3, r3, #2
    14ac:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
    initExps( fourierLength, omegaExp);
    14b0:	e51b3060 	ldr	r3, [r11, #-96]	; 0xffffffa0
    14b4:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
    14b8:	e1a01003 	mov	r1, r3
    14bc:	eb0006f3 	bl	3090 <initExps>

    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
    14c0:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    14c4:	e5933004 	ldr	r3, [r3, #4]
    14c8:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
    14cc:	ea000000 	b	14d4 <audio_transform_test+0x388>
                // reset counter
                buffer_index = 0;
            }

            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
    14d0:	e1a00000 	nop			; (mov r0, r0)
        // is full
        // while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
        while(1) {
            // left_buffer[buffer_index]  = *(audio_ptr + 2);
            // right_buffer[buffer_index] = *(audio_ptr + 3);
            while (!(fifospace & 0x000000FF));
    14d4:	e1a00000 	nop			; (mov r0, r0)
    14d8:	e51b3064 	ldr	r3, [r11, #-100]	; 0xffffff9c
    14dc:	e6ef3073 	uxtb	r3, r3
    14e0:	e3530000 	cmp	r3, #0
    14e4:	0afffffb 	beq	14d8 <audio_transform_test+0x38c>
            *(audio_ptr + 2)  = *(audio_ptr + 2) >> 6;
    14e8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    14ec:	e2833008 	add	r3, r3, #8
    14f0:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    14f4:	e2822008 	add	r2, r2, #8
    14f8:	e5922000 	ldr	r2, [r2]
    14fc:	e1a02342 	asr	r2, r2, #6
    1500:	e5832000 	str	r2, [r3]
            *(audio_ptr + 3)  = *(audio_ptr + 3) >> 6;
    1504:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    1508:	e283300c 	add	r3, r3, #12
    150c:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    1510:	e282200c 	add	r2, r2, #12
    1514:	e5922000 	ldr	r2, [r2]
    1518:	e1a02342 	asr	r2, r2, #6
    151c:	e5832000 	str	r2, [r3]
            //     }else{
            //         count ++;
            //     }
            //   }
            
            if(buffer_index == fourierLength){
    1520:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1524:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    1528:	e1520003 	cmp	r2, r3
    152c:	1a000021 	bne	15b8 <audio_transform_test+0x46c>
                buffer_index = 0;
    1530:	e3a03000 	mov	r3, #0
    1534:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
                //sdft(cArray, fourierLength, omegaInverse, fourierResult);
                fdft(cArray, fourierLength, omegaExp, fourierResult);
    1538:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    153c:	e51b2060 	ldr	r2, [r11, #-96]	; 0xffffffa0
    1540:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1544:	e1a00001 	mov	r0, r1
    1548:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
    154c:	eb000737 	bl	3230 <fdft>
                for(int i=0;i<fourierLength; i++){
    1550:	e3a03000 	mov	r3, #0
    1554:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    1558:	ea00000d 	b	1594 <audio_transform_test+0x448>
                    result[i] = magnitude(fourierResult[i]);
    155c:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    1560:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1564:	e1a03183 	lsl	r3, r3, #3
    1568:	e0823003 	add	r3, r2, r3
    156c:	e8930003 	ldm	r3, {r0, r1}
    1570:	eb000617 	bl	2dd4 <magnitude>
    1574:	e1a03000 	mov	r3, r0
    1578:	e1a01003 	mov	r1, r3
    157c:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    1580:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1584:	e7831102 	str	r1, [r3, r2, lsl #2]
            
            if(buffer_index == fourierLength){
                buffer_index = 0;
                //sdft(cArray, fourierLength, omegaInverse, fourierResult);
                fdft(cArray, fourierLength, omegaExp, fourierResult);
                for(int i=0;i<fourierLength; i++){
    1588:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    158c:	e2833001 	add	r3, r3, #1
    1590:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    1594:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1598:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    159c:	e1520003 	cmp	r2, r3
    15a0:	baffffed 	blt	155c <audio_transform_test+0x410>
                    result[i] = magnitude(fourierResult[i]);
                }
                    VIS_VGA_UpdateFrame(fourierLength, result );
    15a4:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    15a8:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    15ac:	e1a00002 	mov	r0, r2
    15b0:	e1a01003 	mov	r1, r3
    15b4:	eb00009e 	bl	1834 <VIS_VGA_UpdateFrame>
            }
            
            
            c.i = 0;
    15b8:	e3a03000 	mov	r3, #0
    15bc:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
            c.r = ((float) *(audio_ptr + 2))/200000000;
    15c0:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    15c4:	e2833008 	add	r3, r3, #8
    15c8:	e5933000 	ldr	r3, [r3]
    15cc:	ee073a90 	vmov	s15, r3
    15d0:	eeb87ae7 	vcvt.f32.s32	s14, s15
    15d4:	eddf7a20 	vldr	s15, [pc, #128]	; 165c <audio_transform_test+0x510>
    15d8:	eec77a27 	vdiv.f32	s15, s14, s15
    15dc:	ed4b7a1b 	vstr	s15, [r11, #-108]	; 0xffffff94
            cArray[buffer_index] = c;
    15e0:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    15e4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    15e8:	e1a03183 	lsl	r3, r3, #3
    15ec:	e0823003 	add	r3, r2, r3
    15f0:	e24b206c 	sub	r2, r11, #108	; 0x6c
    15f4:	e8920003 	ldm	r2, {r0, r1}
    15f8:	e8830003 	stm	r3, {r0, r1}

            ++buffer_index;
    15fc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1600:	e2833001 	add	r3, r3, #1
    1604:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
            if (buffer_index >= 0xFFFFFF) buffer_index = 0;
    1608:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    160c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    1610:	e34030ff 	movt	r3, #255	; 0xff
    1614:	e1520003 	cmp	r2, r3
    1618:	da000001 	ble	1624 <audio_transform_test+0x4d8>
    161c:	e3a03000 	mov	r3, #0
    1620:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
            VIS_HEX_SetUint_HEX(buffer_index);
    1624:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1628:	e1a00003 	mov	r0, r3
    162c:	ebfffc8b 	bl	860 <VIS_HEX_SetUint_HEX>
            if (VIS_Uart_RxChar(JTAG_UART_ptr) != 0) {
    1630:	e3073e38 	movw	r3, #32312	; 0x7e38
    1634:	e3403000 	movt	r3, #0
    1638:	e5933000 	ldr	r3, [r3]
    163c:	e1a00003 	mov	r0, r3
    1640:	ebfffb97 	bl	4a4 <VIS_Uart_RxChar>
    1644:	e1a03000 	mov	r3, r0
    1648:	e3530000 	cmp	r3, #0
    164c:	0affff9f 	beq	14d0 <audio_transform_test+0x384>
                // reset counter
                buffer_index = 0;
    1650:	e3a03000 	mov	r3, #0
    1654:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
            }

            // fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        }
    1658:	eaffff9c 	b	14d0 <audio_transform_test+0x384>
    165c:	4d3ebc20 	.word	0x4d3ebc20

00001660 <check_KEYs>:
    }
}
void check_KEYs(int * KEY0, int * KEY1, int * KEY2, int * counter) {
    1660:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1664:	e28db000 	add	r11, sp, #0
    1668:	e24dd024 	sub	sp, sp, #36	; 0x24
    166c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1670:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    1674:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    1678:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    volatile int * KEY_ptr   = (int *)KEY_BASE;
    167c:	e3a03050 	mov	r3, #80	; 0x50
    1680:	e34f3f20 	movt	r3, #65312	; 0xff20
    1684:	e50b3008 	str	r3, [r11, #-8]
    volatile int * audio_ptr = (int *)AUDIO_BASE;
    1688:	e3a03dc1 	mov	r3, #12352	; 0x3040
    168c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1690:	e50b300c 	str	r3, [r11, #-12]
    int            KEY_value;

    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
    1694:	e51b3008 	ldr	r3, [r11, #-8]
    1698:	e5933000 	ldr	r3, [r3]
    169c:	e50b3010 	str	r3, [r11, #-16]
    while (*KEY_ptr)
    16a0:	e1a00000 	nop			; (mov r0, r0)
    16a4:	e51b3008 	ldr	r3, [r11, #-8]
    16a8:	e5933000 	ldr	r3, [r3]
    16ac:	e3530000 	cmp	r3, #0
    16b0:	1afffffb 	bne	16a4 <check_KEYs+0x44>
        ; // wait for pushbutton KEY release

    if (KEY_value == 0x1) // check KEY0
    16b4:	e51b3010 	ldr	r3, [r11, #-16]
    16b8:	e3530001 	cmp	r3, #1
    16bc:	1a00000c 	bne	16f4 <check_KEYs+0x94>
    {
        // reset counter to start recording
        *counter = 0;
    16c0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    16c4:	e3a02000 	mov	r2, #0
    16c8:	e5832000 	str	r2, [r3]
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    16cc:	e51b300c 	ldr	r3, [r11, #-12]
    16d0:	e3a02004 	mov	r2, #4
    16d4:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    16d8:	e51b300c 	ldr	r3, [r11, #-12]
    16dc:	e3a02000 	mov	r2, #0
    16e0:	e5832000 	str	r2, [r3]

        *KEY0 = 1;
    16e4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    16e8:	e3a02001 	mov	r2, #1
    16ec:	e5832000 	str	r2, [r3]
    16f0:	ea00001e 	b	1770 <check_KEYs+0x110>
    } else if (KEY_value == 0x2) // check KEY1
    16f4:	e51b3010 	ldr	r3, [r11, #-16]
    16f8:	e3530002 	cmp	r3, #2
    16fc:	1a00000c 	bne	1734 <check_KEYs+0xd4>
    {
        // reset counter to start playback
        *counter = 0;
    1700:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1704:	e3a02000 	mov	r2, #0
    1708:	e5832000 	str	r2, [r3]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
    170c:	e51b300c 	ldr	r3, [r11, #-12]
    1710:	e3a02008 	mov	r2, #8
    1714:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    1718:	e51b300c 	ldr	r3, [r11, #-12]
    171c:	e3a02000 	mov	r2, #0
    1720:	e5832000 	str	r2, [r3]

        *KEY1 = 1;
    1724:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1728:	e3a02001 	mov	r2, #1
    172c:	e5832000 	str	r2, [r3]
    1730:	ea00000e 	b	1770 <check_KEYs+0x110>
    }
    else if (KEY_value == 0x4) // check KEY2
    1734:	e51b3010 	ldr	r3, [r11, #-16]
    1738:	e3530004 	cmp	r3, #4
    173c:	1a00000b 	bne	1770 <check_KEYs+0x110>
    {
        // reset counter to start playback
        *counter = 0;
    1740:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1744:	e3a02000 	mov	r2, #0
    1748:	e5832000 	str	r2, [r3]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
    174c:	e51b300c 	ldr	r3, [r11, #-12]
    1750:	e3a02008 	mov	r2, #8
    1754:	e5832000 	str	r2, [r3]
        *(audio_ptr) = 0x0;
    1758:	e51b300c 	ldr	r3, [r11, #-12]
    175c:	e3a02000 	mov	r2, #0
    1760:	e5832000 	str	r2, [r3]

        *KEY2 = 1;
    1764:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1768:	e3a02001 	mov	r2, #1
    176c:	e5832000 	str	r2, [r3]
    }
}
    1770:	e28bd000 	add	sp, r11, #0
    1774:	e8bd0800 	ldmfd	sp!, {r11}
    1778:	e12fff1e 	bx	lr
    177c:	00000000 	andeq	r0, r0, r0

00001780 <VIS_VGA_Setup>:

static RingProperty ring;
static Line canvasHistory[2][MAX_LINES]; 
static int historyIndicator;

void VIS_VGA_Setup() {
    1780:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1784:	e28db000 	add	r11, sp, #0
    ring.colorSeed = 0;
    1788:	e30832a0 	movw	r3, #33440	; 0x82a0
    178c:	e3403000 	movt	r3, #0
    1790:	e3a02000 	mov	r2, #0
    1794:	e5832000 	str	r2, [r3]
    ring.offsetDeg = 0;
    1798:	e30832a0 	movw	r3, #33440	; 0x82a0
    179c:	e3403000 	movt	r3, #0
    17a0:	e3a02000 	mov	r2, #0
    17a4:	e5832004 	str	r2, [r3, #4]
    ring.radius = SCREEN_H / 6;
    17a8:	e30832a0 	movw	r3, #33440	; 0x82a0
    17ac:	e3403000 	movt	r3, #0
    17b0:	e3a02028 	mov	r2, #40	; 0x28
    17b4:	e5832008 	str	r2, [r3, #8]
    ring.inOffset = 100;
    17b8:	e30832a0 	movw	r3, #33440	; 0x82a0
    17bc:	e3403000 	movt	r3, #0
    17c0:	e3a02064 	mov	r2, #100	; 0x64
    17c4:	e583200c 	str	r2, [r3, #12]
    ring.loudnessThreshold = 1000;
    17c8:	e30832a0 	movw	r3, #33440	; 0x82a0
    17cc:	e3403000 	movt	r3, #0
    17d0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    17d4:	e5832018 	str	r2, [r3, #24]
    ring.cX = SCREEN_W / 2;
    17d8:	e30832a0 	movw	r3, #33440	; 0x82a0
    17dc:	e3403000 	movt	r3, #0
    17e0:	e3a020a0 	mov	r2, #160	; 0xa0
    17e4:	e5832010 	str	r2, [r3, #16]
    ring.cY = SCREEN_H / 2;
    17e8:	e30832a0 	movw	r3, #33440	; 0x82a0
    17ec:	e3403000 	movt	r3, #0
    17f0:	e3a02078 	mov	r2, #120	; 0x78
    17f4:	e5832014 	str	r2, [r3, #20]
    historyIndicator = 0;
    17f8:	e3013efc 	movw	r3, #7932	; 0x1efc
    17fc:	e3403001 	movt	r3, #1
    1800:	e3a02000 	mov	r2, #0
    1804:	e5832000 	str	r2, [r3]
}
    1808:	e28bd000 	add	sp, r11, #0
    180c:	e8bd0800 	ldmfd	sp!, {r11}
    1810:	e12fff1e 	bx	lr

00001814 <get_ring>:

RingProperty *get_ring() {
    1814:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1818:	e28db000 	add	r11, sp, #0
    return &ring;
    181c:	e30832a0 	movw	r3, #33440	; 0x82a0
    1820:	e3403000 	movt	r3, #0
}
    1824:	e1a00003 	mov	r0, r3
    1828:	e28bd000 	add	sp, r11, #0
    182c:	e8bd0800 	ldmfd	sp!, {r11}
    1830:	e12fff1e 	bx	lr

00001834 <VIS_VGA_UpdateFrame>:

void VIS_VGA_UpdateFrame(unsigned size, unsigned spect[]) {
    1834:	e92d4810 	push	{r4, r11, lr}
    1838:	e28db008 	add	r11, sp, #8
    183c:	e24dd044 	sub	sp, sp, #68	; 0x44
    1840:	e50b0040 	str	r0, [r11, #-64]	; 0xffffffc0
    1844:	e50b1044 	str	r1, [r11, #-68]	; 0xffffffbc
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    1848:	e1a00000 	nop			; (mov r0, r0)
    184c:	e3073e40 	movw	r3, #32320	; 0x7e40
    1850:	e3403000 	movt	r3, #0
    1854:	e5933000 	ldr	r3, [r3]
    1858:	e283300c 	add	r3, r3, #12
    185c:	e5933000 	ldr	r3, [r3]
    1860:	e2033001 	and	r3, r3, #1
    1864:	e3530000 	cmp	r3, #0
    1868:	1afffff7 	bne	184c <VIS_VGA_UpdateFrame+0x18>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    186c:	e3073e40 	movw	r3, #32320	; 0x7e40
    1870:	e3403000 	movt	r3, #0
    1874:	e5933000 	ldr	r3, [r3]
    1878:	e5932004 	ldr	r2, [r3, #4]
    187c:	e308329c 	movw	r3, #33436	; 0x829c
    1880:	e3403000 	movt	r3, #0
    1884:	e5832000 	str	r2, [r3]
    historyIndicator = 1 - historyIndicator;
    1888:	e3013efc 	movw	r3, #7932	; 0x1efc
    188c:	e3403001 	movt	r3, #1
    1890:	e5933000 	ldr	r3, [r3]
    1894:	e2632001 	rsb	r2, r3, #1
    1898:	e3013efc 	movw	r3, #7932	; 0x1efc
    189c:	e3403001 	movt	r3, #1
    18a0:	e5832000 	str	r2, [r3]

    // find the largest number and default max is set in ring property
    unsigned maxLoudness = ring.loudnessThreshold;
    18a4:	e30832a0 	movw	r3, #33440	; 0x82a0
    18a8:	e3403000 	movt	r3, #0
    18ac:	e5933018 	ldr	r3, [r3, #24]
    18b0:	e50b3010 	str	r3, [r11, #-16]
    for (int i = 0; i < size; i++) {
    18b4:	e3a03000 	mov	r3, #0
    18b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    18bc:	ea00000b 	b	18f0 <VIS_VGA_UpdateFrame+0xbc>
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    18c0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18c4:	e1a03103 	lsl	r3, r3, #2
    18c8:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    18cc:	e0823003 	add	r3, r2, r3
    18d0:	e5933000 	ldr	r3, [r3]
    18d4:	e51b2010 	ldr	r2, [r11, #-16]
    18d8:	e1520003 	cmp	r2, r3
    18dc:	21a03002 	movcs	r3, r2
    18e0:	e50b3010 	str	r3, [r11, #-16]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    historyIndicator = 1 - historyIndicator;

    // find the largest number and default max is set in ring property
    unsigned maxLoudness = ring.loudnessThreshold;
    for (int i = 0; i < size; i++) {
    18e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    18e8:	e2833001 	add	r3, r3, #1
    18ec:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    18f0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18f4:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    18f8:	e1520003 	cmp	r2, r3
    18fc:	3affffef 	bcc	18c0 <VIS_VGA_UpdateFrame+0x8c>
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    }

    // // draw on VGA
    // unsigned startDeg = ring.offsetDeg;
    for (int i = 0; i < size; i++) {
    1900:	e3a03000 	mov	r3, #0
    1904:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1908:	ea0000fa 	b	1cf8 <VIS_VGA_UpdateFrame+0x4c4>
        unsigned color = color_from_gradient_hsv(ring.colorSeed + i * COLOR_RANGE / size);
    190c:	e30832a0 	movw	r3, #33440	; 0x82a0
    1910:	e3403000 	movt	r3, #0
    1914:	e5933000 	ldr	r3, [r3]
    1918:	e1a04003 	mov	r4, r3
    191c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1920:	e1a03002 	mov	r3, r2
    1924:	e1a03203 	lsl	r3, r3, #4
    1928:	e0623003 	rsb	r3, r2, r3
    192c:	e1a03203 	lsl	r3, r3, #4
    1930:	e1a00003 	mov	r0, r3
    1934:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    1938:	eb000bad 	bl	47f4 <__aeabi_uidiv>
    193c:	e1a03000 	mov	r3, r0
    1940:	e0843003 	add	r3, r4, r3
    1944:	e1a00003 	mov	r0, r3
    1948:	eb000230 	bl	2210 <color_from_gradient_hsv>
    194c:	e1a03000 	mov	r3, r0
    1950:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
        unsigned degree = i * 360 / size + (ring.offsetDeg >> 4);
    1954:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1958:	e3a02f5a 	mov	r2, #360	; 0x168
    195c:	e0030392 	mul	r3, r2, r3
    1960:	e1a00003 	mov	r0, r3
    1964:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    1968:	eb000ba1 	bl	47f4 <__aeabi_uidiv>
    196c:	e1a03000 	mov	r3, r0
    1970:	e1a02003 	mov	r2, r3
    1974:	e30832a0 	movw	r3, #33440	; 0x82a0
    1978:	e3403000 	movt	r3, #0
    197c:	e5933004 	ldr	r3, [r3, #4]
    1980:	e1a03243 	asr	r3, r3, #4
    1984:	e0823003 	add	r3, r2, r3
    1988:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        int maxLength = (SCREEN_W / 2 - ring.radius);
    198c:	e30832a0 	movw	r3, #33440	; 0x82a0
    1990:	e3403000 	movt	r3, #0
    1994:	e5933008 	ldr	r3, [r3, #8]
    1998:	e26330a0 	rsb	r3, r3, #160	; 0xa0
    199c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

        // // calculate start point
        int innerR = ring.radius - ((ring.inOffset * maxLength * spect[i] / maxLoudness) >> 10);
    19a0:	e30832a0 	movw	r3, #33440	; 0x82a0
    19a4:	e3403000 	movt	r3, #0
    19a8:	e5933008 	ldr	r3, [r3, #8]
    19ac:	e1a04003 	mov	r4, r3
    19b0:	e30832a0 	movw	r3, #33440	; 0x82a0
    19b4:	e3403000 	movt	r3, #0
    19b8:	e593300c 	ldr	r3, [r3, #12]
    19bc:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    19c0:	e0030392 	mul	r3, r2, r3
    19c4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19c8:	e1a02102 	lsl	r2, r2, #2
    19cc:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    19d0:	e0812002 	add	r2, r1, r2
    19d4:	e5922000 	ldr	r2, [r2]
    19d8:	e0030392 	mul	r3, r2, r3
    19dc:	e1a00003 	mov	r0, r3
    19e0:	e51b1010 	ldr	r1, [r11, #-16]
    19e4:	eb000b82 	bl	47f4 <__aeabi_uidiv>
    19e8:	e1a03000 	mov	r3, r0
    19ec:	e1a03523 	lsr	r3, r3, #10
    19f0:	e0633004 	rsb	r3, r3, r4
    19f4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
        unsigned iX = ring.cX + ((innerR * VIS_FastSin_d16(degree)) >> 16);
    19f8:	e30832a0 	movw	r3, #33440	; 0x82a0
    19fc:	e3403000 	movt	r3, #0
    1a00:	e5934010 	ldr	r4, [r3, #16]
    1a04:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1a08:	e1a00003 	mov	r0, r3
    1a0c:	eb000404 	bl	2a24 <VIS_FastSin_d16>
    1a10:	e1a03000 	mov	r3, r0
    1a14:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1a18:	e0030392 	mul	r3, r2, r3
    1a1c:	e1a03843 	asr	r3, r3, #16
    1a20:	e0843003 	add	r3, r4, r3
    1a24:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
        unsigned iY = ring.cY - ((innerR * VIS_FastCos_d16(degree)) >> 16);
    1a28:	e30832a0 	movw	r3, #33440	; 0x82a0
    1a2c:	e3403000 	movt	r3, #0
    1a30:	e5934014 	ldr	r4, [r3, #20]
    1a34:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1a38:	e1a00003 	mov	r0, r3
    1a3c:	eb00042b 	bl	2af0 <VIS_FastCos_d16>
    1a40:	e1a03000 	mov	r3, r0
    1a44:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1a48:	e0030392 	mul	r3, r2, r3
    1a4c:	e1a03843 	asr	r3, r3, #16
    1a50:	e0633004 	rsb	r3, r3, r4
    1a54:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0

        // // calculate color end point
        int outerR = ring.radius + (((1024 - ring.inOffset) * maxLength * spect[i] / maxLoudness) >> 10); 
    1a58:	e30832a0 	movw	r3, #33440	; 0x82a0
    1a5c:	e3403000 	movt	r3, #0
    1a60:	e5933008 	ldr	r3, [r3, #8]
    1a64:	e1a04003 	mov	r4, r3
    1a68:	e30832a0 	movw	r3, #33440	; 0x82a0
    1a6c:	e3403000 	movt	r3, #0
    1a70:	e593300c 	ldr	r3, [r3, #12]
    1a74:	e2633b01 	rsb	r3, r3, #1024	; 0x400
    1a78:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
    1a7c:	e0030392 	mul	r3, r2, r3
    1a80:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1a84:	e1a02102 	lsl	r2, r2, #2
    1a88:	e51b1044 	ldr	r1, [r11, #-68]	; 0xffffffbc
    1a8c:	e0812002 	add	r2, r1, r2
    1a90:	e5922000 	ldr	r2, [r2]
    1a94:	e0030392 	mul	r3, r2, r3
    1a98:	e1a00003 	mov	r0, r3
    1a9c:	e51b1010 	ldr	r1, [r11, #-16]
    1aa0:	eb000b53 	bl	47f4 <__aeabi_uidiv>
    1aa4:	e1a03000 	mov	r3, r0
    1aa8:	e1a03523 	lsr	r3, r3, #10
    1aac:	e0843003 	add	r3, r4, r3
    1ab0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
        unsigned oX = ring.cX + ((outerR * VIS_FastSin_d16(degree)) >> 16);
    1ab4:	e30832a0 	movw	r3, #33440	; 0x82a0
    1ab8:	e3403000 	movt	r3, #0
    1abc:	e5934010 	ldr	r4, [r3, #16]
    1ac0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1ac4:	e1a00003 	mov	r0, r3
    1ac8:	eb0003d5 	bl	2a24 <VIS_FastSin_d16>
    1acc:	e1a03000 	mov	r3, r0
    1ad0:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    1ad4:	e0030392 	mul	r3, r2, r3
    1ad8:	e1a03843 	asr	r3, r3, #16
    1adc:	e0843003 	add	r3, r4, r3
    1ae0:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
        unsigned oY = ring.cY - ((outerR * VIS_FastCos_d16(degree)) >> 16);
    1ae4:	e30832a0 	movw	r3, #33440	; 0x82a0
    1ae8:	e3403000 	movt	r3, #0
    1aec:	e5934014 	ldr	r4, [r3, #20]
    1af0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1af4:	e1a00003 	mov	r0, r3
    1af8:	eb0003fc 	bl	2af0 <VIS_FastCos_d16>
    1afc:	e1a03000 	mov	r3, r0
    1b00:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    1b04:	e0030392 	mul	r3, r2, r3
    1b08:	e1a03843 	asr	r3, r3, #16
    1b0c:	e0633004 	rsb	r3, r3, r4
    1b10:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4

        // update history
        draw_lineStruct(canvasHistory[historyIndicator][i]);
    1b14:	e3013efc 	movw	r3, #7932	; 0x1efc
    1b18:	e3403001 	movt	r3, #1
    1b1c:	e5930000 	ldr	r0, [r3]
    1b20:	e30822bc 	movw	r2, #33468	; 0x82bc
    1b24:	e3402000 	movt	r2, #0
    1b28:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    1b2c:	e1a03001 	mov	r3, r1
    1b30:	e1a03103 	lsl	r3, r3, #2
    1b34:	e0833001 	add	r3, r3, r1
    1b38:	e1a03103 	lsl	r3, r3, #2
    1b3c:	e3041e20 	movw	r1, #20000	; 0x4e20
    1b40:	e0010091 	mul	r1, r1, r0
    1b44:	e0833001 	add	r3, r3, r1
    1b48:	e0823003 	add	r3, r2, r3
    1b4c:	e5932010 	ldr	r2, [r3, #16]
    1b50:	e58d2000 	str	r2, [sp]
    1b54:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    1b58:	eb00025c 	bl	24d0 <draw_lineStruct>
        canvasHistory[historyIndicator][i] = (Line){iX, iY, oX, oY, 0};
    1b5c:	e3013efc 	movw	r3, #7932	; 0x1efc
    1b60:	e3403001 	movt	r3, #1
    1b64:	e5932000 	ldr	r2, [r3]
    1b68:	e30812bc 	movw	r1, #33468	; 0x82bc
    1b6c:	e3401000 	movt	r1, #0
    1b70:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1b74:	e1a03000 	mov	r3, r0
    1b78:	e1a03103 	lsl	r3, r3, #2
    1b7c:	e0833000 	add	r3, r3, r0
    1b80:	e1a03103 	lsl	r3, r3, #2
    1b84:	e3040e20 	movw	r0, #20000	; 0x4e20
    1b88:	e0000290 	mul	r0, r0, r2
    1b8c:	e0833000 	add	r3, r3, r0
    1b90:	e0813003 	add	r3, r1, r3
    1b94:	e51b102c 	ldr	r1, [r11, #-44]	; 0xffffffd4
    1b98:	e5831000 	str	r1, [r3]
    1b9c:	e30812bc 	movw	r1, #33468	; 0x82bc
    1ba0:	e3401000 	movt	r1, #0
    1ba4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1ba8:	e3a0c004 	mov	r12, #4
    1bac:	e1a03000 	mov	r3, r0
    1bb0:	e1a03103 	lsl	r3, r3, #2
    1bb4:	e0833000 	add	r3, r3, r0
    1bb8:	e1a03103 	lsl	r3, r3, #2
    1bbc:	e3040e20 	movw	r0, #20000	; 0x4e20
    1bc0:	e0000290 	mul	r0, r0, r2
    1bc4:	e0833000 	add	r3, r3, r0
    1bc8:	e0813003 	add	r3, r1, r3
    1bcc:	e083300c 	add	r3, r3, r12
    1bd0:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
    1bd4:	e5831000 	str	r1, [r3]
    1bd8:	e30812bc 	movw	r1, #33468	; 0x82bc
    1bdc:	e3401000 	movt	r1, #0
    1be0:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1be4:	e3a0c008 	mov	r12, #8
    1be8:	e1a03000 	mov	r3, r0
    1bec:	e1a03103 	lsl	r3, r3, #2
    1bf0:	e0833000 	add	r3, r3, r0
    1bf4:	e1a03103 	lsl	r3, r3, #2
    1bf8:	e3040e20 	movw	r0, #20000	; 0x4e20
    1bfc:	e0000290 	mul	r0, r0, r2
    1c00:	e0833000 	add	r3, r3, r0
    1c04:	e0813003 	add	r3, r1, r3
    1c08:	e083300c 	add	r3, r3, r12
    1c0c:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
    1c10:	e5831000 	str	r1, [r3]
    1c14:	e30812bc 	movw	r1, #33468	; 0x82bc
    1c18:	e3401000 	movt	r1, #0
    1c1c:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1c20:	e3a0c00c 	mov	r12, #12
    1c24:	e1a03000 	mov	r3, r0
    1c28:	e1a03103 	lsl	r3, r3, #2
    1c2c:	e0833000 	add	r3, r3, r0
    1c30:	e1a03103 	lsl	r3, r3, #2
    1c34:	e3040e20 	movw	r0, #20000	; 0x4e20
    1c38:	e0000290 	mul	r0, r0, r2
    1c3c:	e0833000 	add	r3, r3, r0
    1c40:	e0813003 	add	r3, r1, r3
    1c44:	e083300c 	add	r3, r3, r12
    1c48:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
    1c4c:	e5831000 	str	r1, [r3]
    1c50:	e30812bc 	movw	r1, #33468	; 0x82bc
    1c54:	e3401000 	movt	r1, #0
    1c58:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    1c5c:	e3a0c010 	mov	r12, #16
    1c60:	e1a03000 	mov	r3, r0
    1c64:	e1a03103 	lsl	r3, r3, #2
    1c68:	e0833000 	add	r3, r3, r0
    1c6c:	e1a03103 	lsl	r3, r3, #2
    1c70:	e3040e20 	movw	r0, #20000	; 0x4e20
    1c74:	e0020290 	mul	r2, r0, r2
    1c78:	e0833002 	add	r3, r3, r2
    1c7c:	e0813003 	add	r3, r1, r3
    1c80:	e083300c 	add	r3, r3, r12
    1c84:	e3a02000 	mov	r2, #0
    1c88:	e5832000 	str	r2, [r3]

        draw_line(iX, iY, oX, oY, color);
    1c8c:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
    1c90:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
    1c94:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1c98:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1c9c:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
    1ca0:	e58dc000 	str	r12, [sp]
    1ca4:	eb00021d 	bl	2520 <draw_line>

        // update ring properties
        // ring.colorSeed = (ring.colorSeed + 1) & 1F;
        ring.offsetDeg = (ring.offsetDeg + 1) % (360 << 4);
    1ca8:	e30832a0 	movw	r3, #33440	; 0x82a0
    1cac:	e3403000 	movt	r3, #0
    1cb0:	e5933004 	ldr	r3, [r3, #4]
    1cb4:	e2833001 	add	r3, r3, #1
    1cb8:	e30620b7 	movw	r2, #24759	; 0x60b7
    1cbc:	e34b260b 	movt	r2, #46603	; 0xb60b
    1cc0:	e0c21392 	smull	r1, r2, r2, r3
    1cc4:	e0822003 	add	r2, r2, r3
    1cc8:	e1a01642 	asr	r1, r2, #12
    1ccc:	e1a02fc3 	asr	r2, r3, #31
    1cd0:	e0622001 	rsb	r2, r2, r1
    1cd4:	e3a01d5a 	mov	r1, #5760	; 0x1680
    1cd8:	e0020291 	mul	r2, r1, r2
    1cdc:	e0622003 	rsb	r2, r2, r3
    1ce0:	e30832a0 	movw	r3, #33440	; 0x82a0
    1ce4:	e3403000 	movt	r3, #0
    1ce8:	e5832004 	str	r2, [r3, #4]
        maxLoudness = maxLoudness >= spect[i] ? maxLoudness : spect[i];
    }

    // // draw on VGA
    // unsigned startDeg = ring.offsetDeg;
    for (int i = 0; i < size; i++) {
    1cec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1cf0:	e2833001 	add	r3, r3, #1
    1cf4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1cf8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1cfc:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1d00:	e1520003 	cmp	r2, r3
    1d04:	3affff00 	bcc	190c <VIS_VGA_UpdateFrame+0xd8>
        ring.offsetDeg = (ring.offsetDeg + 1) % (360 << 4);
    }


    // swap front and back buffers on VGA vertical sync
    *pixel_ctrl_ptr = 0x1;
    1d08:	e3073e40 	movw	r3, #32320	; 0x7e40
    1d0c:	e3403000 	movt	r3, #0
    1d10:	e5933000 	ldr	r3, [r3]
    1d14:	e3a02001 	mov	r2, #1
    1d18:	e5832000 	str	r2, [r3]
}
    1d1c:	e24bd008 	sub	sp, r11, #8
    1d20:	e8bd8810 	pop	{r4, r11, pc}

00001d24 <VIS_VGA_ColorTest>:

void VIS_VGA_ColorTest() {
    1d24:	e92d4800 	push	{r11, lr}
    1d28:	e28db004 	add	r11, sp, #4
    1d2c:	e24dd010 	sub	sp, sp, #16
    
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    1d30:	e1a00000 	nop			; (mov r0, r0)
    1d34:	e3073e40 	movw	r3, #32320	; 0x7e40
    1d38:	e3403000 	movt	r3, #0
    1d3c:	e5933000 	ldr	r3, [r3]
    1d40:	e283300c 	add	r3, r3, #12
    1d44:	e5933000 	ldr	r3, [r3]
    1d48:	e2033001 	and	r3, r3, #1
    1d4c:	e3530000 	cmp	r3, #0
    1d50:	1afffff7 	bne	1d34 <VIS_VGA_ColorTest+0x10>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1d54:	e3073e40 	movw	r3, #32320	; 0x7e40
    1d58:	e3403000 	movt	r3, #0
    1d5c:	e5933000 	ldr	r3, [r3]
    1d60:	e5932004 	ldr	r2, [r3, #4]
    1d64:	e308329c 	movw	r3, #33436	; 0x829c
    1d68:	e3403000 	movt	r3, #0
    1d6c:	e5832000 	str	r2, [r3]
    
    clear_screen();
    1d70:	eb000293 	bl	27c4 <clear_screen>
    for (int i = 0; i < SCREEN_H; i++) {
    1d74:	e3a03000 	mov	r3, #0
    1d78:	e50b3008 	str	r3, [r11, #-8]
    1d7c:	ea000017 	b	1de0 <VIS_VGA_ColorTest+0xbc>
        draw_line(0, i, SCREEN_W - 1, i, color_from_gradient_hsv(i * COLOR_RANGE / SCREEN_H));
    1d80:	e51b2008 	ldr	r2, [r11, #-8]
    1d84:	e1a03002 	mov	r3, r2
    1d88:	e1a03203 	lsl	r3, r3, #4
    1d8c:	e0623003 	rsb	r3, r2, r3
    1d90:	e1a03203 	lsl	r3, r3, #4
    1d94:	e3082889 	movw	r2, #34953	; 0x8889
    1d98:	e3482888 	movt	r2, #34952	; 0x8888
    1d9c:	e0c21392 	smull	r1, r2, r2, r3
    1da0:	e0822003 	add	r2, r2, r3
    1da4:	e1a023c2 	asr	r2, r2, #7
    1da8:	e1a03fc3 	asr	r3, r3, #31
    1dac:	e0633002 	rsb	r3, r3, r2
    1db0:	e1a00003 	mov	r0, r3
    1db4:	eb000115 	bl	2210 <color_from_gradient_hsv>
    1db8:	e1a03000 	mov	r3, r0
    1dbc:	e58d3000 	str	r3, [sp]
    1dc0:	e3a00000 	mov	r0, #0
    1dc4:	e51b1008 	ldr	r1, [r11, #-8]
    1dc8:	e300213f 	movw	r2, #319	; 0x13f
    1dcc:	e51b3008 	ldr	r3, [r11, #-8]
    1dd0:	eb0001d2 	bl	2520 <draw_line>
    
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    
    clear_screen();
    for (int i = 0; i < SCREEN_H; i++) {
    1dd4:	e51b3008 	ldr	r3, [r11, #-8]
    1dd8:	e2833001 	add	r3, r3, #1
    1ddc:	e50b3008 	str	r3, [r11, #-8]
    1de0:	e51b3008 	ldr	r3, [r11, #-8]
    1de4:	e35300ef 	cmp	r3, #239	; 0xef
    1de8:	daffffe4 	ble	1d80 <VIS_VGA_ColorTest+0x5c>
        draw_line(0, i, SCREEN_W - 1, i, color_from_gradient_hsv(i * COLOR_RANGE / SCREEN_H));
    }

    // swap front and back buffers on VGA vertical sync
    *pixel_ctrl_ptr = 0x1;
    1dec:	e3073e40 	movw	r3, #32320	; 0x7e40
    1df0:	e3403000 	movt	r3, #0
    1df4:	e5933000 	ldr	r3, [r3]
    1df8:	e3a02001 	mov	r2, #1
    1dfc:	e5832000 	str	r2, [r3]
}
    1e00:	e24bd004 	sub	sp, r11, #4
    1e04:	e8bd8800 	pop	{r11, pc}

00001e08 <VIS_VGA_SetBuffer>:

void VIS_VGA_SetBuffer(unsigned frontAddress, unsigned backAddress) {
    1e08:	e92d4800 	push	{r11, lr}
    1e0c:	e28db004 	add	r11, sp, #4
    1e10:	e24dd008 	sub	sp, sp, #8
    1e14:	e50b0008 	str	r0, [r11, #-8]
    1e18:	e50b100c 	str	r1, [r11, #-12]
    *(pixel_ctrl_ptr + 1) = frontAddress;
    1e1c:	e3073e40 	movw	r3, #32320	; 0x7e40
    1e20:	e3403000 	movt	r3, #0
    1e24:	e5933000 	ldr	r3, [r3]
    1e28:	e2833004 	add	r3, r3, #4
    1e2c:	e51b2008 	ldr	r2, [r11, #-8]
    1e30:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1e34:	e3073e40 	movw	r3, #32320	; 0x7e40
    1e38:	e3403000 	movt	r3, #0
    1e3c:	e5933000 	ldr	r3, [r3]
    1e40:	e5932004 	ldr	r2, [r3, #4]
    1e44:	e308329c 	movw	r3, #33436	; 0x829c
    1e48:	e3403000 	movt	r3, #0
    1e4c:	e5832000 	str	r2, [r3]
    clear_screen();
    1e50:	eb00025b 	bl	27c4 <clear_screen>
    wait_for_vsync();
    1e54:	eb000178 	bl	243c <wait_for_vsync>
    
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = backAddress;
    1e58:	e3073e40 	movw	r3, #32320	; 0x7e40
    1e5c:	e3403000 	movt	r3, #0
    1e60:	e5933000 	ldr	r3, [r3]
    1e64:	e2833004 	add	r3, r3, #4
    1e68:	e51b200c 	ldr	r2, [r11, #-12]
    1e6c:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the front buffer
    1e70:	e3073e40 	movw	r3, #32320	; 0x7e40
    1e74:	e3403000 	movt	r3, #0
    1e78:	e5933000 	ldr	r3, [r3]
    1e7c:	e5932004 	ldr	r2, [r3, #4]
    1e80:	e308329c 	movw	r3, #33436	; 0x829c
    1e84:	e3403000 	movt	r3, #0
    1e88:	e5832000 	str	r2, [r3]
    clear_screen();
    1e8c:	eb00024c 	bl	27c4 <clear_screen>
    wait_for_vsync();
    1e90:	eb000169 	bl	243c <wait_for_vsync>

    VIS_VGA_Setup();
    1e94:	ebfffe39 	bl	1780 <VIS_VGA_Setup>
}
    1e98:	e24bd004 	sub	sp, r11, #4
    1e9c:	e8bd8800 	pop	{r11, pc}

00001ea0 <color_from_RGB888>:

int color_from_RGB888(int r, int g, int b) {
    1ea0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1ea4:	e28db000 	add	r11, sp, #0
    1ea8:	e24dd014 	sub	sp, sp, #20
    1eac:	e50b0008 	str	r0, [r11, #-8]
    1eb0:	e50b100c 	str	r1, [r11, #-12]
    1eb4:	e50b2010 	str	r2, [r11, #-16]
#ifdef DEBUG
    r = r % 256;
    1eb8:	e51b2008 	ldr	r2, [r11, #-8]
    1ebc:	e1a03fc2 	asr	r3, r2, #31
    1ec0:	e1a03c23 	lsr	r3, r3, #24
    1ec4:	e0822003 	add	r2, r2, r3
    1ec8:	e6ef2072 	uxtb	r2, r2
    1ecc:	e0633002 	rsb	r3, r3, r2
    1ed0:	e50b3008 	str	r3, [r11, #-8]
    g = g % 256;
    1ed4:	e51b200c 	ldr	r2, [r11, #-12]
    1ed8:	e1a03fc2 	asr	r3, r2, #31
    1edc:	e1a03c23 	lsr	r3, r3, #24
    1ee0:	e0822003 	add	r2, r2, r3
    1ee4:	e6ef2072 	uxtb	r2, r2
    1ee8:	e0633002 	rsb	r3, r3, r2
    1eec:	e50b300c 	str	r3, [r11, #-12]
    b = b % 256;
    1ef0:	e51b2010 	ldr	r2, [r11, #-16]
    1ef4:	e1a03fc2 	asr	r3, r2, #31
    1ef8:	e1a03c23 	lsr	r3, r3, #24
    1efc:	e0822003 	add	r2, r2, r3
    1f00:	e6ef2072 	uxtb	r2, r2
    1f04:	e0633002 	rsb	r3, r3, r2
    1f08:	e50b3010 	str	r3, [r11, #-16]
#endif
    return (r >> 3 << 11 ) | (g >> 2 << 5 ) | (b >> 3 & 0x1F);
    1f0c:	e51b3008 	ldr	r3, [r11, #-8]
    1f10:	e1a031c3 	asr	r3, r3, #3
    1f14:	e1a02583 	lsl	r2, r3, #11
    1f18:	e51b300c 	ldr	r3, [r11, #-12]
    1f1c:	e1a03143 	asr	r3, r3, #2
    1f20:	e1a03283 	lsl	r3, r3, #5
    1f24:	e1822003 	orr	r2, r2, r3
    1f28:	e51b3010 	ldr	r3, [r11, #-16]
    1f2c:	e1a031c3 	asr	r3, r3, #3
    1f30:	e203301f 	and	r3, r3, #31
    1f34:	e1823003 	orr	r3, r2, r3
}
    1f38:	e1a00003 	mov	r0, r3
    1f3c:	e28bd000 	add	sp, r11, #0
    1f40:	e8bd0800 	ldmfd	sp!, {r11}
    1f44:	e12fff1e 	bx	lr

00001f48 <color_from_gradient>:

int color_from_gradient(int seed, int freq) {
    1f48:	e92d4800 	push	{r11, lr}
    1f4c:	e28db004 	add	r11, sp, #4
    1f50:	e24dd018 	sub	sp, sp, #24
    1f54:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1f58:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    int r = ((127 * VIS_FastSin_r16((freq * seed << 16) / 30 + (0 << 16))) >> 16) + 128;
    1f5c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1f60:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1f64:	e0030392 	mul	r3, r2, r3
    1f68:	e1a03803 	lsl	r3, r3, #16
    1f6c:	e3082889 	movw	r2, #34953	; 0x8889
    1f70:	e3482888 	movt	r2, #34952	; 0x8888
    1f74:	e0c21392 	smull	r1, r2, r2, r3
    1f78:	e0822003 	add	r2, r2, r3
    1f7c:	e1a02242 	asr	r2, r2, #4
    1f80:	e1a03fc3 	asr	r3, r3, #31
    1f84:	e0633002 	rsb	r3, r3, r2
    1f88:	e1a00003 	mov	r0, r3
    1f8c:	eb0002bc 	bl	2a84 <VIS_FastSin_r16>
    1f90:	e1a02000 	mov	r2, r0
    1f94:	e1a03002 	mov	r3, r2
    1f98:	e1a03383 	lsl	r3, r3, #7
    1f9c:	e0623003 	rsb	r3, r2, r3
    1fa0:	e1a03843 	asr	r3, r3, #16
    1fa4:	e2833080 	add	r3, r3, #128	; 0x80
    1fa8:	e50b3008 	str	r3, [r11, #-8]
    int g = ((127 * VIS_FastSin_r16((freq * seed << 16) / 30 + (1 << 16))) >> 16) + 128;
    1fac:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1fb0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1fb4:	e0030392 	mul	r3, r2, r3
    1fb8:	e1a03803 	lsl	r3, r3, #16
    1fbc:	e3082889 	movw	r2, #34953	; 0x8889
    1fc0:	e3482888 	movt	r2, #34952	; 0x8888
    1fc4:	e0c21392 	smull	r1, r2, r2, r3
    1fc8:	e0822003 	add	r2, r2, r3
    1fcc:	e1a02242 	asr	r2, r2, #4
    1fd0:	e1a03fc3 	asr	r3, r3, #31
    1fd4:	e0633002 	rsb	r3, r3, r2
    1fd8:	e2833801 	add	r3, r3, #65536	; 0x10000
    1fdc:	e1a00003 	mov	r0, r3
    1fe0:	eb0002a7 	bl	2a84 <VIS_FastSin_r16>
    1fe4:	e1a02000 	mov	r2, r0
    1fe8:	e1a03002 	mov	r3, r2
    1fec:	e1a03383 	lsl	r3, r3, #7
    1ff0:	e0623003 	rsb	r3, r2, r3
    1ff4:	e1a03843 	asr	r3, r3, #16
    1ff8:	e2833080 	add	r3, r3, #128	; 0x80
    1ffc:	e50b300c 	str	r3, [r11, #-12]
    int b = ((127 * VIS_FastSin_r16((freq * seed << 16) / 30 + (2 << 16))) >> 16) + 128;
    2000:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2004:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2008:	e0030392 	mul	r3, r2, r3
    200c:	e1a03803 	lsl	r3, r3, #16
    2010:	e3082889 	movw	r2, #34953	; 0x8889
    2014:	e3482888 	movt	r2, #34952	; 0x8888
    2018:	e0c21392 	smull	r1, r2, r2, r3
    201c:	e0822003 	add	r2, r2, r3
    2020:	e1a02242 	asr	r2, r2, #4
    2024:	e1a03fc3 	asr	r3, r3, #31
    2028:	e0633002 	rsb	r3, r3, r2
    202c:	e2833802 	add	r3, r3, #131072	; 0x20000
    2030:	e1a00003 	mov	r0, r3
    2034:	eb000292 	bl	2a84 <VIS_FastSin_r16>
    2038:	e1a02000 	mov	r2, r0
    203c:	e1a03002 	mov	r3, r2
    2040:	e1a03383 	lsl	r3, r3, #7
    2044:	e0623003 	rsb	r3, r2, r3
    2048:	e1a03843 	asr	r3, r3, #16
    204c:	e2833080 	add	r3, r3, #128	; 0x80
    2050:	e50b3010 	str	r3, [r11, #-16]
    return color_from_RGB888(r, g, b);
    2054:	e51b0008 	ldr	r0, [r11, #-8]
    2058:	e51b100c 	ldr	r1, [r11, #-12]
    205c:	e51b2010 	ldr	r2, [r11, #-16]
    2060:	ebffff8e 	bl	1ea0 <color_from_RGB888>
    2064:	e1a03000 	mov	r3, r0
}
    2068:	e1a00003 	mov	r0, r3
    206c:	e24bd004 	sub	sp, r11, #4
    2070:	e8bd8800 	pop	{r11, pc}

00002074 <color_from_gradient_f>:

int color_from_gradient_f(int seed, int freq) {
    2074:	e92d4800 	push	{r11, lr}
    2078:	e28db004 	add	r11, sp, #4
    207c:	e24dd018 	sub	sp, sp, #24
    2080:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    2084:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    static const int colorScale = 55, colorOffset = 200;
    int r = VIS_FastSin_r(freq * seed / 10. + 0) * colorScale + colorOffset;
    2088:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    208c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2090:	e0030392 	mul	r3, r2, r3
    2094:	ee053a90 	vmov	s11, r3
    2098:	eeb86be5 	vcvt.f64.s32	d6, s11
    209c:	ed9f7b53 	vldr	d7, [pc, #332]	; 21f0 <color_from_gradient_f+0x17c>
    20a0:	ee867b07 	vdiv.f64	d7, d6, d7
    20a4:	ed9f6b53 	vldr	d6, [pc, #332]	; 21f8 <color_from_gradient_f+0x184>
    20a8:	ee377b06 	vadd.f64	d7, d7, d6
    20ac:	ec510b17 	vmov	r0, r1, d7
    20b0:	eb0001fe 	bl	28b0 <VIS_FastSin_r>
    20b4:	ec410b16 	vmov	d6, r0, r1
    20b8:	e30537f0 	movw	r3, #22512	; 0x57f0
    20bc:	e3403000 	movt	r3, #0
    20c0:	e5933000 	ldr	r3, [r3]
    20c4:	ee053a90 	vmov	s11, r3
    20c8:	eeb87be5 	vcvt.f64.s32	d7, s11
    20cc:	ee266b07 	vmul.f64	d6, d6, d7
    20d0:	e30537f4 	movw	r3, #22516	; 0x57f4
    20d4:	e3403000 	movt	r3, #0
    20d8:	e5933000 	ldr	r3, [r3]
    20dc:	ee053a90 	vmov	s11, r3
    20e0:	eeb87be5 	vcvt.f64.s32	d7, s11
    20e4:	ee367b07 	vadd.f64	d7, d6, d7
    20e8:	eefd6bc7 	vcvt.s32.f64	s13, d7
    20ec:	ee163a90 	vmov	r3, s13
    20f0:	e50b3008 	str	r3, [r11, #-8]
    int g = VIS_FastSin_r(freq * seed / 10. + 1) * colorScale + colorOffset;
    20f4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    20f8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    20fc:	e0030392 	mul	r3, r2, r3
    2100:	ee073a90 	vmov	s15, r3
    2104:	eeb86be7 	vcvt.f64.s32	d6, s15
    2108:	ed9f7b38 	vldr	d7, [pc, #224]	; 21f0 <color_from_gradient_f+0x17c>
    210c:	ee867b07 	vdiv.f64	d7, d6, d7
    2110:	ed9f6b3a 	vldr	d6, [pc, #232]	; 2200 <color_from_gradient_f+0x18c>
    2114:	ee377b06 	vadd.f64	d7, d7, d6
    2118:	ec510b17 	vmov	r0, r1, d7
    211c:	eb0001e3 	bl	28b0 <VIS_FastSin_r>
    2120:	ec410b16 	vmov	d6, r0, r1
    2124:	e30537f0 	movw	r3, #22512	; 0x57f0
    2128:	e3403000 	movt	r3, #0
    212c:	e5933000 	ldr	r3, [r3]
    2130:	ee053a90 	vmov	s11, r3
    2134:	eeb87be5 	vcvt.f64.s32	d7, s11
    2138:	ee266b07 	vmul.f64	d6, d6, d7
    213c:	e30537f4 	movw	r3, #22516	; 0x57f4
    2140:	e3403000 	movt	r3, #0
    2144:	e5933000 	ldr	r3, [r3]
    2148:	ee053a90 	vmov	s11, r3
    214c:	eeb87be5 	vcvt.f64.s32	d7, s11
    2150:	ee367b07 	vadd.f64	d7, d6, d7
    2154:	eefd6bc7 	vcvt.s32.f64	s13, d7
    2158:	ee163a90 	vmov	r3, s13
    215c:	e50b300c 	str	r3, [r11, #-12]
    int b = VIS_FastSin_r(freq * seed / 10. + 2) * colorScale + colorOffset;
    2160:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2164:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    2168:	e0030392 	mul	r3, r2, r3
    216c:	ee073a90 	vmov	s15, r3
    2170:	eeb86be7 	vcvt.f64.s32	d6, s15
    2174:	ed9f7b1d 	vldr	d7, [pc, #116]	; 21f0 <color_from_gradient_f+0x17c>
    2178:	ee867b07 	vdiv.f64	d7, d6, d7
    217c:	ed9f6b21 	vldr	d6, [pc, #132]	; 2208 <color_from_gradient_f+0x194>
    2180:	ee377b06 	vadd.f64	d7, d7, d6
    2184:	ec510b17 	vmov	r0, r1, d7
    2188:	eb0001c8 	bl	28b0 <VIS_FastSin_r>
    218c:	ec410b16 	vmov	d6, r0, r1
    2190:	e30537f0 	movw	r3, #22512	; 0x57f0
    2194:	e3403000 	movt	r3, #0
    2198:	e5933000 	ldr	r3, [r3]
    219c:	ee053a90 	vmov	s11, r3
    21a0:	eeb87be5 	vcvt.f64.s32	d7, s11
    21a4:	ee266b07 	vmul.f64	d6, d6, d7
    21a8:	e30537f4 	movw	r3, #22516	; 0x57f4
    21ac:	e3403000 	movt	r3, #0
    21b0:	e5933000 	ldr	r3, [r3]
    21b4:	ee053a90 	vmov	s11, r3
    21b8:	eeb87be5 	vcvt.f64.s32	d7, s11
    21bc:	ee367b07 	vadd.f64	d7, d6, d7
    21c0:	eefd6bc7 	vcvt.s32.f64	s13, d7
    21c4:	ee163a90 	vmov	r3, s13
    21c8:	e50b3010 	str	r3, [r11, #-16]
    return color_from_RGB888(r, g, b);
    21cc:	e51b0008 	ldr	r0, [r11, #-8]
    21d0:	e51b100c 	ldr	r1, [r11, #-12]
    21d4:	e51b2010 	ldr	r2, [r11, #-16]
    21d8:	ebffff30 	bl	1ea0 <color_from_RGB888>
    21dc:	e1a03000 	mov	r3, r0
}
    21e0:	e1a00003 	mov	r0, r3
    21e4:	e24bd004 	sub	sp, r11, #4
    21e8:	e8bd8800 	pop	{r11, pc}
    21ec:	e320f000 	nop	{0}
    21f0:	00000000 	.word	0x00000000
    21f4:	40240000 	.word	0x40240000
	...
    2204:	3ff00000 	.word	0x3ff00000
    2208:	00000000 	.word	0x00000000
    220c:	40000000 	.word	0x40000000

00002210 <color_from_gradient_hsv>:

int color_from_gradient_hsv(int cid) {
    2210:	e92d4800 	push	{r11, lr}
    2214:	e28db004 	add	r11, sp, #4
    2218:	e24dd008 	sub	sp, sp, #8
    221c:	e50b0008 	str	r0, [r11, #-8]
    cid = cid % COLOR_RANGE;
    2220:	e51b2008 	ldr	r2, [r11, #-8]
    2224:	e3083889 	movw	r3, #34953	; 0x8889
    2228:	e3483888 	movt	r3, #34952	; 0x8888
    222c:	e0c31293 	smull	r1, r3, r3, r2
    2230:	e0833002 	add	r3, r3, r2
    2234:	e1a013c3 	asr	r1, r3, #7
    2238:	e1a03fc2 	asr	r3, r2, #31
    223c:	e0631001 	rsb	r1, r3, r1
    2240:	e1a03001 	mov	r3, r1
    2244:	e1a03203 	lsl	r3, r3, #4
    2248:	e0613003 	rsb	r3, r1, r3
    224c:	e1a03203 	lsl	r3, r3, #4
    2250:	e0633002 	rsb	r3, r3, r2
    2254:	e50b3008 	str	r3, [r11, #-8]
    static int r = 0, g = 0, b = 0;
    if (cid <= COLOR_RANGE * 3 / 10) {
    2258:	e51b3008 	ldr	r3, [r11, #-8]
    225c:	e3530048 	cmp	r3, #72	; 0x48
    2260:	ca000017 	bgt	22c4 <color_from_gradient_hsv+0xb4>
        r = 0xFF;
    2264:	e3013f00 	movw	r3, #7936	; 0x1f00
    2268:	e3403001 	movt	r3, #1
    226c:	e3a020ff 	mov	r2, #255	; 0xff
    2270:	e5832000 	str	r2, [r3]
        g = cid * 85 / 24;
    2274:	e51b2008 	ldr	r2, [r11, #-8]
    2278:	e1a03002 	mov	r3, r2
    227c:	e1a03103 	lsl	r3, r3, #2
    2280:	e0833002 	add	r3, r3, r2
    2284:	e1a02203 	lsl	r2, r3, #4
    2288:	e0832002 	add	r2, r3, r2
    228c:	e30a3aab 	movw	r3, #43691	; 0xaaab
    2290:	e3423aaa 	movt	r3, #10922	; 0x2aaa
    2294:	e0c31293 	smull	r1, r3, r3, r2
    2298:	e1a01143 	asr	r1, r3, #2
    229c:	e1a03fc2 	asr	r3, r2, #31
    22a0:	e0632001 	rsb	r2, r3, r1
    22a4:	e3013f04 	movw	r3, #7940	; 0x1f04
    22a8:	e3403001 	movt	r3, #1
    22ac:	e5832000 	str	r2, [r3]
        b = 0x0;
    22b0:	e3013f08 	movw	r3, #7944	; 0x1f08
    22b4:	e3403001 	movt	r3, #1
    22b8:	e3a02000 	mov	r2, #0
    22bc:	e5832000 	str	r2, [r3]
    22c0:	ea00004c 	b	23f8 <color_from_gradient_hsv+0x1e8>
    } else if (cid < COLOR_RANGE * 5 / 10) {
    22c4:	e51b3008 	ldr	r3, [r11, #-8]
    22c8:	e3530077 	cmp	r3, #119	; 0x77
    22cc:	ca000016 	bgt	232c <color_from_gradient_hsv+0x11c>
        r = (COLOR_RANGE * 3 / 10 - cid) * 85 / 24;
    22d0:	e51b3008 	ldr	r3, [r11, #-8]
    22d4:	e3e02054 	mvn	r2, #84	; 0x54
    22d8:	e0030392 	mul	r3, r2, r3
    22dc:	e2833d5f 	add	r3, r3, #6080	; 0x17c0
    22e0:	e2833028 	add	r3, r3, #40	; 0x28
    22e4:	e30a2aab 	movw	r2, #43691	; 0xaaab
    22e8:	e3422aaa 	movt	r2, #10922	; 0x2aaa
    22ec:	e0c21392 	smull	r1, r2, r2, r3
    22f0:	e1a02142 	asr	r2, r2, #2
    22f4:	e1a03fc3 	asr	r3, r3, #31
    22f8:	e0632002 	rsb	r2, r3, r2
    22fc:	e3013f00 	movw	r3, #7936	; 0x1f00
    2300:	e3403001 	movt	r3, #1
    2304:	e5832000 	str	r2, [r3]
        g = 0xFF;
    2308:	e3013f04 	movw	r3, #7940	; 0x1f04
    230c:	e3403001 	movt	r3, #1
    2310:	e3a020ff 	mov	r2, #255	; 0xff
    2314:	e5832000 	str	r2, [r3]
        b = 0x0;
    2318:	e3013f08 	movw	r3, #7944	; 0x1f08
    231c:	e3403001 	movt	r3, #1
    2320:	e3a02000 	mov	r2, #0
    2324:	e5832000 	str	r2, [r3]
    2328:	ea000032 	b	23f8 <color_from_gradient_hsv+0x1e8>
    } else if (cid < COLOR_RANGE * 7 / 10) {
    232c:	e51b3008 	ldr	r3, [r11, #-8]
    2330:	e35300a7 	cmp	r3, #167	; 0xa7
    2334:	ca000019 	bgt	23a0 <color_from_gradient_hsv+0x190>
        r = 0x0;
    2338:	e3013f00 	movw	r3, #7936	; 0x1f00
    233c:	e3403001 	movt	r3, #1
    2340:	e3a02000 	mov	r2, #0
    2344:	e5832000 	str	r2, [r3]
        g = 0xFF;
    2348:	e3013f04 	movw	r3, #7940	; 0x1f04
    234c:	e3403001 	movt	r3, #1
    2350:	e3a020ff 	mov	r2, #255	; 0xff
    2354:	e5832000 	str	r2, [r3]
        b = (cid - COLOR_RANGE * 5 / 10) * 85 / 24;;
    2358:	e51b2008 	ldr	r2, [r11, #-8]
    235c:	e1a03002 	mov	r3, r2
    2360:	e1a03103 	lsl	r3, r3, #2
    2364:	e0833002 	add	r3, r3, r2
    2368:	e1a02203 	lsl	r2, r3, #4
    236c:	e0833002 	add	r3, r3, r2
    2370:	e2433d9f 	sub	r3, r3, #10176	; 0x27c0
    2374:	e2433018 	sub	r3, r3, #24
    2378:	e30a2aab 	movw	r2, #43691	; 0xaaab
    237c:	e3422aaa 	movt	r2, #10922	; 0x2aaa
    2380:	e0c21392 	smull	r1, r2, r2, r3
    2384:	e1a02142 	asr	r2, r2, #2
    2388:	e1a03fc3 	asr	r3, r3, #31
    238c:	e0632002 	rsb	r2, r3, r2
    2390:	e3013f08 	movw	r3, #7944	; 0x1f08
    2394:	e3403001 	movt	r3, #1
    2398:	e5832000 	str	r2, [r3]
    239c:	ea000015 	b	23f8 <color_from_gradient_hsv+0x1e8>
    } else {
        r = 0x0;
    23a0:	e3013f00 	movw	r3, #7936	; 0x1f00
    23a4:	e3403001 	movt	r3, #1
    23a8:	e3a02000 	mov	r2, #0
    23ac:	e5832000 	str	r2, [r3]
        g = (COLOR_RANGE - cid) * 85 / 24;
    23b0:	e51b3008 	ldr	r3, [r11, #-8]
    23b4:	e3e02054 	mvn	r2, #84	; 0x54
    23b8:	e0030392 	mul	r3, r2, r3
    23bc:	e2833c4f 	add	r3, r3, #20224	; 0x4f00
    23c0:	e28330b0 	add	r3, r3, #176	; 0xb0
    23c4:	e30a2aab 	movw	r2, #43691	; 0xaaab
    23c8:	e3422aaa 	movt	r2, #10922	; 0x2aaa
    23cc:	e0c21392 	smull	r1, r2, r2, r3
    23d0:	e1a02142 	asr	r2, r2, #2
    23d4:	e1a03fc3 	asr	r3, r3, #31
    23d8:	e0632002 	rsb	r2, r3, r2
    23dc:	e3013f04 	movw	r3, #7940	; 0x1f04
    23e0:	e3403001 	movt	r3, #1
    23e4:	e5832000 	str	r2, [r3]
        b = 0xFF;
    23e8:	e3013f08 	movw	r3, #7944	; 0x1f08
    23ec:	e3403001 	movt	r3, #1
    23f0:	e3a020ff 	mov	r2, #255	; 0xff
    23f4:	e5832000 	str	r2, [r3]
    }
    return color_from_RGB888(r, g, b);
    23f8:	e3013f00 	movw	r3, #7936	; 0x1f00
    23fc:	e3403001 	movt	r3, #1
    2400:	e5931000 	ldr	r1, [r3]
    2404:	e3013f04 	movw	r3, #7940	; 0x1f04
    2408:	e3403001 	movt	r3, #1
    240c:	e5932000 	ldr	r2, [r3]
    2410:	e3013f08 	movw	r3, #7944	; 0x1f08
    2414:	e3403001 	movt	r3, #1
    2418:	e5933000 	ldr	r3, [r3]
    241c:	e1a00001 	mov	r0, r1
    2420:	e1a01002 	mov	r1, r2
    2424:	e1a02003 	mov	r2, r3
    2428:	ebfffe9c 	bl	1ea0 <color_from_RGB888>
    242c:	e1a03000 	mov	r3, r0
}
    2430:	e1a00003 	mov	r0, r3
    2434:	e24bd004 	sub	sp, r11, #4
    2438:	e8bd8800 	pop	{r11, pc}

0000243c <wait_for_vsync>:

void wait_for_vsync() {
    243c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2440:	e28db000 	add	r11, sp, #0
    *pixel_ctrl_ptr = 0x1;
    2444:	e3073e40 	movw	r3, #32320	; 0x7e40
    2448:	e3403000 	movt	r3, #0
    244c:	e5933000 	ldr	r3, [r3]
    2450:	e3a02001 	mov	r2, #1
    2454:	e5832000 	str	r2, [r3]
    while((*(pixel_ctrl_ptr + 3)) & 0x1); // wait for the previous swap
    2458:	e1a00000 	nop			; (mov r0, r0)
    245c:	e3073e40 	movw	r3, #32320	; 0x7e40
    2460:	e3403000 	movt	r3, #0
    2464:	e5933000 	ldr	r3, [r3]
    2468:	e283300c 	add	r3, r3, #12
    246c:	e5933000 	ldr	r3, [r3]
    2470:	e2033001 	and	r3, r3, #1
    2474:	e3530000 	cmp	r3, #0
    2478:	1afffff7 	bne	245c <wait_for_vsync+0x20>
}
    247c:	e28bd000 	add	sp, r11, #0
    2480:	e8bd0800 	ldmfd	sp!, {r11}
    2484:	e12fff1e 	bx	lr

00002488 <swap>:

void swap(int *a, int *b)
{
    2488:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    248c:	e28db000 	add	r11, sp, #0
    2490:	e24dd014 	sub	sp, sp, #20
    2494:	e50b0010 	str	r0, [r11, #-16]
    2498:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    int t = *a;
    249c:	e51b3010 	ldr	r3, [r11, #-16]
    24a0:	e5933000 	ldr	r3, [r3]
    24a4:	e50b3008 	str	r3, [r11, #-8]
    *a = *b;
    24a8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    24ac:	e5932000 	ldr	r2, [r3]
    24b0:	e51b3010 	ldr	r3, [r11, #-16]
    24b4:	e5832000 	str	r2, [r3]
    *b = t;
    24b8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    24bc:	e51b2008 	ldr	r2, [r11, #-8]
    24c0:	e5832000 	str	r2, [r3]
}
    24c4:	e28bd000 	add	sp, r11, #0
    24c8:	e8bd0800 	ldmfd	sp!, {r11}
    24cc:	e12fff1e 	bx	lr

000024d0 <draw_lineStruct>:

void draw_lineStruct(Line line) {
    24d0:	e24dd010 	sub	sp, sp, #16
    24d4:	e92d4800 	push	{r11, lr}
    24d8:	e28db004 	add	r11, sp, #4
    24dc:	e24dd008 	sub	sp, sp, #8
    24e0:	e28bc004 	add	r12, r11, #4
    24e4:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    draw_line(line.iX, line.iY, line.oX, line.oY, line.color);
    24e8:	e59b3004 	ldr	r3, [r11, #4]
    24ec:	e1a00003 	mov	r0, r3
    24f0:	e59b3008 	ldr	r3, [r11, #8]
    24f4:	e1a01003 	mov	r1, r3
    24f8:	e59b300c 	ldr	r3, [r11, #12]
    24fc:	e1a02003 	mov	r2, r3
    2500:	e59b3010 	ldr	r3, [r11, #16]
    2504:	e59bc014 	ldr	r12, [r11, #20]
    2508:	e58dc000 	str	r12, [sp]
    250c:	eb000003 	bl	2520 <draw_line>
}
    2510:	e24bd004 	sub	sp, r11, #4
    2514:	e8bd4800 	pop	{r11, lr}
    2518:	e28dd010 	add	sp, sp, #16
    251c:	e12fff1e 	bx	lr

00002520 <draw_line>:

void draw_line(int p1_x, int p1_y, int p2_x, int p2_y, int color)
{
    2520:	e92d4800 	push	{r11, lr}
    2524:	e28db004 	add	r11, sp, #4
    2528:	e24dd030 	sub	sp, sp, #48	; 0x30
    252c:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
    2530:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
    2534:	e50b2030 	str	r2, [r11, #-48]	; 0xffffffd0
    2538:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    // check if it is a point or a line
    if (p2_y == p1_y && p1_x == p1_y) {
    253c:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2540:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2544:	e1520003 	cmp	r2, r3
    2548:	1a00000b 	bne	257c <draw_line+0x5c>
    254c:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2550:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2554:	e1520003 	cmp	r2, r3
    2558:	1a000007 	bne	257c <draw_line+0x5c>
        plot_pixel(p1_x, p2_y, color);
    255c:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2560:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2564:	e59b3004 	ldr	r3, [r11, #4]
    2568:	e6ff3073 	uxth	r3, r3
    256c:	e1a00001 	mov	r0, r1
    2570:	e1a01002 	mov	r1, r2
    2574:	e1a02003 	mov	r2, r3
    2578:	eb0000a7 	bl	281c <plot_pixel>
    }

    bool is_steep = abs(p1_y - p2_y) > abs(p1_x - p2_x);
    257c:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    2580:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    2584:	e0633002 	rsb	r3, r3, r2
    2588:	e0232fc3 	eor	r2, r3, r3, asr #31
    258c:	e0422fc3 	sub	r2, r2, r3, asr #31
    2590:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2594:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    2598:	e0633001 	rsb	r3, r3, r1
    259c:	e3530000 	cmp	r3, #0
    25a0:	b2633000 	rsblt	r3, r3, #0
    25a4:	e1520003 	cmp	r2, r3
    25a8:	d3a03000 	movle	r3, #0
    25ac:	c3a03001 	movgt	r3, #1
    25b0:	e54b3011 	strb	r3, [r11, #-17]	; 0xffffffef
    if (is_steep)
    25b4:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
    25b8:	e3530000 	cmp	r3, #0
    25bc:	0a000009 	beq	25e8 <draw_line+0xc8>
    {
        swap(&p1_x, &p1_y);
    25c0:	e24b2028 	sub	r2, r11, #40	; 0x28
    25c4:	e24b302c 	sub	r3, r11, #44	; 0x2c
    25c8:	e1a00002 	mov	r0, r2
    25cc:	e1a01003 	mov	r1, r3
    25d0:	ebffffac 	bl	2488 <swap>
        swap(&p2_x, &p2_y);
    25d4:	e24b2030 	sub	r2, r11, #48	; 0x30
    25d8:	e24b3034 	sub	r3, r11, #52	; 0x34
    25dc:	e1a00002 	mov	r0, r2
    25e0:	e1a01003 	mov	r1, r3
    25e4:	ebffffa7 	bl	2488 <swap>
    }
    if (p1_x > p2_x)
    25e8:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    25ec:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    25f0:	e1520003 	cmp	r2, r3
    25f4:	da000009 	ble	2620 <draw_line+0x100>
    {
        swap(&p1_x, &p2_x);
    25f8:	e24b2028 	sub	r2, r11, #40	; 0x28
    25fc:	e24b3030 	sub	r3, r11, #48	; 0x30
    2600:	e1a00002 	mov	r0, r2
    2604:	e1a01003 	mov	r1, r3
    2608:	ebffff9e 	bl	2488 <swap>
        swap(&p1_y, &p2_y);
    260c:	e24b202c 	sub	r2, r11, #44	; 0x2c
    2610:	e24b3034 	sub	r3, r11, #52	; 0x34
    2614:	e1a00002 	mov	r0, r2
    2618:	e1a01003 	mov	r1, r3
    261c:	ebffff99 	bl	2488 <swap>
    }

    int deltaX = p2_x - p1_x,
    2620:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    2624:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    2628:	e0633002 	rsb	r3, r3, r2
    262c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        deltaY = abs(p2_y - p1_y),
    2630:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2634:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2638:	e0633002 	rsb	r3, r3, r2
    263c:	e3530000 	cmp	r3, #0
    2640:	b2633000 	rsblt	r3, r3, #0
    2644:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
        error = -(deltaX / 2),
    2648:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    264c:	e1a02fa3 	lsr	r2, r3, #31
    2650:	e0823003 	add	r3, r2, r3
    2654:	e1a030c3 	asr	r3, r3, #1
    2658:	e2633000 	rsb	r3, r3, #0
    265c:	e50b3008 	str	r3, [r11, #-8]
        yStep = deltaY ? deltaY / (p2_y - p1_y) : 0;
    2660:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2664:	e3530000 	cmp	r3, #0
    2668:	0a000007 	beq	268c <draw_line+0x16c>
    266c:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
    2670:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    2674:	e0633002 	rsb	r3, r3, r2
    2678:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    267c:	e1a01003 	mov	r1, r3
    2680:	eb0008a0 	bl	4908 <__aeabi_idiv>
    2684:	e1a03000 	mov	r3, r0
    2688:	ea000000 	b	2690 <draw_line+0x170>
    268c:	e3a03000 	mov	r3, #0
    2690:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    
    for (int x = p1_x, y = p1_y; x <= p2_x; x++) {
    2694:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    2698:	e50b300c 	str	r3, [r11, #-12]
    269c:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    26a0:	e50b3010 	str	r3, [r11, #-16]
    26a4:	ea000021 	b	2730 <draw_line+0x210>
        if (is_steep) {
    26a8:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
    26ac:	e3530000 	cmp	r3, #0
    26b0:	0a000006 	beq	26d0 <draw_line+0x1b0>
            plot_pixel(y, x, color);
    26b4:	e59b3004 	ldr	r3, [r11, #4]
    26b8:	e6ff3073 	uxth	r3, r3
    26bc:	e51b0010 	ldr	r0, [r11, #-16]
    26c0:	e51b100c 	ldr	r1, [r11, #-12]
    26c4:	e1a02003 	mov	r2, r3
    26c8:	eb000053 	bl	281c <plot_pixel>
    26cc:	ea000005 	b	26e8 <draw_line+0x1c8>
        } else {
            plot_pixel(x, y, color);
    26d0:	e59b3004 	ldr	r3, [r11, #4]
    26d4:	e6ff3073 	uxth	r3, r3
    26d8:	e51b000c 	ldr	r0, [r11, #-12]
    26dc:	e51b1010 	ldr	r1, [r11, #-16]
    26e0:	e1a02003 	mov	r2, r3
    26e4:	eb00004c 	bl	281c <plot_pixel>
        }

        error += deltaY;
    26e8:	e51b2008 	ldr	r2, [r11, #-8]
    26ec:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    26f0:	e0823003 	add	r3, r2, r3
    26f4:	e50b3008 	str	r3, [r11, #-8]
        if (error >= 0) {
    26f8:	e51b3008 	ldr	r3, [r11, #-8]
    26fc:	e3530000 	cmp	r3, #0
    2700:	ba000007 	blt	2724 <draw_line+0x204>
            y += yStep;
    2704:	e51b2010 	ldr	r2, [r11, #-16]
    2708:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    270c:	e0823003 	add	r3, r2, r3
    2710:	e50b3010 	str	r3, [r11, #-16]
            error -= deltaX;
    2714:	e51b2008 	ldr	r2, [r11, #-8]
    2718:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    271c:	e0633002 	rsb	r3, r3, r2
    2720:	e50b3008 	str	r3, [r11, #-8]
    int deltaX = p2_x - p1_x,
        deltaY = abs(p2_y - p1_y),
        error = -(deltaX / 2),
        yStep = deltaY ? deltaY / (p2_y - p1_y) : 0;
    
    for (int x = p1_x, y = p1_y; x <= p2_x; x++) {
    2724:	e51b300c 	ldr	r3, [r11, #-12]
    2728:	e2833001 	add	r3, r3, #1
    272c:	e50b300c 	str	r3, [r11, #-12]
    2730:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    2734:	e51b200c 	ldr	r2, [r11, #-12]
    2738:	e1520003 	cmp	r2, r3
    273c:	daffffd9 	ble	26a8 <draw_line+0x188>
        if (error >= 0) {
            y += yStep;
            error -= deltaX;
        }
    }
}
    2740:	e24bd004 	sub	sp, r11, #4
    2744:	e8bd8800 	pop	{r11, pc}

00002748 <draw_box>:
void draw_box(int px, int py, int w, int h, int color) {
    2748:	e92d4800 	push	{r11, lr}
    274c:	e28db004 	add	r11, sp, #4
    2750:	e24dd020 	sub	sp, sp, #32
    2754:	e50b0010 	str	r0, [r11, #-16]
    2758:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    275c:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    2760:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    for (int x = px; x < px + w; x++) {
    2764:	e51b3010 	ldr	r3, [r11, #-16]
    2768:	e50b3008 	str	r3, [r11, #-8]
    276c:	ea00000c 	b	27a4 <draw_box+0x5c>
        draw_line(x, py, x, py + h - 1, color);
    2770:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    2774:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    2778:	e0823003 	add	r3, r2, r3
    277c:	e2433001 	sub	r3, r3, #1
    2780:	e59b2004 	ldr	r2, [r11, #4]
    2784:	e58d2000 	str	r2, [sp]
    2788:	e51b0008 	ldr	r0, [r11, #-8]
    278c:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    2790:	e51b2008 	ldr	r2, [r11, #-8]
    2794:	ebffff61 	bl	2520 <draw_line>
            error -= deltaX;
        }
    }
}
void draw_box(int px, int py, int w, int h, int color) {
    for (int x = px; x < px + w; x++) {
    2798:	e51b3008 	ldr	r3, [r11, #-8]
    279c:	e2833001 	add	r3, r3, #1
    27a0:	e50b3008 	str	r3, [r11, #-8]
    27a4:	e51b2010 	ldr	r2, [r11, #-16]
    27a8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    27ac:	e0822003 	add	r2, r2, r3
    27b0:	e51b3008 	ldr	r3, [r11, #-8]
    27b4:	e1520003 	cmp	r2, r3
    27b8:	caffffec 	bgt	2770 <draw_box+0x28>
        draw_line(x, py, x, py + h - 1, color);
    }
}
    27bc:	e24bd004 	sub	sp, r11, #4
    27c0:	e8bd8800 	pop	{r11, pc}

000027c4 <clear_screen>:

void clear_screen() {
    27c4:	e92d4800 	push	{r11, lr}
    27c8:	e28db004 	add	r11, sp, #4
    27cc:	e24dd010 	sub	sp, sp, #16
    for (int x = 0; x <= 319; x++) {
    27d0:	e3a03000 	mov	r3, #0
    27d4:	e50b3008 	str	r3, [r11, #-8]
    27d8:	ea000009 	b	2804 <clear_screen+0x40>
        draw_line(x, 0, x, 239, 0);
    27dc:	e3a03000 	mov	r3, #0
    27e0:	e58d3000 	str	r3, [sp]
    27e4:	e51b0008 	ldr	r0, [r11, #-8]
    27e8:	e3a01000 	mov	r1, #0
    27ec:	e51b2008 	ldr	r2, [r11, #-8]
    27f0:	e3a030ef 	mov	r3, #239	; 0xef
    27f4:	ebffff49 	bl	2520 <draw_line>
        draw_line(x, py, x, py + h - 1, color);
    }
}

void clear_screen() {
    for (int x = 0; x <= 319; x++) {
    27f8:	e51b3008 	ldr	r3, [r11, #-8]
    27fc:	e2833001 	add	r3, r3, #1
    2800:	e50b3008 	str	r3, [r11, #-8]
    2804:	e51b2008 	ldr	r2, [r11, #-8]
    2808:	e300313f 	movw	r3, #319	; 0x13f
    280c:	e1520003 	cmp	r2, r3
    2810:	dafffff1 	ble	27dc <clear_screen+0x18>
        draw_line(x, 0, x, 239, 0);
    }
}
    2814:	e24bd004 	sub	sp, r11, #4
    2818:	e8bd8800 	pop	{r11, pc}

0000281c <plot_pixel>:

void plot_pixel(int x, int y, unsigned short int line_color)
{
    281c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2820:	e28db000 	add	r11, sp, #0
    2824:	e24dd014 	sub	sp, sp, #20
    2828:	e50b0008 	str	r0, [r11, #-8]
    282c:	e50b100c 	str	r1, [r11, #-12]
    2830:	e1a03002 	mov	r3, r2
    2834:	e14b30be 	strh	r3, [r11, #-14]
    if (x < 0 || x >= SCREEN_W || y < 0 || y >= SCREEN_H) return; 
    2838:	e51b3008 	ldr	r3, [r11, #-8]
    283c:	e3530000 	cmp	r3, #0
    2840:	ba000016 	blt	28a0 <plot_pixel+0x84>
    2844:	e51b2008 	ldr	r2, [r11, #-8]
    2848:	e300313f 	movw	r3, #319	; 0x13f
    284c:	e1520003 	cmp	r2, r3
    2850:	ca000012 	bgt	28a0 <plot_pixel+0x84>
    2854:	e51b300c 	ldr	r3, [r11, #-12]
    2858:	e3530000 	cmp	r3, #0
    285c:	ba00000f 	blt	28a0 <plot_pixel+0x84>
    2860:	e51b300c 	ldr	r3, [r11, #-12]
    2864:	e35300ef 	cmp	r3, #239	; 0xef
    2868:	ca00000c 	bgt	28a0 <plot_pixel+0x84>
    if (line_color > 0xFFFF) line_color = 0xFFFF;
    *(unsigned short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    286c:	e51b300c 	ldr	r3, [r11, #-12]
    2870:	e1a03503 	lsl	r3, r3, #10
    2874:	e1a02003 	mov	r2, r3
    2878:	e308329c 	movw	r3, #33436	; 0x829c
    287c:	e3403000 	movt	r3, #0
    2880:	e5933000 	ldr	r3, [r3]
    2884:	e0822003 	add	r2, r2, r3
    2888:	e51b3008 	ldr	r3, [r11, #-8]
    288c:	e1a03083 	lsl	r3, r3, #1
    2890:	e0823003 	add	r3, r2, r3
    2894:	e15b20be 	ldrh	r2, [r11, #-14]
    2898:	e1c320b0 	strh	r2, [r3]
    289c:	ea000000 	b	28a4 <plot_pixel+0x88>
    }
}

void plot_pixel(int x, int y, unsigned short int line_color)
{
    if (x < 0 || x >= SCREEN_W || y < 0 || y >= SCREEN_H) return; 
    28a0:	e1a00000 	nop			; (mov r0, r0)
    if (line_color > 0xFFFF) line_color = 0xFFFF;
    *(unsigned short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}
    28a4:	e28bd000 	add	sp, r11, #0
    28a8:	e8bd0800 	ldmfd	sp!, {r11}
    28ac:	e12fff1e 	bx	lr

000028b0 <VIS_FastSin_r>:
	[330] = 56755, 57319, 57864, 58393, 58903, 59395, 59870, 60326, 60763, 61183, 
	[340] = 61583, 61965, 62328, 62672, 62997, 63302, 63589, 63856, 64103, 64331, 
	[350] = 64540, 64729, 64898, 65047, 65176, 65286, 65376, 65446, 65496, 65526
};

double VIS_FastSin_r(double rad) {
    28b0:	e92d4800 	push	{r11, lr}
    28b4:	e28db004 	add	r11, sp, #4
    28b8:	e24dd008 	sub	sp, sp, #8
    28bc:	e14b00fc 	strd	r0, [r11, #-12]
    return VIS_FastSin_d(rad * VIS_R2D);
    28c0:	ed1b6b03 	vldr	d6, [r11, #-12]
    28c4:	ed9f7b09 	vldr	d7, [pc, #36]	; 28f0 <VIS_FastSin_r+0x40>
    28c8:	ee267b07 	vmul.f64	d7, d6, d7
    28cc:	ec510b17 	vmov	r0, r1, d7
    28d0:	eb000008 	bl	28f8 <VIS_FastSin_d>
    28d4:	e1a02000 	mov	r2, r0
    28d8:	e1a03001 	mov	r3, r1
}
    28dc:	e1a00002 	mov	r0, r2
    28e0:	e1a01003 	mov	r1, r3
    28e4:	e24bd004 	sub	sp, r11, #4
    28e8:	e8bd8800 	pop	{r11, pc}
    28ec:	e320f000 	nop	{0}
    28f0:	1a63c1f8 	.word	0x1a63c1f8
    28f4:	404ca5dc 	.word	0x404ca5dc

000028f8 <VIS_FastSin_d>:

double VIS_FastSin_d(double deg) {
    28f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    28fc:	e28db000 	add	r11, sp, #0
    2900:	e24dd014 	sub	sp, sp, #20
    2904:	e14b01f4 	strd	r0, [r11, #-20]	; 0xffffffec
    int degree = ((int) deg) % 360;
    2908:	ed1b7b05 	vldr	d7, [r11, #-20]	; 0xffffffec
    290c:	eefd6bc7 	vcvt.s32.f64	s13, d7
    2910:	ee162a90 	vmov	r2, s13
    2914:	e30630b7 	movw	r3, #24759	; 0x60b7
    2918:	e34b360b 	movt	r3, #46603	; 0xb60b
    291c:	e0c31293 	smull	r1, r3, r3, r2
    2920:	e0833002 	add	r3, r3, r2
    2924:	e1a01443 	asr	r1, r3, #8
    2928:	e1a03fc2 	asr	r3, r2, #31
    292c:	e0633001 	rsb	r3, r3, r1
    2930:	e3a01f5a 	mov	r1, #360	; 0x168
    2934:	e0030391 	mul	r3, r1, r3
    2938:	e0633002 	rsb	r3, r3, r2
    293c:	e50b3008 	str	r3, [r11, #-8]
    return SINs[degree];
    2940:	e3063338 	movw	r3, #25400	; 0x6338
    2944:	e3403000 	movt	r3, #0
    2948:	e51b2008 	ldr	r2, [r11, #-8]
    294c:	e1a02182 	lsl	r2, r2, #3
    2950:	e0833002 	add	r3, r3, r2
    2954:	e1c320d0 	ldrd	r2, [r3]
    // return sin(deg * VIS_D2R);
}
    2958:	e1a00002 	mov	r0, r2
    295c:	e1a01003 	mov	r1, r3
    2960:	e28bd000 	add	sp, r11, #0
    2964:	e8bd0800 	ldmfd	sp!, {r11}
    2968:	e12fff1e 	bx	lr

0000296c <VIS_FastCos_r>:

double VIS_FastCos_r(double rad) {
    296c:	e92d4800 	push	{r11, lr}
    2970:	e28db004 	add	r11, sp, #4
    2974:	e24dd008 	sub	sp, sp, #8
    2978:	e14b00fc 	strd	r0, [r11, #-12]
    return VIS_FastCos_d(rad * VIS_R2D);
    297c:	ed1b6b03 	vldr	d6, [r11, #-12]
    2980:	ed9f7b08 	vldr	d7, [pc, #32]	; 29a8 <VIS_FastCos_r+0x3c>
    2984:	ee267b07 	vmul.f64	d7, d6, d7
    2988:	ec510b17 	vmov	r0, r1, d7
    298c:	eb000007 	bl	29b0 <VIS_FastCos_d>
    2990:	e1a02000 	mov	r2, r0
    2994:	e1a03001 	mov	r3, r1
}
    2998:	e1a00002 	mov	r0, r2
    299c:	e1a01003 	mov	r1, r3
    29a0:	e24bd004 	sub	sp, r11, #4
    29a4:	e8bd8800 	pop	{r11, pc}
    29a8:	1a63c1f8 	.word	0x1a63c1f8
    29ac:	404ca5dc 	.word	0x404ca5dc

000029b0 <VIS_FastCos_d>:

double VIS_FastCos_d(double deg) {
    29b0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    29b4:	e28db000 	add	r11, sp, #0
    29b8:	e24dd014 	sub	sp, sp, #20
    29bc:	e14b01f4 	strd	r0, [r11, #-20]	; 0xffffffec
    int degree = ((int) deg) % 360;
    29c0:	ed1b7b05 	vldr	d7, [r11, #-20]	; 0xffffffec
    29c4:	eefd6bc7 	vcvt.s32.f64	s13, d7
    29c8:	ee162a90 	vmov	r2, s13
    29cc:	e30630b7 	movw	r3, #24759	; 0x60b7
    29d0:	e34b360b 	movt	r3, #46603	; 0xb60b
    29d4:	e0c31293 	smull	r1, r3, r3, r2
    29d8:	e0833002 	add	r3, r3, r2
    29dc:	e1a01443 	asr	r1, r3, #8
    29e0:	e1a03fc2 	asr	r3, r2, #31
    29e4:	e0633001 	rsb	r3, r3, r1
    29e8:	e3a01f5a 	mov	r1, #360	; 0x168
    29ec:	e0030391 	mul	r3, r1, r3
    29f0:	e0633002 	rsb	r3, r3, r2
    29f4:	e50b3008 	str	r3, [r11, #-8]
    return COSs[degree];
    29f8:	e30537f8 	movw	r3, #22520	; 0x57f8
    29fc:	e3403000 	movt	r3, #0
    2a00:	e51b2008 	ldr	r2, [r11, #-8]
    2a04:	e1a02182 	lsl	r2, r2, #3
    2a08:	e0833002 	add	r3, r3, r2
    2a0c:	e1c320d0 	ldrd	r2, [r3]
    // return cos(deg * VIS_D2R);
}
    2a10:	e1a00002 	mov	r0, r2
    2a14:	e1a01003 	mov	r1, r3
    2a18:	e28bd000 	add	sp, r11, #0
    2a1c:	e8bd0800 	ldmfd	sp!, {r11}
    2a20:	e12fff1e 	bx	lr

00002a24 <VIS_FastSin_d16>:

int VIS_FastSin_d16(int deg) {
    2a24:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2a28:	e28db000 	add	r11, sp, #0
    2a2c:	e24dd014 	sub	sp, sp, #20
    2a30:	e50b0010 	str	r0, [r11, #-16]
    int degree = deg % 360;
    2a34:	e51b3010 	ldr	r3, [r11, #-16]
    2a38:	e30620b7 	movw	r2, #24759	; 0x60b7
    2a3c:	e34b260b 	movt	r2, #46603	; 0xb60b
    2a40:	e0c21392 	smull	r1, r2, r2, r3
    2a44:	e0822003 	add	r2, r2, r3
    2a48:	e1a01442 	asr	r1, r2, #8
    2a4c:	e1a02fc3 	asr	r2, r3, #31
    2a50:	e0622001 	rsb	r2, r2, r1
    2a54:	e3a01f5a 	mov	r1, #360	; 0x168
    2a58:	e0020291 	mul	r2, r1, r2
    2a5c:	e0623003 	rsb	r3, r2, r3
    2a60:	e50b3008 	str	r3, [r11, #-8]
    return SIN_large[degree];
    2a64:	e3063e78 	movw	r3, #28280	; 0x6e78
    2a68:	e3403000 	movt	r3, #0
    2a6c:	e51b2008 	ldr	r2, [r11, #-8]
    2a70:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    2a74:	e1a00003 	mov	r0, r3
    2a78:	e28bd000 	add	sp, r11, #0
    2a7c:	e8bd0800 	ldmfd	sp!, {r11}
    2a80:	e12fff1e 	bx	lr

00002a84 <VIS_FastSin_r16>:

int VIS_FastSin_r16(int rad) {
    2a84:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2a88:	e28db000 	add	r11, sp, #0
    2a8c:	e24dd014 	sub	sp, sp, #20
    2a90:	e50b0010 	str	r0, [r11, #-16]
	int degree = ((rad * VIS_R2D_16) >> 24) % 360;
    2a94:	e51b3010 	ldr	r3, [r11, #-16]
    2a98:	e303294c 	movw	r2, #14668	; 0x394c
    2a9c:	e0030392 	mul	r3, r2, r3
    2aa0:	e1a03c43 	asr	r3, r3, #24
    2aa4:	e30620b7 	movw	r2, #24759	; 0x60b7
    2aa8:	e34b260b 	movt	r2, #46603	; 0xb60b
    2aac:	e0c21392 	smull	r1, r2, r2, r3
    2ab0:	e0822003 	add	r2, r2, r3
    2ab4:	e1a01442 	asr	r1, r2, #8
    2ab8:	e1a02fc3 	asr	r2, r3, #31
    2abc:	e0622001 	rsb	r2, r2, r1
    2ac0:	e3a01f5a 	mov	r1, #360	; 0x168
    2ac4:	e0020291 	mul	r2, r1, r2
    2ac8:	e0623003 	rsb	r3, r2, r3
    2acc:	e50b3008 	str	r3, [r11, #-8]
	return SIN_large[degree];
    2ad0:	e3063e78 	movw	r3, #28280	; 0x6e78
    2ad4:	e3403000 	movt	r3, #0
    2ad8:	e51b2008 	ldr	r2, [r11, #-8]
    2adc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    2ae0:	e1a00003 	mov	r0, r3
    2ae4:	e28bd000 	add	sp, r11, #0
    2ae8:	e8bd0800 	ldmfd	sp!, {r11}
    2aec:	e12fff1e 	bx	lr

00002af0 <VIS_FastCos_d16>:

int VIS_FastCos_d16(int deg) {
    2af0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2af4:	e28db000 	add	r11, sp, #0
    2af8:	e24dd014 	sub	sp, sp, #20
    2afc:	e50b0010 	str	r0, [r11, #-16]
    int degree = deg % 360;
    2b00:	e51b3010 	ldr	r3, [r11, #-16]
    2b04:	e30620b7 	movw	r2, #24759	; 0x60b7
    2b08:	e34b260b 	movt	r2, #46603	; 0xb60b
    2b0c:	e0c21392 	smull	r1, r2, r2, r3
    2b10:	e0822003 	add	r2, r2, r3
    2b14:	e1a01442 	asr	r1, r2, #8
    2b18:	e1a02fc3 	asr	r2, r3, #31
    2b1c:	e0622001 	rsb	r2, r2, r1
    2b20:	e3a01f5a 	mov	r1, #360	; 0x168
    2b24:	e0020291 	mul	r2, r1, r2
    2b28:	e0623003 	rsb	r3, r2, r3
    2b2c:	e50b3008 	str	r3, [r11, #-8]
    return COS_large[degree];
    2b30:	e3073418 	movw	r3, #29720	; 0x7418
    2b34:	e3403000 	movt	r3, #0
    2b38:	e51b2008 	ldr	r2, [r11, #-8]
    2b3c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
    2b40:	e1a00003 	mov	r0, r3
    2b44:	e28bd000 	add	sp, r11, #0
    2b48:	e8bd0800 	ldmfd	sp!, {r11}
    2b4c:	e12fff1e 	bx	lr

00002b50 <VIS_FastCos_r16>:

int VIS_FastCos_r16(int rad) {
    2b50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2b54:	e28db000 	add	r11, sp, #0
    2b58:	e24dd014 	sub	sp, sp, #20
    2b5c:	e50b0010 	str	r0, [r11, #-16]
	int degree = ((rad * VIS_R2D_16) >> 16) % 360;
    2b60:	e51b3010 	ldr	r3, [r11, #-16]
    2b64:	e303294c 	movw	r2, #14668	; 0x394c
    2b68:	e0030392 	mul	r3, r2, r3
    2b6c:	e1a03843 	asr	r3, r3, #16
    2b70:	e30620b7 	movw	r2, #24759	; 0x60b7
    2b74:	e34b260b 	movt	r2, #46603	; 0xb60b
    2b78:	e0c21392 	smull	r1, r2, r2, r3
    2b7c:	e0822003 	add	r2, r2, r3
    2b80:	e1a01442 	asr	r1, r2, #8
    2b84:	e1a02fc3 	asr	r2, r3, #31
    2b88:	e0622001 	rsb	r2, r2, r1
    2b8c:	e3a01f5a 	mov	r1, #360	; 0x168
    2b90:	e0020291 	mul	r2, r1, r2
    2b94:	e0623003 	rsb	r3, r2, r3
    2b98:	e50b3008 	str	r3, [r11, #-8]
	return COS_large[degree];
    2b9c:	e3073418 	movw	r3, #29720	; 0x7418
    2ba0:	e3403000 	movt	r3, #0
    2ba4:	e51b2008 	ldr	r2, [r11, #-8]
    2ba8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    2bac:	e1a00003 	mov	r0, r3
    2bb0:	e28bd000 	add	sp, r11, #0
    2bb4:	e8bd0800 	ldmfd	sp!, {r11}
    2bb8:	e12fff1e 	bx	lr
    2bbc:	e320f000 	nop	{0}

00002bc0 <add>:

//note: in this file, all the double value are shifted to the left by 16 bits
 
 float PI = 3.1415926535897932384626;

 Complex add (Complex c,  Complex rhs )   {
    2bc0:	e24dd008 	sub	sp, sp, #8
    2bc4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2bc8:	e28db000 	add	r11, sp, #0
    2bcc:	e24dd01c 	sub	sp, sp, #28
    2bd0:	e50b0010 	str	r0, [r11, #-16]
    2bd4:	e24b0018 	sub	r0, r11, #24
    2bd8:	e8800006 	stm	r0, {r1, r2}
    2bdc:	e58b3008 	str	r3, [r11, #8]
	 Complex newC = { 0,0};
    2be0:	e3a03000 	mov	r3, #0
    2be4:	e50b300c 	str	r3, [r11, #-12]
    2be8:	e3a03000 	mov	r3, #0
    2bec:	e50b3008 	str	r3, [r11, #-8]
    newC.i = c.i + rhs.i;
    2bf0:	ed1b7a05 	vldr	s14, [r11, #-20]	; 0xffffffec
    2bf4:	eddb7a03 	vldr	s15, [r11, #12]
    2bf8:	ee777a27 	vadd.f32	s15, s14, s15
    2bfc:	ed4b7a02 	vstr	s15, [r11, #-8]
    newC.r = c.r + rhs.r;
    2c00:	ed1b7a06 	vldr	s14, [r11, #-24]	; 0xffffffe8
    2c04:	eddb7a02 	vldr	s15, [r11, #8]
    2c08:	ee777a27 	vadd.f32	s15, s14, s15
    2c0c:	ed4b7a03 	vstr	s15, [r11, #-12]
    return newC ;
    2c10:	e51b3010 	ldr	r3, [r11, #-16]
    2c14:	e24b200c 	sub	r2, r11, #12
    2c18:	e8920003 	ldm	r2, {r0, r1}
    2c1c:	e8830003 	stm	r3, {r0, r1}
}
    2c20:	e51b0010 	ldr	r0, [r11, #-16]
    2c24:	e28bd000 	add	sp, r11, #0
    2c28:	e8bd0800 	ldmfd	sp!, {r11}
    2c2c:	e28dd008 	add	sp, sp, #8
    2c30:	e12fff1e 	bx	lr

00002c34 <sub>:
  Complex sub (Complex c,  Complex rhs )   {
    2c34:	e24dd008 	sub	sp, sp, #8
    2c38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2c3c:	e28db000 	add	r11, sp, #0
    2c40:	e24dd01c 	sub	sp, sp, #28
    2c44:	e50b0010 	str	r0, [r11, #-16]
    2c48:	e24b0018 	sub	r0, r11, #24
    2c4c:	e8800006 	stm	r0, {r1, r2}
    2c50:	e58b3008 	str	r3, [r11, #8]
	  Complex newC = {0,0};
    2c54:	e3a03000 	mov	r3, #0
    2c58:	e50b300c 	str	r3, [r11, #-12]
    2c5c:	e3a03000 	mov	r3, #0
    2c60:	e50b3008 	str	r3, [r11, #-8]
	  newC.i = c.i - rhs.i;
    2c64:	ed1b7a05 	vldr	s14, [r11, #-20]	; 0xffffffec
    2c68:	eddb7a03 	vldr	s15, [r11, #12]
    2c6c:	ee777a67 	vsub.f32	s15, s14, s15
    2c70:	ed4b7a02 	vstr	s15, [r11, #-8]
	  newC.r = c.r - rhs.r;
    2c74:	ed1b7a06 	vldr	s14, [r11, #-24]	; 0xffffffe8
    2c78:	eddb7a02 	vldr	s15, [r11, #8]
    2c7c:	ee777a67 	vsub.f32	s15, s14, s15
    2c80:	ed4b7a03 	vstr	s15, [r11, #-12]
    return newC ;
    2c84:	e51b3010 	ldr	r3, [r11, #-16]
    2c88:	e24b200c 	sub	r2, r11, #12
    2c8c:	e8920003 	ldm	r2, {r0, r1}
    2c90:	e8830003 	stm	r3, {r0, r1}
}
    2c94:	e51b0010 	ldr	r0, [r11, #-16]
    2c98:	e28bd000 	add	sp, r11, #0
    2c9c:	e8bd0800 	ldmfd	sp!, {r11}
    2ca0:	e28dd008 	add	sp, sp, #8
    2ca4:	e12fff1e 	bx	lr

00002ca8 <multiply>:
 Complex multiply (Complex c,  Complex rhs )   {
    2ca8:	e24dd008 	sub	sp, sp, #8
    2cac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2cb0:	e28db000 	add	r11, sp, #0
    2cb4:	e24dd01c 	sub	sp, sp, #28
    2cb8:	e50b0010 	str	r0, [r11, #-16]
    2cbc:	e24b0018 	sub	r0, r11, #24
    2cc0:	e8800006 	stm	r0, {r1, r2}
    2cc4:	e58b3008 	str	r3, [r11, #8]
    Complex newC;
    newC.i = (c.r) * (rhs.i) + (c.i) * (rhs.r);
    2cc8:	ed1b7a06 	vldr	s14, [r11, #-24]	; 0xffffffe8
    2ccc:	eddb7a03 	vldr	s15, [r11, #12]
    2cd0:	ee277a27 	vmul.f32	s14, s14, s15
    2cd4:	ed5b6a05 	vldr	s13, [r11, #-20]	; 0xffffffec
    2cd8:	eddb7a02 	vldr	s15, [r11, #8]
    2cdc:	ee667aa7 	vmul.f32	s15, s13, s15
    2ce0:	ee777a27 	vadd.f32	s15, s14, s15
    2ce4:	ed4b7a02 	vstr	s15, [r11, #-8]
    newC.r = (c.r) * (rhs.r) - (c.i) * (rhs.i);
    2ce8:	ed1b7a06 	vldr	s14, [r11, #-24]	; 0xffffffe8
    2cec:	eddb7a02 	vldr	s15, [r11, #8]
    2cf0:	ee277a27 	vmul.f32	s14, s14, s15
    2cf4:	ed5b6a05 	vldr	s13, [r11, #-20]	; 0xffffffec
    2cf8:	eddb7a03 	vldr	s15, [r11, #12]
    2cfc:	ee667aa7 	vmul.f32	s15, s13, s15
    2d00:	ee777a67 	vsub.f32	s15, s14, s15
    2d04:	ed4b7a03 	vstr	s15, [r11, #-12]
    return newC ;
    2d08:	e51b3010 	ldr	r3, [r11, #-16]
    2d0c:	e24b200c 	sub	r2, r11, #12
    2d10:	e8920003 	ldm	r2, {r0, r1}
    2d14:	e8830003 	stm	r3, {r0, r1}
    //return Complex ( r * rhs.r - i * rhs.i, r * rhs.i + i * rhs.r )
}
    2d18:	e51b0010 	ldr	r0, [r11, #-16]
    2d1c:	e28bd000 	add	sp, r11, #0
    2d20:	e8bd0800 	ldmfd	sp!, {r11}
    2d24:	e28dd008 	add	sp, sp, #8
    2d28:	e12fff1e 	bx	lr

00002d2c <divideByInt>:

 Complex divideByInt (Complex c,  float x )   {
    2d2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2d30:	e28db000 	add	r11, sp, #0
    2d34:	e24dd01c 	sub	sp, sp, #28
    2d38:	e50b0010 	str	r0, [r11, #-16]
    2d3c:	e24b0018 	sub	r0, r11, #24
    2d40:	e8800006 	stm	r0, {r1, r2}
    2d44:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    Complex newC;
    newC.i /= x;
    2d48:	ed1b7a02 	vldr	s14, [r11, #-8]
    2d4c:	ed5b7a07 	vldr	s15, [r11, #-28]	; 0xffffffe4
    2d50:	eec77a27 	vdiv.f32	s15, s14, s15
    2d54:	ed4b7a02 	vstr	s15, [r11, #-8]
    newC.r /= x;
    2d58:	ed1b7a03 	vldr	s14, [r11, #-12]
    2d5c:	ed5b7a07 	vldr	s15, [r11, #-28]	; 0xffffffe4
    2d60:	eec77a27 	vdiv.f32	s15, s14, s15
    2d64:	ed4b7a03 	vstr	s15, [r11, #-12]
    return newC ;
    2d68:	e51b3010 	ldr	r3, [r11, #-16]
    2d6c:	e24b200c 	sub	r2, r11, #12
    2d70:	e8920003 	ldm	r2, {r0, r1}
    2d74:	e8830003 	stm	r3, {r0, r1}
}
    2d78:	e51b0010 	ldr	r0, [r11, #-16]
    2d7c:	e28bd000 	add	sp, r11, #0
    2d80:	e8bd0800 	ldmfd	sp!, {r11}
    2d84:	e12fff1e 	bx	lr

00002d88 <conjg>:

 Complex conjg (Complex c)  {
    2d88:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2d8c:	e28db000 	add	r11, sp, #0
    2d90:	e24dd01c 	sub	sp, sp, #28
    2d94:	e50b0010 	str	r0, [r11, #-16]
    2d98:	e24b3018 	sub	r3, r11, #24
    2d9c:	e8830006 	stm	r3, {r1, r2}
    Complex newC;
    newC.i = -c.i;
    2da0:	ed5b7a05 	vldr	s15, [r11, #-20]	; 0xffffffec
    2da4:	eef17a67 	vneg.f32	s15, s15
    2da8:	ed4b7a02 	vstr	s15, [r11, #-8]
    newC.r = c.r;
    2dac:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    2db0:	e50b300c 	str	r3, [r11, #-12]
    return newC ;
    2db4:	e51b3010 	ldr	r3, [r11, #-16]
    2db8:	e24b200c 	sub	r2, r11, #12
    2dbc:	e8920003 	ldm	r2, {r0, r1}
    2dc0:	e8830003 	stm	r3, {r0, r1}
}
    2dc4:	e51b0010 	ldr	r0, [r11, #-16]
    2dc8:	e28bd000 	add	sp, r11, #0
    2dcc:	e8bd0800 	ldmfd	sp!, {r11}
    2dd0:	e12fff1e 	bx	lr

00002dd4 <magnitude>:
 
  int magnitude (Complex c)  {
    2dd4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2dd8:	e28db000 	add	r11, sp, #0
    2ddc:	e24dd00c 	sub	sp, sp, #12
    2de0:	e24b300c 	sub	r3, r11, #12
    2de4:	e8830003 	stm	r3, {r0, r1}
    return ((int) c.r)*((int) c.r)+((int) c.i)*((int) c.i) ;
    2de8:	ed5b7a03 	vldr	s15, [r11, #-12]
    2dec:	eefd7ae7 	vcvt.s32.f32	s15, s15
    2df0:	ee173a90 	vmov	r3, s15
    2df4:	ed5b7a03 	vldr	s15, [r11, #-12]
    2df8:	eefd7ae7 	vcvt.s32.f32	s15, s15
    2dfc:	ee172a90 	vmov	r2, s15
    2e00:	e0020392 	mul	r2, r2, r3
    2e04:	ed5b7a02 	vldr	s15, [r11, #-8]
    2e08:	eefd7ae7 	vcvt.s32.f32	s15, s15
    2e0c:	ee173a90 	vmov	r3, s15
    2e10:	ed5b7a02 	vldr	s15, [r11, #-8]
    2e14:	eefd7ae7 	vcvt.s32.f32	s15, s15
    2e18:	ee171a90 	vmov	r1, s15
    2e1c:	e0030391 	mul	r3, r1, r3
    2e20:	e0823003 	add	r3, r2, r3
}
    2e24:	e1a00003 	mov	r0, r3
    2e28:	e28bd000 	add	sp, r11, #0
    2e2c:	e8bd0800 	ldmfd	sp!, {r11}
    2e30:	e12fff1e 	bx	lr

00002e34 <init>:

void init(int index, int size, Complex *omegaInverse) {
    2e34:	e92d4800 	push	{r11, lr}
    2e38:	e28db004 	add	r11, sp, #4
    2e3c:	e24dd028 	sub	sp, sp, #40	; 0x28
    2e40:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
    2e44:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
    2e48:	e50b2028 	str	r2, [r11, #-40]	; 0xffffffd8
    if(index == 0){
    2e4c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    2e50:	e3530000 	cmp	r3, #0
    2e54:	1a000015 	bne	2eb0 <init+0x7c>
        for (int i = 0; i < size; ++i) {
    2e58:	e3a03000 	mov	r3, #0
    2e5c:	e50b3008 	str	r3, [r11, #-8]
    2e60:	ea00000d 	b	2e9c <init+0x68>
            Complex c ={1,0};
    2e64:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
    2e68:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    2e6c:	e3a03000 	mov	r3, #0
    2e70:	e50b3010 	str	r3, [r11, #-16]
            omegaInverse[i] = c;
    2e74:	e51b3008 	ldr	r3, [r11, #-8]
    2e78:	e1a03183 	lsl	r3, r3, #3
    2e7c:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2e80:	e0823003 	add	r3, r2, r3
    2e84:	e24b2014 	sub	r2, r11, #20
    2e88:	e8920003 	ldm	r2, {r0, r1}
    2e8c:	e8830003 	stm	r3, {r0, r1}
    return ((int) c.r)*((int) c.r)+((int) c.i)*((int) c.i) ;
}

void init(int index, int size, Complex *omegaInverse) {
    if(index == 0){
        for (int i = 0; i < size; ++i) {
    2e90:	e51b3008 	ldr	r3, [r11, #-8]
    2e94:	e2833001 	add	r3, r3, #1
    2e98:	e50b3008 	str	r3, [r11, #-8]
    2e9c:	e51b2008 	ldr	r2, [r11, #-8]
    2ea0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2ea4:	e1520003 	cmp	r2, r3
    2ea8:	baffffed 	blt	2e64 <init+0x30>
    2eac:	ea000032 	b	2f7c <init+0x148>
            Complex c ={1,0};
            omegaInverse[i] = c;
        }
    }
    else{
        for (int i = 0; i < size; ++i) {
    2eb0:	e3a03000 	mov	r3, #0
    2eb4:	e50b300c 	str	r3, [r11, #-12]
    2eb8:	ea00002b 	b	2f6c <init+0x138>
            Complex c ={cosf(2 * PI / index * i), -sinf(2 * PI / index * i)};
    2ebc:	e3073e44 	movw	r3, #32324	; 0x7e44
    2ec0:	e3403000 	movt	r3, #0
    2ec4:	edd37a00 	vldr	s15, [r3]
    2ec8:	ee377aa7 	vadd.f32	s14, s15, s15
    2ecc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    2ed0:	ee063a90 	vmov	s13, r3
    2ed4:	eef87ae6 	vcvt.f32.s32	s15, s13
    2ed8:	eec77a27 	vdiv.f32	s15, s14, s15
    2edc:	e51b300c 	ldr	r3, [r11, #-12]
    2ee0:	ee063a90 	vmov	s13, r3
    2ee4:	eeb87ae6 	vcvt.f32.s32	s14, s13
    2ee8:	ee677a87 	vmul.f32	s15, s15, s14
    2eec:	ee170a90 	vmov	r0, s15
    2ef0:	eb00011d 	bl	336c <cosf>
    2ef4:	e1a03000 	mov	r3, r0
    2ef8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    2efc:	e3073e44 	movw	r3, #32324	; 0x7e44
    2f00:	e3403000 	movt	r3, #0
    2f04:	edd37a00 	vldr	s15, [r3]
    2f08:	ee377aa7 	vadd.f32	s14, s15, s15
    2f0c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    2f10:	ee063a90 	vmov	s13, r3
    2f14:	eef87ae6 	vcvt.f32.s32	s15, s13
    2f18:	eec77a27 	vdiv.f32	s15, s14, s15
    2f1c:	e51b300c 	ldr	r3, [r11, #-12]
    2f20:	ee063a90 	vmov	s13, r3
    2f24:	eeb87ae6 	vcvt.f32.s32	s14, s13
    2f28:	ee677a87 	vmul.f32	s15, s15, s14
    2f2c:	ee170a90 	vmov	r0, s15
    2f30:	eb000136 	bl	3410 <sinf>
    2f34:	e1a03000 	mov	r3, r0
    2f38:	ee073a10 	vmov	s14, r3
    2f3c:	eef17a47 	vneg.f32	s15, s14
    2f40:	ed4b7a06 	vstr	s15, [r11, #-24]	; 0xffffffe8
            omegaInverse[i] = c;
    2f44:	e51b300c 	ldr	r3, [r11, #-12]
    2f48:	e1a03183 	lsl	r3, r3, #3
    2f4c:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2f50:	e0823003 	add	r3, r2, r3
    2f54:	e24b201c 	sub	r2, r11, #28
    2f58:	e8920003 	ldm	r2, {r0, r1}
    2f5c:	e8830003 	stm	r3, {r0, r1}
            Complex c ={1,0};
            omegaInverse[i] = c;
        }
    }
    else{
        for (int i = 0; i < size; ++i) {
    2f60:	e51b300c 	ldr	r3, [r11, #-12]
    2f64:	e2833001 	add	r3, r3, #1
    2f68:	e50b300c 	str	r3, [r11, #-12]
    2f6c:	e51b200c 	ldr	r2, [r11, #-12]
    2f70:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    2f74:	e1520003 	cmp	r2, r3
    2f78:	baffffcf 	blt	2ebc <init+0x88>
            Complex c ={cosf(2 * PI / index * i), -sinf(2 * PI / index * i)};
            omegaInverse[i] = c;
        }
    }
}
    2f7c:	e24bd004 	sub	sp, r11, #4
    2f80:	e8bd8800 	pop	{r11, pc}

00002f84 <sdft>:
//         result[om] = c;
//     }
// }


void sdft(Complex *x, int n, Complex * omegaInverse, Complex *result) {
    2f84:	e92d4800 	push	{r11, lr}
    2f88:	e28db004 	add	r11, sp, #4
    2f8c:	e24dd030 	sub	sp, sp, #48	; 0x30
    2f90:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
    2f94:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
    2f98:	e50b2028 	str	r2, [r11, #-40]	; 0xffffffd8
    2f9c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
		for (int om = 0; om < n; om++) {
    2fa0:	e3a03000 	mov	r3, #0
    2fa4:	e50b3008 	str	r3, [r11, #-8]
    2fa8:	ea000032 	b	3078 <sdft+0xf4>
			Complex c = {0,0};
    2fac:	e3a03000 	mov	r3, #0
    2fb0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    2fb4:	e3a03000 	mov	r3, #0
    2fb8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			init(om,n,omegaInverse);
    2fbc:	e51b0008 	ldr	r0, [r11, #-8]
    2fc0:	e51b1024 	ldr	r1, [r11, #-36]	; 0xffffffdc
    2fc4:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    2fc8:	ebffff99 	bl	2e34 <init>
			for (int k = 0; k < n; k++) {
    2fcc:	e3a03000 	mov	r3, #0
    2fd0:	e50b300c 	str	r3, [r11, #-12]
    2fd4:	ea000019 	b	3040 <sdft+0xbc>
				c = add(c, multiply(x[k],omegaInverse[k]));
    2fd8:	e51b300c 	ldr	r3, [r11, #-12]
    2fdc:	e1a03183 	lsl	r3, r3, #3
    2fe0:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    2fe4:	e0822003 	add	r2, r2, r3
    2fe8:	e51b300c 	ldr	r3, [r11, #-12]
    2fec:	e1a03183 	lsl	r3, r3, #3
    2ff0:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2ff4:	e0813003 	add	r3, r1, r3
    2ff8:	e24b1014 	sub	r1, r11, #20
    2ffc:	e5930004 	ldr	r0, [r3, #4]
    3000:	e58d0000 	str	r0, [sp]
    3004:	e5933000 	ldr	r3, [r3]
    3008:	e1a00001 	mov	r0, r1
    300c:	e8920006 	ldm	r2, {r1, r2}
    3010:	ebffff24 	bl	2ca8 <multiply>
    3014:	e24b201c 	sub	r2, r11, #28
    3018:	e51b3010 	ldr	r3, [r11, #-16]
    301c:	e58d3000 	str	r3, [sp]
    3020:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    3024:	e1a00002 	mov	r0, r2
    3028:	e24b201c 	sub	r2, r11, #28
    302c:	e8920006 	ldm	r2, {r1, r2}
    3030:	ebfffee2 	bl	2bc0 <add>

void sdft(Complex *x, int n, Complex * omegaInverse, Complex *result) {
		for (int om = 0; om < n; om++) {
			Complex c = {0,0};
			init(om,n,omegaInverse);
			for (int k = 0; k < n; k++) {
    3034:	e51b300c 	ldr	r3, [r11, #-12]
    3038:	e2833001 	add	r3, r3, #1
    303c:	e50b300c 	str	r3, [r11, #-12]
    3040:	e51b200c 	ldr	r2, [r11, #-12]
    3044:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    3048:	e1520003 	cmp	r2, r3
    304c:	baffffe1 	blt	2fd8 <sdft+0x54>
				c = add(c, multiply(x[k],omegaInverse[k]));
			}
			result[om] = c;
    3050:	e51b3008 	ldr	r3, [r11, #-8]
    3054:	e1a03183 	lsl	r3, r3, #3
    3058:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    305c:	e0823003 	add	r3, r2, r3
    3060:	e24b201c 	sub	r2, r11, #28
    3064:	e8920003 	ldm	r2, {r0, r1}
    3068:	e8830003 	stm	r3, {r0, r1}
//     }
// }


void sdft(Complex *x, int n, Complex * omegaInverse, Complex *result) {
		for (int om = 0; om < n; om++) {
    306c:	e51b3008 	ldr	r3, [r11, #-8]
    3070:	e2833001 	add	r3, r3, #1
    3074:	e50b3008 	str	r3, [r11, #-8]
    3078:	e51b2008 	ldr	r2, [r11, #-8]
    307c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    3080:	e1520003 	cmp	r2, r3
    3084:	baffffc8 	blt	2fac <sdft+0x28>
			for (int k = 0; k < n; k++) {
				c = add(c, multiply(x[k],omegaInverse[k]));
			}
			result[om] = c;
		}
	}
    3088:	e24bd004 	sub	sp, r11, #4
    308c:	e8bd8800 	pop	{r11, pc}

00003090 <initExps>:

void initExps(int size, Complex omegaInverse[][size]) {
    3090:	e92d4870 	push	{r4, r5, r6, r11, lr}
    3094:	e28db010 	add	r11, sp, #16
    3098:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    309c:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
    30a0:	e50b103c 	str	r1, [r11, #-60]	; 0xffffffc4
    30a4:	e51b6038 	ldr	r6, [r11, #-56]	; 0xffffffc8
    30a8:	e2463001 	sub	r3, r6, #1
    30ac:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    30b0:	e1a01006 	mov	r1, r6
    30b4:	e1a02001 	mov	r2, r1
    30b8:	e3a03000 	mov	r3, #0
    30bc:	e1a01d22 	lsr	r1, r2, #26
    30c0:	e1a05303 	lsl	r5, r3, #6
    30c4:	e1815005 	orr	r5, r1, r5
    30c8:	e1a04302 	lsl	r4, r2, #6
    //initialize first line
    for(int k =0; k < size; k++){
    30cc:	e3a03000 	mov	r3, #0
    30d0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    30d4:	ea00000d 	b	3110 <initExps+0x80>
            Complex c ={1,0};
    30d8:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
    30dc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    30e0:	e3a03000 	mov	r3, #0
    30e4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
            omegaInverse[0][k] = c;
    30e8:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    30ec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    30f0:	e1a03183 	lsl	r3, r3, #3
    30f4:	e0823003 	add	r3, r2, r3
    30f8:	e24b202c 	sub	r2, r11, #44	; 0x2c
    30fc:	e8920003 	ldm	r2, {r0, r1}
    3100:	e8830003 	stm	r3, {r0, r1}
		}
	}

void initExps(int size, Complex omegaInverse[][size]) {
    //initialize first line
    for(int k =0; k < size; k++){
    3104:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    3108:	e2833001 	add	r3, r3, #1
    310c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    3110:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    3114:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    3118:	e1520003 	cmp	r2, r3
    311c:	baffffed 	blt	30d8 <initExps+0x48>
            Complex c ={1,0};
            omegaInverse[0][k] = c;
    }
    for (int index = 1; index < size; ++index) {
    3120:	e3a03001 	mov	r3, #1
    3124:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    3128:	ea00003a 	b	3218 <initExps+0x188>
        for(int k =0; k < size; k++){
    312c:	e3a03000 	mov	r3, #0
    3130:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    3134:	ea000030 	b	31fc <initExps+0x16c>
            Complex c ={cosf(2 * PI / index * k), -sinf(2 * PI / index * k)};
    3138:	e3073e44 	movw	r3, #32324	; 0x7e44
    313c:	e3403000 	movt	r3, #0
    3140:	edd37a00 	vldr	s15, [r3]
    3144:	ee377aa7 	vadd.f32	s14, s15, s15
    3148:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    314c:	ee063a90 	vmov	s13, r3
    3150:	eef87ae6 	vcvt.f32.s32	s15, s13
    3154:	eec77a27 	vdiv.f32	s15, s14, s15
    3158:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    315c:	ee063a90 	vmov	s13, r3
    3160:	eeb87ae6 	vcvt.f32.s32	s14, s13
    3164:	ee677a87 	vmul.f32	s15, s15, s14
    3168:	ee170a90 	vmov	r0, s15
    316c:	eb00007e 	bl	336c <cosf>
    3170:	e1a03000 	mov	r3, r0
    3174:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    3178:	e3073e44 	movw	r3, #32324	; 0x7e44
    317c:	e3403000 	movt	r3, #0
    3180:	edd37a00 	vldr	s15, [r3]
    3184:	ee377aa7 	vadd.f32	s14, s15, s15
    3188:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    318c:	ee063a90 	vmov	s13, r3
    3190:	eef87ae6 	vcvt.f32.s32	s15, s13
    3194:	eec77a27 	vdiv.f32	s15, s14, s15
    3198:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    319c:	ee063a90 	vmov	s13, r3
    31a0:	eeb87ae6 	vcvt.f32.s32	s14, s13
    31a4:	ee677a87 	vmul.f32	s15, s15, s14
    31a8:	ee170a90 	vmov	r0, s15
    31ac:	eb000097 	bl	3410 <sinf>
    31b0:	e1a03000 	mov	r3, r0
    31b4:	ee073a10 	vmov	s14, r3
    31b8:	eef17a47 	vneg.f32	s15, s14
    31bc:	ed4b7a0c 	vstr	s15, [r11, #-48]	; 0xffffffd0
            omegaInverse[index][k] = c;
    31c0:	e1a03006 	mov	r3, r6
    31c4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    31c8:	e0030392 	mul	r3, r2, r3
    31cc:	e1a03183 	lsl	r3, r3, #3
    31d0:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    31d4:	e0822003 	add	r2, r2, r3
    31d8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    31dc:	e1a03183 	lsl	r3, r3, #3
    31e0:	e0823003 	add	r3, r2, r3
    31e4:	e24b2034 	sub	r2, r11, #52	; 0x34
    31e8:	e8920003 	ldm	r2, {r0, r1}
    31ec:	e8830003 	stm	r3, {r0, r1}
    for(int k =0; k < size; k++){
            Complex c ={1,0};
            omegaInverse[0][k] = c;
    }
    for (int index = 1; index < size; ++index) {
        for(int k =0; k < size; k++){
    31f0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    31f4:	e2833001 	add	r3, r3, #1
    31f8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    31fc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    3200:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    3204:	e1520003 	cmp	r2, r3
    3208:	baffffca 	blt	3138 <initExps+0xa8>
    //initialize first line
    for(int k =0; k < size; k++){
            Complex c ={1,0};
            omegaInverse[0][k] = c;
    }
    for (int index = 1; index < size; ++index) {
    320c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    3210:	e2833001 	add	r3, r3, #1
    3214:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    3218:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    321c:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    3220:	e1520003 	cmp	r2, r3
    3224:	baffffc0 	blt	312c <initExps+0x9c>
        for(int k =0; k < size; k++){
            Complex c ={cosf(2 * PI / index * k), -sinf(2 * PI / index * k)};
            omegaInverse[index][k] = c;
        }
    }
}
    3228:	e24bd010 	sub	sp, r11, #16
    322c:	e8bd8870 	pop	{r4, r5, r6, r11, pc}

00003230 <fdft>:

void fdft(Complex *x, int n, Complex omegaExp[][n], Complex *result) {
    3230:	e92d4870 	push	{r4, r5, r6, r11, lr}
    3234:	e28db010 	add	r11, sp, #16
    3238:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    323c:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
    3240:	e50b103c 	str	r1, [r11, #-60]	; 0xffffffc4
    3244:	e50b2040 	str	r2, [r11, #-64]	; 0xffffffc0
    3248:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    324c:	e51b603c 	ldr	r6, [r11, #-60]	; 0xffffffc4
    3250:	e2463001 	sub	r3, r6, #1
    3254:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    3258:	e1a01006 	mov	r1, r6
    325c:	e1a02001 	mov	r2, r1
    3260:	e3a03000 	mov	r3, #0
    3264:	e1a01d22 	lsr	r1, r2, #26
    3268:	e1a05303 	lsl	r5, r3, #6
    326c:	e1815005 	orr	r5, r1, r5
    3270:	e1a04302 	lsl	r4, r2, #6
		for (int om = 0; om < n; om++) {
    3274:	e3a03000 	mov	r3, #0
    3278:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    327c:	ea000034 	b	3354 <fdft+0x124>
			Complex c = {0,0};
    3280:	e3a03000 	mov	r3, #0
    3284:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    3288:	e3a03000 	mov	r3, #0
    328c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
			for (int k = 0; k < n; k++) {
    3290:	e3a03000 	mov	r3, #0
    3294:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    3298:	ea00001f 	b	331c <fdft+0xec>
				c = add(c, multiply(x[k],omegaExp[om][k]));
    329c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    32a0:	e1a03183 	lsl	r3, r3, #3
    32a4:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    32a8:	e0821003 	add	r1, r2, r3
    32ac:	e1a03006 	mov	r3, r6
    32b0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    32b4:	e0030392 	mul	r3, r2, r3
    32b8:	e1a03183 	lsl	r3, r3, #3
    32bc:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    32c0:	e0823003 	add	r3, r2, r3
    32c4:	e24b0028 	sub	r0, r11, #40	; 0x28
    32c8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    32cc:	e3a0c004 	mov	r12, #4
    32d0:	e1a0e182 	lsl	lr, r2, #3
    32d4:	e083e00e 	add	lr, r3, lr
    32d8:	e08ec00c 	add	r12, lr, r12
    32dc:	e59cc000 	ldr	r12, [r12]
    32e0:	e58dc000 	str	r12, [sp]
    32e4:	e7933182 	ldr	r3, [r3, r2, lsl #3]
    32e8:	e8910006 	ldm	r1, {r1, r2}
    32ec:	ebfffe6d 	bl	2ca8 <multiply>
    32f0:	e24b2030 	sub	r2, r11, #48	; 0x30
    32f4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    32f8:	e58d3000 	str	r3, [sp]
    32fc:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    3300:	e1a00002 	mov	r0, r2
    3304:	e24b2030 	sub	r2, r11, #48	; 0x30
    3308:	e8920006 	ldm	r2, {r1, r2}
    330c:	ebfffe2b 	bl	2bc0 <add>
}

void fdft(Complex *x, int n, Complex omegaExp[][n], Complex *result) {
		for (int om = 0; om < n; om++) {
			Complex c = {0,0};
			for (int k = 0; k < n; k++) {
    3310:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    3314:	e2833001 	add	r3, r3, #1
    3318:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    331c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    3320:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    3324:	e1520003 	cmp	r2, r3
    3328:	baffffdb 	blt	329c <fdft+0x6c>
				c = add(c, multiply(x[k],omegaExp[om][k]));
			}
			result[om] = c;
    332c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    3330:	e1a03183 	lsl	r3, r3, #3
    3334:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    3338:	e0823003 	add	r3, r2, r3
    333c:	e24b2030 	sub	r2, r11, #48	; 0x30
    3340:	e8920003 	ldm	r2, {r0, r1}
    3344:	e8830003 	stm	r3, {r0, r1}
        }
    }
}

void fdft(Complex *x, int n, Complex omegaExp[][n], Complex *result) {
		for (int om = 0; om < n; om++) {
    3348:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    334c:	e2833001 	add	r3, r3, #1
    3350:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    3354:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    3358:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    335c:	e1520003 	cmp	r2, r3
    3360:	baffffc6 	blt	3280 <fdft+0x50>
			for (int k = 0; k < n; k++) {
				c = add(c, multiply(x[k],omegaExp[om][k]));
			}
			result[om] = c;
		}
    3364:	e24bd010 	sub	sp, r11, #16
    3368:	e8bd8870 	pop	{r4, r5, r6, r11, pc}

0000336c <cosf>:
    336c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3370:	e59f2090 	ldr	r2, [pc, #144]	; 3408 <cosf+0x9c>
    3374:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    3378:	e1530002 	cmp	r3, r2
    337c:	e24dd00c 	sub	sp, sp, #12
    3380:	e1a01000 	mov	r1, r0
    3384:	da000013 	ble	33d8 <cosf+0x6c>
    3388:	e59f207c 	ldr	r2, [pc, #124]	; 340c <cosf+0xa0>
    338c:	e1530002 	cmp	r3, r2
    3390:	da000003 	ble	33a4 <cosf+0x38>
    3394:	eb0005b0 	bl	4a5c <__aeabi_fsub>
    3398:	e28dd00c 	add	sp, sp, #12
    339c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    33a0:	e12fff1e 	bx	lr
    33a4:	e1a0100d 	mov	r1, sp
    33a8:	eb000047 	bl	34cc <__ieee754_rem_pio2f>
    33ac:	e2002003 	and	r2, r0, #3
    33b0:	e3520001 	cmp	r2, #1
    33b4:	e59d0000 	ldr	r0, [sp]
    33b8:	e59d1004 	ldr	r1, [sp, #4]
    33bc:	0a00000b 	beq	33f0 <cosf+0x84>
    33c0:	e3520002 	cmp	r2, #2
    33c4:	0a000006 	beq	33e4 <cosf+0x78>
    33c8:	e3520000 	cmp	r2, #0
    33cc:	1a00000a 	bne	33fc <cosf+0x90>
    33d0:	eb000155 	bl	392c <__kernel_cosf>
    33d4:	eaffffef 	b	3398 <cosf+0x2c>
    33d8:	e3a01000 	mov	r1, #0
    33dc:	eb000152 	bl	392c <__kernel_cosf>
    33e0:	eaffffec 	b	3398 <cosf+0x2c>
    33e4:	eb000150 	bl	392c <__kernel_cosf>
    33e8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    33ec:	eaffffe9 	b	3398 <cosf+0x2c>
    33f0:	eb00042a 	bl	44a0 <__kernel_sinf>
    33f4:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    33f8:	eaffffe6 	b	3398 <cosf+0x2c>
    33fc:	e3a02001 	mov	r2, #1
    3400:	eb000426 	bl	44a0 <__kernel_sinf>
    3404:	eaffffe3 	b	3398 <cosf+0x2c>
    3408:	3f490fd8 	.word	0x3f490fd8
    340c:	7f7fffff 	.word	0x7f7fffff

00003410 <sinf>:
    3410:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3414:	e59f20a8 	ldr	r2, [pc, #168]	; 34c4 <sinf+0xb4>
    3418:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    341c:	e1530002 	cmp	r3, r2
    3420:	e24dd00c 	sub	sp, sp, #12
    3424:	e1a01000 	mov	r1, r0
    3428:	da000014 	ble	3480 <sinf+0x70>
    342c:	e59f2094 	ldr	r2, [pc, #148]	; 34c8 <sinf+0xb8>
    3430:	e1530002 	cmp	r3, r2
    3434:	da000003 	ble	3448 <sinf+0x38>
    3438:	eb000587 	bl	4a5c <__aeabi_fsub>
    343c:	e28dd00c 	add	sp, sp, #12
    3440:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    3444:	e12fff1e 	bx	lr
    3448:	e1a0100d 	mov	r1, sp
    344c:	eb00001e 	bl	34cc <__ieee754_rem_pio2f>
    3450:	e2000003 	and	r0, r0, #3
    3454:	e3500001 	cmp	r0, #1
    3458:	0a000012 	beq	34a8 <sinf+0x98>
    345c:	e3500002 	cmp	r0, #2
    3460:	0a00000a 	beq	3490 <sinf+0x80>
    3464:	e3500000 	cmp	r0, #0
    3468:	e59d1004 	ldr	r1, [sp, #4]
    346c:	e59d0000 	ldr	r0, [sp]
    3470:	1a000010 	bne	34b8 <sinf+0xa8>
    3474:	e3a02001 	mov	r2, #1
    3478:	eb000408 	bl	44a0 <__kernel_sinf>
    347c:	eaffffee 	b	343c <sinf+0x2c>
    3480:	e3a01000 	mov	r1, #0
    3484:	e3a02000 	mov	r2, #0
    3488:	eb000404 	bl	44a0 <__kernel_sinf>
    348c:	eaffffea 	b	343c <sinf+0x2c>
    3490:	e59d0000 	ldr	r0, [sp]
    3494:	e59d1004 	ldr	r1, [sp, #4]
    3498:	e3a02001 	mov	r2, #1
    349c:	eb0003ff 	bl	44a0 <__kernel_sinf>
    34a0:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    34a4:	eaffffe4 	b	343c <sinf+0x2c>
    34a8:	e59d0000 	ldr	r0, [sp]
    34ac:	e59d1004 	ldr	r1, [sp, #4]
    34b0:	eb00011d 	bl	392c <__kernel_cosf>
    34b4:	eaffffe0 	b	343c <sinf+0x2c>
    34b8:	eb00011b 	bl	392c <__kernel_cosf>
    34bc:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    34c0:	eaffffdd 	b	343c <sinf+0x2c>
    34c4:	3f490fd8 	.word	0x3f490fd8
    34c8:	7f7fffff 	.word	0x7f7fffff

000034cc <__ieee754_rem_pio2f>:
    34cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    34d0:	e59f2418 	ldr	r2, [pc, #1048]	; 38f0 <__ieee754_rem_pio2f+0x424>
    34d4:	e3c04102 	bic	r4, r0, #-2147483648	; 0x80000000
    34d8:	e1540002 	cmp	r4, r2
    34dc:	e24dd024 	sub	sp, sp, #36	; 0x24
    34e0:	e1a06000 	mov	r6, r0
    34e4:	e1a05001 	mov	r5, r1
    34e8:	da000043 	ble	35fc <__ieee754_rem_pio2f+0x130>
    34ec:	e59f2400 	ldr	r2, [pc, #1024]	; 38f4 <__ieee754_rem_pio2f+0x428>
    34f0:	e1540002 	cmp	r4, r2
    34f4:	ca000013 	bgt	3548 <__ieee754_rem_pio2f+0x7c>
    34f8:	e3500000 	cmp	r0, #0
    34fc:	e59f13f4 	ldr	r1, [pc, #1012]	; 38f8 <__ieee754_rem_pio2f+0x42c>
    3500:	da0000db 	ble	3874 <__ieee754_rem_pio2f+0x3a8>
    3504:	eb000554 	bl	4a5c <__aeabi_fsub>
    3508:	e59f33ec 	ldr	r3, [pc, #1004]	; 38fc <__ieee754_rem_pio2f+0x430>
    350c:	e3c6613e 	bic	r6, r6, #-2147483633	; 0x8000000f
    3510:	e1560003 	cmp	r6, r3
    3514:	e1a04000 	mov	r4, r0
    3518:	0a000045 	beq	3634 <__ieee754_rem_pio2f+0x168>
    351c:	e59f13dc 	ldr	r1, [pc, #988]	; 3900 <__ieee754_rem_pio2f+0x434>
    3520:	eb00054d 	bl	4a5c <__aeabi_fsub>
    3524:	e1a01000 	mov	r1, r0
    3528:	e5850000 	str	r0, [r5]
    352c:	e1a00004 	mov	r0, r4
    3530:	eb000549 	bl	4a5c <__aeabi_fsub>
    3534:	e59f13c4 	ldr	r1, [pc, #964]	; 3900 <__ieee754_rem_pio2f+0x434>
    3538:	eb000547 	bl	4a5c <__aeabi_fsub>
    353c:	e3a07001 	mov	r7, #1
    3540:	e5850004 	str	r0, [r5, #4]
    3544:	ea000030 	b	360c <__ieee754_rem_pio2f+0x140>
    3548:	e59f23b4 	ldr	r2, [pc, #948]	; 3904 <__ieee754_rem_pio2f+0x438>
    354c:	e1540002 	cmp	r4, r2
    3550:	da000058 	ble	36b8 <__ieee754_rem_pio2f+0x1ec>
    3554:	e59f23ac 	ldr	r2, [pc, #940]	; 3908 <__ieee754_rem_pio2f+0x43c>
    3558:	e1540002 	cmp	r4, r2
    355c:	ca00002e 	bgt	361c <__ieee754_rem_pio2f+0x150>
    3560:	e1a0abc4 	asr	r10, r4, #23
    3564:	e24aa086 	sub	r10, r10, #134	; 0x86
    3568:	e0444b8a 	sub	r4, r4, r10, lsl #23
    356c:	e1a00004 	mov	r0, r4
    3570:	eb0006e5 	bl	510c <__aeabi_f2iz>
    3574:	eb0005aa 	bl	4c24 <__aeabi_i2f>
    3578:	e1a03000 	mov	r3, r0
    357c:	e1a01000 	mov	r1, r0
    3580:	e1a00004 	mov	r0, r4
    3584:	e58d3014 	str	r3, [sp, #20]
    3588:	eb000533 	bl	4a5c <__aeabi_fsub>
    358c:	e59f1378 	ldr	r1, [pc, #888]	; 390c <__ieee754_rem_pio2f+0x440>
    3590:	eb0005da 	bl	4d00 <__aeabi_fmul>
    3594:	e1a07000 	mov	r7, r0
    3598:	eb0006db 	bl	510c <__aeabi_f2iz>
    359c:	eb0005a0 	bl	4c24 <__aeabi_i2f>
    35a0:	e1a01000 	mov	r1, r0
    35a4:	e1a04000 	mov	r4, r0
    35a8:	e1a00007 	mov	r0, r7
    35ac:	e58d4018 	str	r4, [sp, #24]
    35b0:	eb000529 	bl	4a5c <__aeabi_fsub>
    35b4:	e59f1350 	ldr	r1, [pc, #848]	; 390c <__ieee754_rem_pio2f+0x440>
    35b8:	eb0005d0 	bl	4d00 <__aeabi_fmul>
    35bc:	e3a01000 	mov	r1, #0
    35c0:	e58d001c 	str	r0, [sp, #28]
    35c4:	eb0006b2 	bl	5094 <__aeabi_fcmpeq>
    35c8:	e3500000 	cmp	r0, #0
    35cc:	03a07003 	moveq	r7, #3
    35d0:	0a000025 	beq	366c <__ieee754_rem_pio2f+0x1a0>
    35d4:	e28d8018 	add	r8, sp, #24
    35d8:	e3a07003 	mov	r7, #3
    35dc:	e1a00004 	mov	r0, r4
    35e0:	e3a01000 	mov	r1, #0
    35e4:	eb0006aa 	bl	5094 <__aeabi_fcmpeq>
    35e8:	e3500000 	cmp	r0, #0
    35ec:	e2477001 	sub	r7, r7, #1
    35f0:	0a00001d 	beq	366c <__ieee754_rem_pio2f+0x1a0>
    35f4:	e5384004 	ldr	r4, [r8, #-4]!
    35f8:	eafffff7 	b	35dc <__ieee754_rem_pio2f+0x110>
    35fc:	e3a03000 	mov	r3, #0
    3600:	e5850000 	str	r0, [r5]
    3604:	e5813004 	str	r3, [r1, #4]
    3608:	e3a07000 	mov	r7, #0
    360c:	e1a00007 	mov	r0, r7
    3610:	e28dd024 	add	sp, sp, #36	; 0x24
    3614:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3618:	e12fff1e 	bx	lr
    361c:	e1a01000 	mov	r1, r0
    3620:	eb00050d 	bl	4a5c <__aeabi_fsub>
    3624:	e3a07000 	mov	r7, #0
    3628:	e5850004 	str	r0, [r5, #4]
    362c:	e5850000 	str	r0, [r5]
    3630:	eafffff5 	b	360c <__ieee754_rem_pio2f+0x140>
    3634:	e59f12d4 	ldr	r1, [pc, #724]	; 3910 <__ieee754_rem_pio2f+0x444>
    3638:	eb000507 	bl	4a5c <__aeabi_fsub>
    363c:	e59f12d0 	ldr	r1, [pc, #720]	; 3914 <__ieee754_rem_pio2f+0x448>
    3640:	e1a04000 	mov	r4, r0
    3644:	eb000504 	bl	4a5c <__aeabi_fsub>
    3648:	e1a01000 	mov	r1, r0
    364c:	e5850000 	str	r0, [r5]
    3650:	e1a00004 	mov	r0, r4
    3654:	eb000500 	bl	4a5c <__aeabi_fsub>
    3658:	e59f12b4 	ldr	r1, [pc, #692]	; 3914 <__ieee754_rem_pio2f+0x448>
    365c:	eb0004fe 	bl	4a5c <__aeabi_fsub>
    3660:	e3a07001 	mov	r7, #1
    3664:	e5850004 	str	r0, [r5, #4]
    3668:	eaffffe7 	b	360c <__ieee754_rem_pio2f+0x140>
    366c:	e3a03002 	mov	r3, #2
    3670:	e58d3000 	str	r3, [sp]
    3674:	e59f329c 	ldr	r3, [pc, #668]	; 3918 <__ieee754_rem_pio2f+0x44c>
    3678:	e28d0014 	add	r0, sp, #20
    367c:	e58d3004 	str	r3, [sp, #4]
    3680:	e1a01005 	mov	r1, r5
    3684:	e1a03007 	mov	r3, r7
    3688:	e1a0200a 	mov	r2, r10
    368c:	eb00012b 	bl	3b40 <__kernel_rem_pio2f>
    3690:	e3560000 	cmp	r6, #0
    3694:	e1a07000 	mov	r7, r0
    3698:	aaffffdb 	bge	360c <__ieee754_rem_pio2f+0x140>
    369c:	e895000c 	ldm	r5, {r2, r3}
    36a0:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    36a4:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    36a8:	e5852000 	str	r2, [r5]
    36ac:	e5853004 	str	r3, [r5, #4]
    36b0:	e2607000 	rsb	r7, r0, #0
    36b4:	eaffffd4 	b	360c <__ieee754_rem_pio2f+0x140>
    36b8:	eb0003cb 	bl	45ec <fabsf>
    36bc:	e59f1258 	ldr	r1, [pc, #600]	; 391c <__ieee754_rem_pio2f+0x450>
    36c0:	e1a08000 	mov	r8, r0
    36c4:	eb00058d 	bl	4d00 <__aeabi_fmul>
    36c8:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
    36cc:	eb0004e3 	bl	4a60 <__addsf3>
    36d0:	eb00068d 	bl	510c <__aeabi_f2iz>
    36d4:	e1a07000 	mov	r7, r0
    36d8:	eb000551 	bl	4c24 <__aeabi_i2f>
    36dc:	e59f1214 	ldr	r1, [pc, #532]	; 38f8 <__ieee754_rem_pio2f+0x42c>
    36e0:	e1a0b000 	mov	r11, r0
    36e4:	eb000585 	bl	4d00 <__aeabi_fmul>
    36e8:	e1a01000 	mov	r1, r0
    36ec:	e1a00008 	mov	r0, r8
    36f0:	eb0004d9 	bl	4a5c <__aeabi_fsub>
    36f4:	e59f1204 	ldr	r1, [pc, #516]	; 3900 <__ieee754_rem_pio2f+0x434>
    36f8:	e1a0a000 	mov	r10, r0
    36fc:	e1a0000b 	mov	r0, r11
    3700:	eb00057e 	bl	4d00 <__aeabi_fmul>
    3704:	e357001f 	cmp	r7, #31
    3708:	e1a09000 	mov	r9, r0
    370c:	e1a01009 	mov	r1, r9
    3710:	e1a0000a 	mov	r0, r10
    3714:	ca000016 	bgt	3774 <__ieee754_rem_pio2f+0x2a8>
    3718:	e59f3200 	ldr	r3, [pc, #512]	; 3920 <__ieee754_rem_pio2f+0x454>
    371c:	e2472001 	sub	r2, r7, #1
    3720:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    3724:	e3c420ff 	bic	r2, r4, #255	; 0xff
    3728:	e1520003 	cmp	r2, r3
    372c:	0a000010 	beq	3774 <__ieee754_rem_pio2f+0x2a8>
    3730:	eb0004c9 	bl	4a5c <__aeabi_fsub>
    3734:	e1a08000 	mov	r8, r0
    3738:	e5858000 	str	r8, [r5]
    373c:	e1a01008 	mov	r1, r8
    3740:	e1a0000a 	mov	r0, r10
    3744:	eb0004c4 	bl	4a5c <__aeabi_fsub>
    3748:	e1a01009 	mov	r1, r9
    374c:	eb0004c2 	bl	4a5c <__aeabi_fsub>
    3750:	e3560000 	cmp	r6, #0
    3754:	e5850004 	str	r0, [r5, #4]
    3758:	aaffffab 	bge	360c <__ieee754_rem_pio2f+0x140>
    375c:	e2888102 	add	r8, r8, #-2147483648	; 0x80000000
    3760:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    3764:	e5858000 	str	r8, [r5]
    3768:	e5850004 	str	r0, [r5, #4]
    376c:	e2677000 	rsb	r7, r7, #0
    3770:	eaffffa5 	b	360c <__ieee754_rem_pio2f+0x140>
    3774:	eb0004b8 	bl	4a5c <__aeabi_fsub>
    3778:	e1a02ba0 	lsr	r2, r0, #23
    377c:	e1a03bc4 	asr	r3, r4, #23
    3780:	e20220ff 	and	r2, r2, #255	; 0xff
    3784:	e0622003 	rsb	r2, r2, r3
    3788:	e3520008 	cmp	r2, #8
    378c:	e1a08000 	mov	r8, r0
    3790:	daffffe8 	ble	3738 <__ieee754_rem_pio2f+0x26c>
    3794:	e59f1174 	ldr	r1, [pc, #372]	; 3910 <__ieee754_rem_pio2f+0x444>
    3798:	e1a0000b 	mov	r0, r11
    379c:	e58d300c 	str	r3, [sp, #12]
    37a0:	eb000556 	bl	4d00 <__aeabi_fmul>
    37a4:	e1a08000 	mov	r8, r0
    37a8:	e1a01008 	mov	r1, r8
    37ac:	e1a0000a 	mov	r0, r10
    37b0:	eb0004a9 	bl	4a5c <__aeabi_fsub>
    37b4:	e1a04000 	mov	r4, r0
    37b8:	e1a01004 	mov	r1, r4
    37bc:	e1a0000a 	mov	r0, r10
    37c0:	eb0004a5 	bl	4a5c <__aeabi_fsub>
    37c4:	e1a01008 	mov	r1, r8
    37c8:	eb0004a3 	bl	4a5c <__aeabi_fsub>
    37cc:	e59f1140 	ldr	r1, [pc, #320]	; 3914 <__ieee754_rem_pio2f+0x448>
    37d0:	e1a08000 	mov	r8, r0
    37d4:	e1a0000b 	mov	r0, r11
    37d8:	eb000548 	bl	4d00 <__aeabi_fmul>
    37dc:	e1a01008 	mov	r1, r8
    37e0:	eb00049d 	bl	4a5c <__aeabi_fsub>
    37e4:	e1a09000 	mov	r9, r0
    37e8:	e1a01009 	mov	r1, r9
    37ec:	e1a00004 	mov	r0, r4
    37f0:	eb000499 	bl	4a5c <__aeabi_fsub>
    37f4:	e59d300c 	ldr	r3, [sp, #12]
    37f8:	e1a02ba0 	lsr	r2, r0, #23
    37fc:	e20220ff 	and	r2, r2, #255	; 0xff
    3800:	e0623003 	rsb	r3, r2, r3
    3804:	e3530019 	cmp	r3, #25
    3808:	e1a08000 	mov	r8, r0
    380c:	d5850000 	strle	r0, [r5]
    3810:	d1a0a004 	movle	r10, r4
    3814:	daffffc8 	ble	373c <__ieee754_rem_pio2f+0x270>
    3818:	e59f1104 	ldr	r1, [pc, #260]	; 3924 <__ieee754_rem_pio2f+0x458>
    381c:	e1a0000b 	mov	r0, r11
    3820:	eb000536 	bl	4d00 <__aeabi_fmul>
    3824:	e1a08000 	mov	r8, r0
    3828:	e1a01008 	mov	r1, r8
    382c:	e1a00004 	mov	r0, r4
    3830:	eb000489 	bl	4a5c <__aeabi_fsub>
    3834:	e1a0a000 	mov	r10, r0
    3838:	e1a0100a 	mov	r1, r10
    383c:	e1a00004 	mov	r0, r4
    3840:	eb000485 	bl	4a5c <__aeabi_fsub>
    3844:	e1a01008 	mov	r1, r8
    3848:	eb000483 	bl	4a5c <__aeabi_fsub>
    384c:	e59f10d4 	ldr	r1, [pc, #212]	; 3928 <__ieee754_rem_pio2f+0x45c>
    3850:	e1a04000 	mov	r4, r0
    3854:	e1a0000b 	mov	r0, r11
    3858:	eb000528 	bl	4d00 <__aeabi_fmul>
    385c:	e1a01004 	mov	r1, r4
    3860:	eb00047d 	bl	4a5c <__aeabi_fsub>
    3864:	e1a09000 	mov	r9, r0
    3868:	e1a01009 	mov	r1, r9
    386c:	e1a0000a 	mov	r0, r10
    3870:	eaffffae 	b	3730 <__ieee754_rem_pio2f+0x264>
    3874:	eb000479 	bl	4a60 <__addsf3>
    3878:	e59f307c 	ldr	r3, [pc, #124]	; 38fc <__ieee754_rem_pio2f+0x430>
    387c:	e3c6613e 	bic	r6, r6, #-2147483633	; 0x8000000f
    3880:	e1560003 	cmp	r6, r3
    3884:	e1a04000 	mov	r4, r0
    3888:	0a00000a 	beq	38b8 <__ieee754_rem_pio2f+0x3ec>
    388c:	e59f106c 	ldr	r1, [pc, #108]	; 3900 <__ieee754_rem_pio2f+0x434>
    3890:	eb000472 	bl	4a60 <__addsf3>
    3894:	e1a01000 	mov	r1, r0
    3898:	e5850000 	str	r0, [r5]
    389c:	e1a00004 	mov	r0, r4
    38a0:	eb00046d 	bl	4a5c <__aeabi_fsub>
    38a4:	e59f1054 	ldr	r1, [pc, #84]	; 3900 <__ieee754_rem_pio2f+0x434>
    38a8:	eb00046c 	bl	4a60 <__addsf3>
    38ac:	e3e07000 	mvn	r7, #0
    38b0:	e5850004 	str	r0, [r5, #4]
    38b4:	eaffff54 	b	360c <__ieee754_rem_pio2f+0x140>
    38b8:	e59f1050 	ldr	r1, [pc, #80]	; 3910 <__ieee754_rem_pio2f+0x444>
    38bc:	eb000467 	bl	4a60 <__addsf3>
    38c0:	e59f104c 	ldr	r1, [pc, #76]	; 3914 <__ieee754_rem_pio2f+0x448>
    38c4:	e1a04000 	mov	r4, r0
    38c8:	eb000464 	bl	4a60 <__addsf3>
    38cc:	e1a01000 	mov	r1, r0
    38d0:	e5850000 	str	r0, [r5]
    38d4:	e1a00004 	mov	r0, r4
    38d8:	eb00045f 	bl	4a5c <__aeabi_fsub>
    38dc:	e59f1030 	ldr	r1, [pc, #48]	; 3914 <__ieee754_rem_pio2f+0x448>
    38e0:	eb00045e 	bl	4a60 <__addsf3>
    38e4:	e3e07000 	mvn	r7, #0
    38e8:	e5850004 	str	r0, [r5, #4]
    38ec:	eaffff46 	b	360c <__ieee754_rem_pio2f+0x140>
    38f0:	3f490fd8 	.word	0x3f490fd8
    38f4:	4016cbe3 	.word	0x4016cbe3
    38f8:	3fc90f80 	.word	0x3fc90f80
    38fc:	3fc90fd0 	.word	0x3fc90fd0
    3900:	37354443 	.word	0x37354443
    3904:	43490f80 	.word	0x43490f80
    3908:	7f7fffff 	.word	0x7f7fffff
    390c:	43800000 	.word	0x43800000
    3910:	37354400 	.word	0x37354400
    3914:	2e85a308 	.word	0x2e85a308
    3918:	00007a38 	.word	0x00007a38
    391c:	3f22f984 	.word	0x3f22f984
    3920:	000079b8 	.word	0x000079b8
    3924:	2e85a300 	.word	0x2e85a300
    3928:	248d3132 	.word	0x248d3132

0000392c <__kernel_cosf>:
    392c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3930:	e3c06102 	bic	r6, r0, #-2147483648	; 0x80000000
    3934:	e3560432 	cmp	r6, #838860800	; 0x32000000
    3938:	e1a05000 	mov	r5, r0
    393c:	e1a07001 	mov	r7, r1
    3940:	aa000032 	bge	3a10 <__kernel_cosf+0xe4>
    3944:	eb0005f0 	bl	510c <__aeabi_f2iz>
    3948:	e3500000 	cmp	r0, #0
    394c:	0a00006f 	beq	3b10 <__kernel_cosf+0x1e4>
    3950:	e1a01005 	mov	r1, r5
    3954:	e1a00005 	mov	r0, r5
    3958:	eb0004e8 	bl	4d00 <__aeabi_fmul>
    395c:	e59f11b4 	ldr	r1, [pc, #436]	; 3b18 <__kernel_cosf+0x1ec>
    3960:	e1a04000 	mov	r4, r0
    3964:	eb0004e5 	bl	4d00 <__aeabi_fmul>
    3968:	e59f11ac 	ldr	r1, [pc, #428]	; 3b1c <__kernel_cosf+0x1f0>
    396c:	eb00043b 	bl	4a60 <__addsf3>
    3970:	e1a01004 	mov	r1, r4
    3974:	eb0004e1 	bl	4d00 <__aeabi_fmul>
    3978:	e59f11a0 	ldr	r1, [pc, #416]	; 3b20 <__kernel_cosf+0x1f4>
    397c:	eb000436 	bl	4a5c <__aeabi_fsub>
    3980:	e1a01004 	mov	r1, r4
    3984:	eb0004dd 	bl	4d00 <__aeabi_fmul>
    3988:	e59f1194 	ldr	r1, [pc, #404]	; 3b24 <__kernel_cosf+0x1f8>
    398c:	eb000433 	bl	4a60 <__addsf3>
    3990:	e1a01004 	mov	r1, r4
    3994:	eb0004d9 	bl	4d00 <__aeabi_fmul>
    3998:	e59f1188 	ldr	r1, [pc, #392]	; 3b28 <__kernel_cosf+0x1fc>
    399c:	eb00042e 	bl	4a5c <__aeabi_fsub>
    39a0:	e1a01004 	mov	r1, r4
    39a4:	eb0004d5 	bl	4d00 <__aeabi_fmul>
    39a8:	e59f117c 	ldr	r1, [pc, #380]	; 3b2c <__kernel_cosf+0x200>
    39ac:	eb00042b 	bl	4a60 <__addsf3>
    39b0:	e1a01004 	mov	r1, r4
    39b4:	eb0004d1 	bl	4d00 <__aeabi_fmul>
    39b8:	e1a08000 	mov	r8, r0
    39bc:	e1a00004 	mov	r0, r4
    39c0:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
    39c4:	eb0004cd 	bl	4d00 <__aeabi_fmul>
    39c8:	e1a01008 	mov	r1, r8
    39cc:	e1a06000 	mov	r6, r0
    39d0:	e1a00004 	mov	r0, r4
    39d4:	eb0004c9 	bl	4d00 <__aeabi_fmul>
    39d8:	e1a01007 	mov	r1, r7
    39dc:	e1a04000 	mov	r4, r0
    39e0:	e1a00005 	mov	r0, r5
    39e4:	eb0004c5 	bl	4d00 <__aeabi_fmul>
    39e8:	e1a01000 	mov	r1, r0
    39ec:	e1a00004 	mov	r0, r4
    39f0:	eb000419 	bl	4a5c <__aeabi_fsub>
    39f4:	e1a01000 	mov	r1, r0
    39f8:	e1a00006 	mov	r0, r6
    39fc:	eb000416 	bl	4a5c <__aeabi_fsub>
    3a00:	e1a01000 	mov	r1, r0
    3a04:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3a08:	eb000413 	bl	4a5c <__aeabi_fsub>
    3a0c:	ea00003a 	b	3afc <__kernel_cosf+0x1d0>
    3a10:	e1a01000 	mov	r1, r0
    3a14:	eb0004b9 	bl	4d00 <__aeabi_fmul>
    3a18:	e59f10f8 	ldr	r1, [pc, #248]	; 3b18 <__kernel_cosf+0x1ec>
    3a1c:	e1a04000 	mov	r4, r0
    3a20:	eb0004b6 	bl	4d00 <__aeabi_fmul>
    3a24:	e59f10f0 	ldr	r1, [pc, #240]	; 3b1c <__kernel_cosf+0x1f0>
    3a28:	eb00040c 	bl	4a60 <__addsf3>
    3a2c:	e1a01004 	mov	r1, r4
    3a30:	eb0004b2 	bl	4d00 <__aeabi_fmul>
    3a34:	e59f10e4 	ldr	r1, [pc, #228]	; 3b20 <__kernel_cosf+0x1f4>
    3a38:	eb000407 	bl	4a5c <__aeabi_fsub>
    3a3c:	e1a01004 	mov	r1, r4
    3a40:	eb0004ae 	bl	4d00 <__aeabi_fmul>
    3a44:	e59f10d8 	ldr	r1, [pc, #216]	; 3b24 <__kernel_cosf+0x1f8>
    3a48:	eb000404 	bl	4a60 <__addsf3>
    3a4c:	e1a01004 	mov	r1, r4
    3a50:	eb0004aa 	bl	4d00 <__aeabi_fmul>
    3a54:	e59f10cc 	ldr	r1, [pc, #204]	; 3b28 <__kernel_cosf+0x1fc>
    3a58:	eb0003ff 	bl	4a5c <__aeabi_fsub>
    3a5c:	e1a01004 	mov	r1, r4
    3a60:	eb0004a6 	bl	4d00 <__aeabi_fmul>
    3a64:	e59f10c0 	ldr	r1, [pc, #192]	; 3b2c <__kernel_cosf+0x200>
    3a68:	eb0003fc 	bl	4a60 <__addsf3>
    3a6c:	e1a01004 	mov	r1, r4
    3a70:	eb0004a2 	bl	4d00 <__aeabi_fmul>
    3a74:	e59f30b4 	ldr	r3, [pc, #180]	; 3b30 <__kernel_cosf+0x204>
    3a78:	e1560003 	cmp	r6, r3
    3a7c:	e1a08000 	mov	r8, r0
    3a80:	daffffcd 	ble	39bc <__kernel_cosf+0x90>
    3a84:	e59f30a8 	ldr	r3, [pc, #168]	; 3b34 <__kernel_cosf+0x208>
    3a88:	e1560003 	cmp	r6, r3
    3a8c:	ca00001c 	bgt	3b04 <__kernel_cosf+0x1d8>
    3a90:	e28664ff 	add	r6, r6, #-16777216	; 0xff000000
    3a94:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3a98:	e1a01006 	mov	r1, r6
    3a9c:	eb0003ee 	bl	4a5c <__aeabi_fsub>
    3aa0:	e1a0a000 	mov	r10, r0
    3aa4:	e1a00004 	mov	r0, r4
    3aa8:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
    3aac:	eb000493 	bl	4d00 <__aeabi_fmul>
    3ab0:	e1a01006 	mov	r1, r6
    3ab4:	eb0003e8 	bl	4a5c <__aeabi_fsub>
    3ab8:	e1a01008 	mov	r1, r8
    3abc:	e1a06000 	mov	r6, r0
    3ac0:	e1a00004 	mov	r0, r4
    3ac4:	eb00048d 	bl	4d00 <__aeabi_fmul>
    3ac8:	e1a01007 	mov	r1, r7
    3acc:	e1a04000 	mov	r4, r0
    3ad0:	e1a00005 	mov	r0, r5
    3ad4:	eb000489 	bl	4d00 <__aeabi_fmul>
    3ad8:	e1a01000 	mov	r1, r0
    3adc:	e1a00004 	mov	r0, r4
    3ae0:	eb0003dd 	bl	4a5c <__aeabi_fsub>
    3ae4:	e1a01000 	mov	r1, r0
    3ae8:	e1a00006 	mov	r0, r6
    3aec:	eb0003da 	bl	4a5c <__aeabi_fsub>
    3af0:	e1a01000 	mov	r1, r0
    3af4:	e1a0000a 	mov	r0, r10
    3af8:	eb0003d7 	bl	4a5c <__aeabi_fsub>
    3afc:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    3b00:	e12fff1e 	bx	lr
    3b04:	e59fa02c 	ldr	r10, [pc, #44]	; 3b38 <__kernel_cosf+0x20c>
    3b08:	e59f602c 	ldr	r6, [pc, #44]	; 3b3c <__kernel_cosf+0x210>
    3b0c:	eaffffe4 	b	3aa4 <__kernel_cosf+0x178>
    3b10:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3b14:	eafffff8 	b	3afc <__kernel_cosf+0x1d0>
    3b18:	ad47d74e 	.word	0xad47d74e
    3b1c:	310f74f6 	.word	0x310f74f6
    3b20:	3493f27c 	.word	0x3493f27c
    3b24:	37d00d01 	.word	0x37d00d01
    3b28:	3ab60b61 	.word	0x3ab60b61
    3b2c:	3d2aaaab 	.word	0x3d2aaaab
    3b30:	3e999999 	.word	0x3e999999
    3b34:	3f480000 	.word	0x3f480000
    3b38:	3f380000 	.word	0x3f380000
    3b3c:	3e900000 	.word	0x3e900000

00003b40 <__kernel_rem_pio2f>:
    3b40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3b44:	e24ddf5f 	sub	sp, sp, #380	; 0x17c
    3b48:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    3b4c:	e59d41a0 	ldr	r4, [sp, #416]	; 0x1a0
    3b50:	e59f393c 	ldr	r3, [pc, #2364]	; 4494 <__kernel_rem_pio2f+0x954>
    3b54:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    3b58:	e252c003 	subs	r12, r2, #3
    3b5c:	4282c004 	addmi	r12, r2, #4
    3b60:	e58d3020 	str	r3, [sp, #32]
    3b64:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    3b68:	e1a0c1cc 	asr	r12, r12, #3
    3b6c:	e2433001 	sub	r3, r3, #1
    3b70:	e1cccfcc 	bic	r12, r12, r12, asr #31
    3b74:	e59d4020 	ldr	r4, [sp, #32]
    3b78:	e58d300c 	str	r3, [sp, #12]
    3b7c:	e58dc030 	str	r12, [sp, #48]	; 0x30
    3b80:	e1e0c00c 	mvn	r12, r12
    3b84:	e082c18c 	add	r12, r2, r12, lsl #3
    3b88:	e0933004 	adds	r3, r3, r4
    3b8c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    3b90:	e59d400c 	ldr	r4, [sp, #12]
    3b94:	e1a06000 	mov	r6, r0
    3b98:	e58d1024 	str	r1, [sp, #36]	; 0x24
    3b9c:	e58dc01c 	str	r12, [sp, #28]
    3ba0:	e0647002 	rsb	r7, r4, r2
    3ba4:	4a00000e 	bmi	3be4 <__kernel_rem_pio2f+0xa4>
    3ba8:	e59d41a4 	ldr	r4, [sp, #420]	; 0x1a4
    3bac:	e0873003 	add	r3, r7, r3
    3bb0:	e084a107 	add	r10, r4, r7, lsl #2
    3bb4:	e2835001 	add	r5, r3, #1
    3bb8:	e3a08000 	mov	r8, #0
    3bbc:	e28d4088 	add	r4, sp, #136	; 0x88
    3bc0:	e3570000 	cmp	r7, #0
    3bc4:	b3a00000 	movlt	r0, #0
    3bc8:	a79a0008 	ldrge	r0, [r10, r8]
    3bcc:	ab000414 	blge	4c24 <__aeabi_i2f>
    3bd0:	e2877001 	add	r7, r7, #1
    3bd4:	e1570005 	cmp	r7, r5
    3bd8:	e7840008 	str	r0, [r4, r8]
    3bdc:	e2888004 	add	r8, r8, #4
    3be0:	1afffff6 	bne	3bc0 <__kernel_rem_pio2f+0x80>
    3be4:	e59d2020 	ldr	r2, [sp, #32]
    3be8:	e3520000 	cmp	r2, #0
    3bec:	ba000215 	blt	4448 <__kernel_rem_pio2f+0x908>
    3bf0:	e59d3020 	ldr	r3, [sp, #32]
    3bf4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    3bf8:	e1a07103 	lsl	r7, r3, #2
    3bfc:	e28def4a 	add	lr, sp, #296	; 0x128
    3c00:	e58d7008 	str	r7, [sp, #8]
    3c04:	e28d5f49 	add	r5, sp, #292	; 0x124
    3c08:	e08e9007 	add	r9, lr, r7
    3c0c:	e1a0b104 	lsl	r11, r4, #2
    3c10:	e59d200c 	ldr	r2, [sp, #12]
    3c14:	e3520000 	cmp	r2, #0
    3c18:	ba000103 	blt	402c <__kernel_rem_pio2f+0x4ec>
    3c1c:	e28d3088 	add	r3, sp, #136	; 0x88
    3c20:	e083a104 	add	r10, r3, r4, lsl #2
    3c24:	e3a08000 	mov	r8, #0
    3c28:	e3a07000 	mov	r7, #0
    3c2c:	e7960008 	ldr	r0, [r6, r8]
    3c30:	e53a1004 	ldr	r1, [r10, #-4]!
    3c34:	eb000431 	bl	4d00 <__aeabi_fmul>
    3c38:	e1a01000 	mov	r1, r0
    3c3c:	e1a00007 	mov	r0, r7
    3c40:	eb000386 	bl	4a60 <__addsf3>
    3c44:	e2888004 	add	r8, r8, #4
    3c48:	e158000b 	cmp	r8, r11
    3c4c:	e1a07000 	mov	r7, r0
    3c50:	1afffff5 	bne	3c2c <__kernel_rem_pio2f+0xec>
    3c54:	e5a57004 	str	r7, [r5, #4]!
    3c58:	e1550009 	cmp	r5, r9
    3c5c:	e2844001 	add	r4, r4, #1
    3c60:	1affffea 	bne	3c10 <__kernel_rem_pio2f+0xd0>
    3c64:	e59d7008 	ldr	r7, [sp, #8]
    3c68:	e28d2038 	add	r2, sp, #56	; 0x38
    3c6c:	e0822007 	add	r2, r2, r7
    3c70:	e58d2034 	str	r2, [sp, #52]	; 0x34
    3c74:	e59d8020 	ldr	r8, [sp, #32]
    3c78:	e1a04108 	lsl	r4, r8, #2
    3c7c:	e28def5e 	add	lr, sp, #376	; 0x178
    3c80:	e08e3004 	add	r3, lr, r4
    3c84:	e3580000 	cmp	r8, #0
    3c88:	e58d4008 	str	r4, [sp, #8]
    3c8c:	e5139050 	ldr	r9, [r3, #-80]	; 0xffffffb0
    3c90:	da000017 	ble	3cf4 <__kernel_rem_pio2f+0x1b4>
    3c94:	e59d2008 	ldr	r2, [sp, #8]
    3c98:	e28d4034 	add	r4, sp, #52	; 0x34
    3c9c:	e28d3f4a 	add	r3, sp, #296	; 0x128
    3ca0:	e0835002 	add	r5, r3, r2
    3ca4:	e0847002 	add	r7, r4, r2
    3ca8:	e3a015ee 	mov	r1, #998244352	; 0x3b800000
    3cac:	e1a00009 	mov	r0, r9
    3cb0:	eb000412 	bl	4d00 <__aeabi_fmul>
    3cb4:	eb000514 	bl	510c <__aeabi_f2iz>
    3cb8:	eb0003d9 	bl	4c24 <__aeabi_i2f>
    3cbc:	e59f17d4 	ldr	r1, [pc, #2004]	; 4498 <__kernel_rem_pio2f+0x958>
    3cc0:	e1a0a000 	mov	r10, r0
    3cc4:	eb00040d 	bl	4d00 <__aeabi_fmul>
    3cc8:	e1a01000 	mov	r1, r0
    3ccc:	e1a00009 	mov	r0, r9
    3cd0:	eb000361 	bl	4a5c <__aeabi_fsub>
    3cd4:	eb00050c 	bl	510c <__aeabi_f2iz>
    3cd8:	e1a0100a 	mov	r1, r10
    3cdc:	e5a40004 	str	r0, [r4, #4]!
    3ce0:	e5350004 	ldr	r0, [r5, #-4]!
    3ce4:	eb00035d 	bl	4a60 <__addsf3>
    3ce8:	e1540007 	cmp	r4, r7
    3cec:	e1a09000 	mov	r9, r0
    3cf0:	1affffec 	bne	3ca8 <__kernel_rem_pio2f+0x168>
    3cf4:	e59d101c 	ldr	r1, [sp, #28]
    3cf8:	e1a00009 	mov	r0, r9
    3cfc:	eb000270 	bl	46c4 <scalbnf>
    3d00:	e3a0143e 	mov	r1, #1040187392	; 0x3e000000
    3d04:	e1a04000 	mov	r4, r0
    3d08:	eb0003fc 	bl	4d00 <__aeabi_fmul>
    3d0c:	eb000238 	bl	45f4 <floorf>
    3d10:	e3a01441 	mov	r1, #1090519040	; 0x41000000
    3d14:	eb0003f9 	bl	4d00 <__aeabi_fmul>
    3d18:	e1a01000 	mov	r1, r0
    3d1c:	e1a00004 	mov	r0, r4
    3d20:	eb00034d 	bl	4a5c <__aeabi_fsub>
    3d24:	e1a04000 	mov	r4, r0
    3d28:	eb0004f7 	bl	510c <__aeabi_f2iz>
    3d2c:	e1a05000 	mov	r5, r0
    3d30:	eb0003bb 	bl	4c24 <__aeabi_i2f>
    3d34:	e1a01000 	mov	r1, r0
    3d38:	e1a00004 	mov	r0, r4
    3d3c:	eb000346 	bl	4a5c <__aeabi_fsub>
    3d40:	e59d201c 	ldr	r2, [sp, #28]
    3d44:	e3520000 	cmp	r2, #0
    3d48:	e1a07000 	mov	r7, r0
    3d4c:	da00009e 	ble	3fcc <__kernel_rem_pio2f+0x48c>
    3d50:	e28d3f5e 	add	r3, sp, #376	; 0x178
    3d54:	e2482001 	sub	r2, r8, #1
    3d58:	e0832102 	add	r2, r3, r2, lsl #2
    3d5c:	e59d401c 	ldr	r4, [sp, #28]
    3d60:	e5120140 	ldr	r0, [r2, #-320]	; 0xfffffec0
    3d64:	e2643008 	rsb	r3, r4, #8
    3d68:	e1a01350 	asr	r1, r0, r3
    3d6c:	e0403311 	sub	r3, r0, r1, lsl r3
    3d70:	e2644007 	rsb	r4, r4, #7
    3d74:	e1a04453 	asr	r4, r3, r4
    3d78:	e5023140 	str	r3, [r2, #-320]	; 0xfffffec0
    3d7c:	e0855001 	add	r5, r5, r1
    3d80:	e3540000 	cmp	r4, #0
    3d84:	da000024 	ble	3e1c <__kernel_rem_pio2f+0x2dc>
    3d88:	e3580000 	cmp	r8, #0
    3d8c:	e2855001 	add	r5, r5, #1
    3d90:	da0000a3 	ble	4024 <__kernel_rem_pio2f+0x4e4>
    3d94:	e59d2008 	ldr	r2, [sp, #8]
    3d98:	e28d3038 	add	r3, sp, #56	; 0x38
    3d9c:	e0831002 	add	r1, r3, r2
    3da0:	e3a09000 	mov	r9, #0
    3da4:	ea000005 	b	3dc0 <__kernel_rem_pio2f+0x280>
    3da8:	e3520000 	cmp	r2, #0
    3dac:	12622c01 	rsbne	r2, r2, #256	; 0x100
    3db0:	15032004 	strne	r2, [r3, #-4]
    3db4:	13a09001 	movne	r9, #1
    3db8:	e1530001 	cmp	r3, r1
    3dbc:	0a000007 	beq	3de0 <__kernel_rem_pio2f+0x2a0>
    3dc0:	e3590000 	cmp	r9, #0
    3dc4:	e4932004 	ldr	r2, [r3], #4
    3dc8:	0afffff6 	beq	3da8 <__kernel_rem_pio2f+0x268>
    3dcc:	e26220ff 	rsb	r2, r2, #255	; 0xff
    3dd0:	e1530001 	cmp	r3, r1
    3dd4:	e5032004 	str	r2, [r3, #-4]
    3dd8:	e3a09001 	mov	r9, #1
    3ddc:	1afffff7 	bne	3dc0 <__kernel_rem_pio2f+0x280>
    3de0:	e59d301c 	ldr	r3, [sp, #28]
    3de4:	e3530000 	cmp	r3, #0
    3de8:	da000009 	ble	3e14 <__kernel_rem_pio2f+0x2d4>
    3dec:	e3530001 	cmp	r3, #1
    3df0:	0a00007b 	beq	3fe4 <__kernel_rem_pio2f+0x4a4>
    3df4:	e3530002 	cmp	r3, #2
    3df8:	1a000005 	bne	3e14 <__kernel_rem_pio2f+0x2d4>
    3dfc:	e2483001 	sub	r3, r8, #1
    3e00:	e28d0f5e 	add	r0, sp, #376	; 0x178
    3e04:	e0803103 	add	r3, r0, r3, lsl #2
    3e08:	e5132140 	ldr	r2, [r3, #-320]	; 0xfffffec0
    3e0c:	e202203f 	and	r2, r2, #63	; 0x3f
    3e10:	e5032140 	str	r2, [r3, #-320]	; 0xfffffec0
    3e14:	e3540002 	cmp	r4, #2
    3e18:	0a00005d 	beq	3f94 <__kernel_rem_pio2f+0x454>
    3e1c:	e1a00007 	mov	r0, r7
    3e20:	e3a01000 	mov	r1, #0
    3e24:	eb00049a 	bl	5094 <__aeabi_fcmpeq>
    3e28:	e3500000 	cmp	r0, #0
    3e2c:	0a000084 	beq	4044 <__kernel_rem_pio2f+0x504>
    3e30:	e59d2020 	ldr	r2, [sp, #32]
    3e34:	e2480001 	sub	r0, r8, #1
    3e38:	e1520000 	cmp	r2, r0
    3e3c:	ca00000a 	bgt	3e6c <__kernel_rem_pio2f+0x32c>
    3e40:	e59d2008 	ldr	r2, [sp, #8]
    3e44:	e28de038 	add	lr, sp, #56	; 0x38
    3e48:	e59dc034 	ldr	r12, [sp, #52]	; 0x34
    3e4c:	e08e3002 	add	r3, lr, r2
    3e50:	e3a02000 	mov	r2, #0
    3e54:	e5331004 	ldr	r1, [r3, #-4]!
    3e58:	e153000c 	cmp	r3, r12
    3e5c:	e1822001 	orr	r2, r2, r1
    3e60:	1afffffb 	bne	3e54 <__kernel_rem_pio2f+0x314>
    3e64:	e3520000 	cmp	r2, #0
    3e68:	1a000160 	bne	43f0 <__kernel_rem_pio2f+0x8b0>
    3e6c:	e59d3020 	ldr	r3, [sp, #32]
    3e70:	e2432001 	sub	r2, r3, #1
    3e74:	e1a02102 	lsl	r2, r2, #2
    3e78:	e28d4f5e 	add	r4, sp, #376	; 0x178
    3e7c:	e0843002 	add	r3, r4, r2
    3e80:	e5133140 	ldr	r3, [r3, #-320]	; 0xfffffec0
    3e84:	e3530000 	cmp	r3, #0
    3e88:	1a00016c 	bne	4440 <__kernel_rem_pio2f+0x900>
    3e8c:	e28de038 	add	lr, sp, #56	; 0x38
    3e90:	e08e2002 	add	r2, lr, r2
    3e94:	e3a03001 	mov	r3, #1
    3e98:	e5321004 	ldr	r1, [r2, #-4]!
    3e9c:	e3510000 	cmp	r1, #0
    3ea0:	e2833001 	add	r3, r3, #1
    3ea4:	0afffffb 	beq	3e98 <__kernel_rem_pio2f+0x358>
    3ea8:	e0883003 	add	r3, r8, r3
    3eac:	e2882001 	add	r2, r8, #1
    3eb0:	e1520003 	cmp	r2, r3
    3eb4:	e58d3028 	str	r3, [sp, #40]	; 0x28
    3eb8:	ca000033 	bgt	3f8c <__kernel_rem_pio2f+0x44c>
    3ebc:	e59d400c 	ldr	r4, [sp, #12]
    3ec0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    3ec4:	e0842002 	add	r2, r4, r2
    3ec8:	e28d4088 	add	r4, sp, #136	; 0x88
    3ecc:	e0881003 	add	r1, r8, r3
    3ed0:	e58d4018 	str	r4, [sp, #24]
    3ed4:	e28d3028 	add	r3, sp, #40	; 0x28
    3ed8:	e8930018 	ldm	r3, {r3, r4}
    3edc:	e0689003 	rsb	r9, r8, r3
    3ee0:	e2825001 	add	r5, r2, #1
    3ee4:	e0843008 	add	r3, r4, r8
    3ee8:	e59d2018 	ldr	r2, [sp, #24]
    3eec:	e59d41a4 	ldr	r4, [sp, #420]	; 0x1a4
    3ef0:	e59de008 	ldr	lr, [sp, #8]
    3ef4:	e0848101 	add	r8, r4, r1, lsl #2
    3ef8:	e1a09109 	lsl	r9, r9, #2
    3efc:	e28d4f4a 	add	r4, sp, #296	; 0x128
    3f00:	e0823103 	add	r3, r2, r3, lsl #2
    3f04:	e084400e 	add	r4, r4, lr
    3f08:	e58d9014 	str	r9, [sp, #20]
    3f0c:	e58d3010 	str	r3, [sp, #16]
    3f10:	e58d4008 	str	r4, [sp, #8]
    3f14:	e3a04000 	mov	r4, #0
    3f18:	e5b80004 	ldr	r0, [r8, #4]!
    3f1c:	eb000340 	bl	4c24 <__aeabi_i2f>
    3f20:	e59d300c 	ldr	r3, [sp, #12]
    3f24:	e59d2010 	ldr	r2, [sp, #16]
    3f28:	e3530000 	cmp	r3, #0
    3f2c:	e3a0a000 	mov	r10, #0
    3f30:	e7820004 	str	r0, [r2, r4]
    3f34:	ba00000c 	blt	3f6c <__kernel_rem_pio2f+0x42c>
    3f38:	e59d3018 	ldr	r3, [sp, #24]
    3f3c:	e3a09000 	mov	r9, #0
    3f40:	e0837105 	add	r7, r3, r5, lsl #2
    3f44:	e7960009 	ldr	r0, [r6, r9]
    3f48:	e5371004 	ldr	r1, [r7, #-4]!
    3f4c:	eb00036b 	bl	4d00 <__aeabi_fmul>
    3f50:	e1a01000 	mov	r1, r0
    3f54:	e1a0000a 	mov	r0, r10
    3f58:	eb0002c0 	bl	4a60 <__addsf3>
    3f5c:	e2899004 	add	r9, r9, #4
    3f60:	e159000b 	cmp	r9, r11
    3f64:	e1a0a000 	mov	r10, r0
    3f68:	1afffff5 	bne	3f44 <__kernel_rem_pio2f+0x404>
    3f6c:	e59d3008 	ldr	r3, [sp, #8]
    3f70:	e59d2014 	ldr	r2, [sp, #20]
    3f74:	e2844004 	add	r4, r4, #4
    3f78:	e5a3a004 	str	r10, [r3, #4]!
    3f7c:	e1540002 	cmp	r4, r2
    3f80:	e58d3008 	str	r3, [sp, #8]
    3f84:	e2855001 	add	r5, r5, #1
    3f88:	1affffe2 	bne	3f18 <__kernel_rem_pio2f+0x3d8>
    3f8c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
    3f90:	eaffff38 	b	3c78 <__kernel_rem_pio2f+0x138>
    3f94:	e1a01007 	mov	r1, r7
    3f98:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3f9c:	eb0002ae 	bl	4a5c <__aeabi_fsub>
    3fa0:	e3590000 	cmp	r9, #0
    3fa4:	e1a07000 	mov	r7, r0
    3fa8:	0affff9b 	beq	3e1c <__kernel_rem_pio2f+0x2dc>
    3fac:	e59d101c 	ldr	r1, [sp, #28]
    3fb0:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3fb4:	eb0001c2 	bl	46c4 <scalbnf>
    3fb8:	e1a01000 	mov	r1, r0
    3fbc:	e1a00007 	mov	r0, r7
    3fc0:	eb0002a5 	bl	4a5c <__aeabi_fsub>
    3fc4:	e1a07000 	mov	r7, r0
    3fc8:	eaffff93 	b	3e1c <__kernel_rem_pio2f+0x2dc>
    3fcc:	1a00000b 	bne	4000 <__kernel_rem_pio2f+0x4c0>
    3fd0:	e28def5e 	add	lr, sp, #376	; 0x178
    3fd4:	e08e3108 	add	r3, lr, r8, lsl #2
    3fd8:	e5134144 	ldr	r4, [r3, #-324]	; 0xfffffebc
    3fdc:	e1a04444 	asr	r4, r4, #8
    3fe0:	eaffff66 	b	3d80 <__kernel_rem_pio2f+0x240>
    3fe4:	e2483001 	sub	r3, r8, #1
    3fe8:	e28def5e 	add	lr, sp, #376	; 0x178
    3fec:	e08e3103 	add	r3, lr, r3, lsl #2
    3ff0:	e5132140 	ldr	r2, [r3, #-320]	; 0xfffffec0
    3ff4:	e202207f 	and	r2, r2, #127	; 0x7f
    3ff8:	e5032140 	str	r2, [r3, #-320]	; 0xfffffec0
    3ffc:	eaffff84 	b	3e14 <__kernel_rem_pio2f+0x2d4>
    4000:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
    4004:	eb000434 	bl	50dc <__aeabi_fcmpge>
    4008:	e3500000 	cmp	r0, #0
    400c:	03a04000 	moveq	r4, #0
    4010:	0affff81 	beq	3e1c <__kernel_rem_pio2f+0x2dc>
    4014:	e3580000 	cmp	r8, #0
    4018:	e3a04002 	mov	r4, #2
    401c:	e2855001 	add	r5, r5, #1
    4020:	caffff5b 	bgt	3d94 <__kernel_rem_pio2f+0x254>
    4024:	e3a09000 	mov	r9, #0
    4028:	eaffff6c 	b	3de0 <__kernel_rem_pio2f+0x2a0>
    402c:	e3a07000 	mov	r7, #0
    4030:	e5a57004 	str	r7, [r5, #4]!
    4034:	e1550009 	cmp	r5, r9
    4038:	e2844001 	add	r4, r4, #1
    403c:	1afffef3 	bne	3c10 <__kernel_rem_pio2f+0xd0>
    4040:	eaffff07 	b	3c64 <__kernel_rem_pio2f+0x124>
    4044:	e59d201c 	ldr	r2, [sp, #28]
    4048:	e1a00007 	mov	r0, r7
    404c:	e2621000 	rsb	r1, r2, #0
    4050:	e58d500c 	str	r5, [sp, #12]
    4054:	eb00019a 	bl	46c4 <scalbnf>
    4058:	e59f1438 	ldr	r1, [pc, #1080]	; 4498 <__kernel_rem_pio2f+0x958>
    405c:	e1a05000 	mov	r5, r0
    4060:	eb00041d 	bl	50dc <__aeabi_fcmpge>
    4064:	e3500000 	cmp	r0, #0
    4068:	0a0000fa 	beq	4458 <__kernel_rem_pio2f+0x918>
    406c:	e3a015ee 	mov	r1, #998244352	; 0x3b800000
    4070:	e1a00005 	mov	r0, r5
    4074:	eb000321 	bl	4d00 <__aeabi_fmul>
    4078:	eb000423 	bl	510c <__aeabi_f2iz>
    407c:	eb0002e8 	bl	4c24 <__aeabi_i2f>
    4080:	e59f1410 	ldr	r1, [pc, #1040]	; 4498 <__kernel_rem_pio2f+0x958>
    4084:	e1a06000 	mov	r6, r0
    4088:	eb00031c 	bl	4d00 <__aeabi_fmul>
    408c:	e1a01000 	mov	r1, r0
    4090:	e1a00005 	mov	r0, r5
    4094:	eb000270 	bl	4a5c <__aeabi_fsub>
    4098:	eb00041b 	bl	510c <__aeabi_f2iz>
    409c:	e59d2008 	ldr	r2, [sp, #8]
    40a0:	e28d3f5e 	add	r3, sp, #376	; 0x178
    40a4:	e0839002 	add	r9, r3, r2
    40a8:	e5090140 	str	r0, [r9, #-320]	; 0xfffffec0
    40ac:	e1a00006 	mov	r0, r6
    40b0:	eb000415 	bl	510c <__aeabi_f2iz>
    40b4:	e59d201c 	ldr	r2, [sp, #28]
    40b8:	e2888001 	add	r8, r8, #1
    40bc:	e28def5e 	add	lr, sp, #376	; 0x178
    40c0:	e08e3108 	add	r3, lr, r8, lsl #2
    40c4:	e2822008 	add	r2, r2, #8
    40c8:	e58d201c 	str	r2, [sp, #28]
    40cc:	e5030140 	str	r0, [r3, #-320]	; 0xfffffec0
    40d0:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    40d4:	e59d101c 	ldr	r1, [sp, #28]
    40d8:	eb000179 	bl	46c4 <scalbnf>
    40dc:	e3580000 	cmp	r8, #0
    40e0:	e1a05000 	mov	r5, r0
    40e4:	ba000039 	blt	41d0 <__kernel_rem_pio2f+0x690>
    40e8:	e068af08 	rsb	r10, r8, r8, lsl #30
    40ec:	e1a06108 	lsl	r6, r8, #2
    40f0:	e1a0a10a 	lsl	r10, r10, #2
    40f4:	e28d0038 	add	r0, sp, #56	; 0x38
    40f8:	e28d1f4a 	add	r1, sp, #296	; 0x128
    40fc:	e0807006 	add	r7, r0, r6
    4100:	e24aa004 	sub	r10, r10, #4
    4104:	e0816006 	add	r6, r1, r6
    4108:	e3a09000 	mov	r9, #0
    410c:	e7970009 	ldr	r0, [r7, r9]
    4110:	eb0002c3 	bl	4c24 <__aeabi_i2f>
    4114:	e1a01005 	mov	r1, r5
    4118:	eb0002f8 	bl	4d00 <__aeabi_fmul>
    411c:	e3a015ee 	mov	r1, #998244352	; 0x3b800000
    4120:	e7860009 	str	r0, [r6, r9]
    4124:	e1a00005 	mov	r0, r5
    4128:	eb0002f4 	bl	4d00 <__aeabi_fmul>
    412c:	e2499004 	sub	r9, r9, #4
    4130:	e159000a 	cmp	r9, r10
    4134:	e1a05000 	mov	r5, r0
    4138:	1afffff3 	bne	410c <__kernel_rem_pio2f+0x5cc>
    413c:	e2883001 	add	r3, r8, #1
    4140:	e59f7354 	ldr	r7, [pc, #852]	; 449c <__kernel_rem_pio2f+0x95c>
    4144:	e59d9020 	ldr	r9, [sp, #32]
    4148:	e58d8008 	str	r8, [sp, #8]
    414c:	e58d4010 	str	r4, [sp, #16]
    4150:	e3a05000 	mov	r5, #0
    4154:	e1a0b003 	mov	r11, r3
    4158:	e3590000 	cmp	r9, #0
    415c:	ba0000a1 	blt	43e8 <__kernel_rem_pio2f+0x8a8>
    4160:	e3550000 	cmp	r5, #0
    4164:	a3a0a000 	movge	r10, #0
    4168:	a3a04000 	movge	r4, #0
    416c:	a1a0800a 	movge	r8, r10
    4170:	aa000003 	bge	4184 <__kernel_rem_pio2f+0x644>
    4174:	ea00009b 	b	43e8 <__kernel_rem_pio2f+0x8a8>
    4178:	e1580005 	cmp	r8, r5
    417c:	e28aa004 	add	r10, r10, #4
    4180:	ca000009 	bgt	41ac <__kernel_rem_pio2f+0x66c>
    4184:	e796100a 	ldr	r1, [r6, r10]
    4188:	e797000a 	ldr	r0, [r7, r10]
    418c:	eb0002db 	bl	4d00 <__aeabi_fmul>
    4190:	e1a01000 	mov	r1, r0
    4194:	e1a00004 	mov	r0, r4
    4198:	eb000230 	bl	4a60 <__addsf3>
    419c:	e2888001 	add	r8, r8, #1
    41a0:	e1590008 	cmp	r9, r8
    41a4:	e1a04000 	mov	r4, r0
    41a8:	aafffff2 	bge	4178 <__kernel_rem_pio2f+0x638>
    41ac:	e28d2f5e 	add	r2, sp, #376	; 0x178
    41b0:	e0823105 	add	r3, r2, r5, lsl #2
    41b4:	e2855001 	add	r5, r5, #1
    41b8:	e155000b 	cmp	r5, r11
    41bc:	e50340a0 	str	r4, [r3, #-160]	; 0xffffff60
    41c0:	e2466004 	sub	r6, r6, #4
    41c4:	1affffe3 	bne	4158 <__kernel_rem_pio2f+0x618>
    41c8:	e59d8008 	ldr	r8, [sp, #8]
    41cc:	e59d4010 	ldr	r4, [sp, #16]
    41d0:	e59d21a0 	ldr	r2, [sp, #416]	; 0x1a0
    41d4:	e3520003 	cmp	r2, #3
    41d8:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    41dc:	ea00000f 	b	4220 <__kernel_rem_pio2f+0x6e0>
    41e0:	000043ac 	.word	0x000043ac
    41e4:	00004324 	.word	0x00004324
    41e8:	00004324 	.word	0x00004324
    41ec:	00004234 	.word	0x00004234
    41f0:	e3540000 	cmp	r4, #0
    41f4:	e3a00000 	mov	r0, #0
    41f8:	0a000042 	beq	4308 <__kernel_rem_pio2f+0x7c8>
    41fc:	e28d20d8 	add	r2, sp, #216	; 0xd8
    4200:	e892000c 	ldm	r2, {r2, r3}
    4204:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    4208:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    420c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    4210:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    4214:	e5842000 	str	r2, [r4]
    4218:	e5843004 	str	r3, [r4, #4]
    421c:	e5840008 	str	r0, [r4, #8]
    4220:	e59d200c 	ldr	r2, [sp, #12]
    4224:	e2020007 	and	r0, r2, #7
    4228:	e28ddf5f 	add	sp, sp, #380	; 0x17c
    422c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4230:	e12fff1e 	bx	lr
    4234:	e3580000 	cmp	r8, #0
    4238:	daffffec 	ble	41f0 <__kernel_rem_pio2f+0x6b0>
    423c:	e28d70d8 	add	r7, sp, #216	; 0xd8
    4240:	e2485001 	sub	r5, r8, #1
    4244:	e0875105 	add	r5, r7, r5, lsl #2
    4248:	e28d20d4 	add	r2, sp, #212	; 0xd4
    424c:	e1a06005 	mov	r6, r5
    4250:	e416b004 	ldr	r11, [r6], #-4
    4254:	e5969008 	ldr	r9, [r6, #8]
    4258:	e1a0000b 	mov	r0, r11
    425c:	e1a01009 	mov	r1, r9
    4260:	e58d2004 	str	r2, [sp, #4]
    4264:	eb0001fd 	bl	4a60 <__addsf3>
    4268:	e1a0a000 	mov	r10, r0
    426c:	e1a0100a 	mov	r1, r10
    4270:	e1a0000b 	mov	r0, r11
    4274:	eb0001f8 	bl	4a5c <__aeabi_fsub>
    4278:	e1a01000 	mov	r1, r0
    427c:	e1a00009 	mov	r0, r9
    4280:	eb0001f6 	bl	4a60 <__addsf3>
    4284:	e59d2004 	ldr	r2, [sp, #4]
    4288:	e1560002 	cmp	r6, r2
    428c:	e5860008 	str	r0, [r6, #8]
    4290:	e586a004 	str	r10, [r6, #4]
    4294:	1affffed 	bne	4250 <__kernel_rem_pio2f+0x710>
    4298:	e3580001 	cmp	r8, #1
    429c:	daffffd3 	ble	41f0 <__kernel_rem_pio2f+0x6b0>
    42a0:	e4159004 	ldr	r9, [r5], #-4
    42a4:	e595a008 	ldr	r10, [r5, #8]
    42a8:	e1a00009 	mov	r0, r9
    42ac:	e1a0100a 	mov	r1, r10
    42b0:	eb0001ea 	bl	4a60 <__addsf3>
    42b4:	e1a06000 	mov	r6, r0
    42b8:	e1a01006 	mov	r1, r6
    42bc:	e1a00009 	mov	r0, r9
    42c0:	eb0001e5 	bl	4a5c <__aeabi_fsub>
    42c4:	e1a01000 	mov	r1, r0
    42c8:	e1a0000a 	mov	r0, r10
    42cc:	eb0001e3 	bl	4a60 <__addsf3>
    42d0:	e1550007 	cmp	r5, r7
    42d4:	e5850008 	str	r0, [r5, #8]
    42d8:	e5856004 	str	r6, [r5, #4]
    42dc:	1affffef 	bne	42a0 <__kernel_rem_pio2f+0x760>
    42e0:	e2886001 	add	r6, r8, #1
    42e4:	e0856106 	add	r6, r5, r6, lsl #2
    42e8:	e3a00000 	mov	r0, #0
    42ec:	e2855008 	add	r5, r5, #8
    42f0:	e5361004 	ldr	r1, [r6, #-4]!
    42f4:	eb0001d9 	bl	4a60 <__addsf3>
    42f8:	e1560005 	cmp	r6, r5
    42fc:	1afffffb 	bne	42f0 <__kernel_rem_pio2f+0x7b0>
    4300:	e3540000 	cmp	r4, #0
    4304:	1affffbc 	bne	41fc <__kernel_rem_pio2f+0x6bc>
    4308:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    430c:	e59d30d8 	ldr	r3, [sp, #216]	; 0xd8
    4310:	e5843000 	str	r3, [r4]
    4314:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
    4318:	e5840008 	str	r0, [r4, #8]
    431c:	e5843004 	str	r3, [r4, #4]
    4320:	eaffffbe 	b	4220 <__kernel_rem_pio2f+0x6e0>
    4324:	e3580000 	cmp	r8, #0
    4328:	b3a03000 	movlt	r3, #0
    432c:	ba000009 	blt	4358 <__kernel_rem_pio2f+0x818>
    4330:	e28d60d8 	add	r6, sp, #216	; 0xd8
    4334:	e2885001 	add	r5, r8, #1
    4338:	e3a03000 	mov	r3, #0
    433c:	e0865105 	add	r5, r6, r5, lsl #2
    4340:	e1a00003 	mov	r0, r3
    4344:	e5351004 	ldr	r1, [r5, #-4]!
    4348:	eb0001c4 	bl	4a60 <__addsf3>
    434c:	e1550006 	cmp	r5, r6
    4350:	1afffffb 	bne	4344 <__kernel_rem_pio2f+0x804>
    4354:	e1a03000 	mov	r3, r0
    4358:	e3540000 	cmp	r4, #0
    435c:	e59de024 	ldr	lr, [sp, #36]	; 0x24
    4360:	12832102 	addne	r2, r3, #-2147483648	; 0x80000000
    4364:	01a02003 	moveq	r2, r3
    4368:	e58e2000 	str	r2, [lr]
    436c:	e59d00d8 	ldr	r0, [sp, #216]	; 0xd8
    4370:	e1a01003 	mov	r1, r3
    4374:	eb0001b8 	bl	4a5c <__aeabi_fsub>
    4378:	e3580000 	cmp	r8, #0
    437c:	da000005 	ble	4398 <__kernel_rem_pio2f+0x858>
    4380:	e28d50d8 	add	r5, sp, #216	; 0xd8
    4384:	e0858108 	add	r8, r5, r8, lsl #2
    4388:	e5b51004 	ldr	r1, [r5, #4]!
    438c:	eb0001b3 	bl	4a60 <__addsf3>
    4390:	e1550008 	cmp	r5, r8
    4394:	1afffffb 	bne	4388 <__kernel_rem_pio2f+0x848>
    4398:	e3540000 	cmp	r4, #0
    439c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    43a0:	12800102 	addne	r0, r0, #-2147483648	; 0x80000000
    43a4:	e5820004 	str	r0, [r2, #4]
    43a8:	eaffff9c 	b	4220 <__kernel_rem_pio2f+0x6e0>
    43ac:	e3580000 	cmp	r8, #0
    43b0:	ba000031 	blt	447c <__kernel_rem_pio2f+0x93c>
    43b4:	e28d60d8 	add	r6, sp, #216	; 0xd8
    43b8:	e2885001 	add	r5, r8, #1
    43bc:	e3a00000 	mov	r0, #0
    43c0:	e0865105 	add	r5, r6, r5, lsl #2
    43c4:	e5351004 	ldr	r1, [r5, #-4]!
    43c8:	eb0001a4 	bl	4a60 <__addsf3>
    43cc:	e1550006 	cmp	r5, r6
    43d0:	1afffffb 	bne	43c4 <__kernel_rem_pio2f+0x884>
    43d4:	e3540000 	cmp	r4, #0
    43d8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    43dc:	12800102 	addne	r0, r0, #-2147483648	; 0x80000000
    43e0:	e5830000 	str	r0, [r3]
    43e4:	eaffff8d 	b	4220 <__kernel_rem_pio2f+0x6e0>
    43e8:	e3a04000 	mov	r4, #0
    43ec:	eaffff6e 	b	41ac <__kernel_rem_pio2f+0x66c>
    43f0:	e1a03100 	lsl	r3, r0, #2
    43f4:	e28def5e 	add	lr, sp, #376	; 0x178
    43f8:	e08e2003 	add	r2, lr, r3
    43fc:	e5122140 	ldr	r2, [r2, #-320]	; 0xfffffec0
    4400:	e3520000 	cmp	r2, #0
    4404:	e59d201c 	ldr	r2, [sp, #28]
    4408:	e2422008 	sub	r2, r2, #8
    440c:	e58d500c 	str	r5, [sp, #12]
    4410:	e58d201c 	str	r2, [sp, #28]
    4414:	1a000016 	bne	4474 <__kernel_rem_pio2f+0x934>
    4418:	e28de038 	add	lr, sp, #56	; 0x38
    441c:	e08e3003 	add	r3, lr, r3
    4420:	e1a08000 	mov	r8, r0
    4424:	e5331004 	ldr	r1, [r3, #-4]!
    4428:	e3510000 	cmp	r1, #0
    442c:	e2488001 	sub	r8, r8, #1
    4430:	e2422008 	sub	r2, r2, #8
    4434:	0afffffa 	beq	4424 <__kernel_rem_pio2f+0x8e4>
    4438:	e58d201c 	str	r2, [sp, #28]
    443c:	eaffff23 	b	40d0 <__kernel_rem_pio2f+0x590>
    4440:	e3a03001 	mov	r3, #1
    4444:	eafffe97 	b	3ea8 <__kernel_rem_pio2f+0x368>
    4448:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    444c:	e1a07102 	lsl	r7, r2, #2
    4450:	e1a0b103 	lsl	r11, r3, #2
    4454:	eafffe03 	b	3c68 <__kernel_rem_pio2f+0x128>
    4458:	e1a00005 	mov	r0, r5
    445c:	eb00032a 	bl	510c <__aeabi_f2iz>
    4460:	e59d3008 	ldr	r3, [sp, #8]
    4464:	e28def5e 	add	lr, sp, #376	; 0x178
    4468:	e08e9003 	add	r9, lr, r3
    446c:	e5090140 	str	r0, [r9, #-320]	; 0xfffffec0
    4470:	eaffff16 	b	40d0 <__kernel_rem_pio2f+0x590>
    4474:	e1a08000 	mov	r8, r0
    4478:	eaffff14 	b	40d0 <__kernel_rem_pio2f+0x590>
    447c:	e3a00000 	mov	r0, #0
    4480:	e3540000 	cmp	r4, #0
    4484:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    4488:	12800102 	addne	r0, r0, #-2147483648	; 0x80000000
    448c:	e5830000 	str	r0, [r3]
    4490:	eaffff62 	b	4220 <__kernel_rem_pio2f+0x6e0>
    4494:	00007d50 	.word	0x00007d50
    4498:	43800000 	.word	0x43800000
    449c:	00007d5c 	.word	0x00007d5c

000044a0 <__kernel_sinf>:
    44a0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    44a4:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    44a8:	e3530432 	cmp	r3, #838860800	; 0x32000000
    44ac:	e1a04000 	mov	r4, r0
    44b0:	e1a07001 	mov	r7, r1
    44b4:	e1a08002 	mov	r8, r2
    44b8:	aa000002 	bge	44c8 <__kernel_sinf+0x28>
    44bc:	eb000312 	bl	510c <__aeabi_f2iz>
    44c0:	e3500000 	cmp	r0, #0
    44c4:	0a000033 	beq	4598 <__kernel_sinf+0xf8>
    44c8:	e1a01004 	mov	r1, r4
    44cc:	e1a00004 	mov	r0, r4
    44d0:	eb00020a 	bl	4d00 <__aeabi_fmul>
    44d4:	e1a01004 	mov	r1, r4
    44d8:	e1a05000 	mov	r5, r0
    44dc:	eb000207 	bl	4d00 <__aeabi_fmul>
    44e0:	e59f10ec 	ldr	r1, [pc, #236]	; 45d4 <__kernel_sinf+0x134>
    44e4:	e1a06000 	mov	r6, r0
    44e8:	e1a00005 	mov	r0, r5
    44ec:	eb000203 	bl	4d00 <__aeabi_fmul>
    44f0:	e59f10e0 	ldr	r1, [pc, #224]	; 45d8 <__kernel_sinf+0x138>
    44f4:	eb000158 	bl	4a5c <__aeabi_fsub>
    44f8:	e1a01005 	mov	r1, r5
    44fc:	eb0001ff 	bl	4d00 <__aeabi_fmul>
    4500:	e59f10d4 	ldr	r1, [pc, #212]	; 45dc <__kernel_sinf+0x13c>
    4504:	eb000155 	bl	4a60 <__addsf3>
    4508:	e1a01005 	mov	r1, r5
    450c:	eb0001fb 	bl	4d00 <__aeabi_fmul>
    4510:	e59f10c8 	ldr	r1, [pc, #200]	; 45e0 <__kernel_sinf+0x140>
    4514:	eb000150 	bl	4a5c <__aeabi_fsub>
    4518:	e1a01005 	mov	r1, r5
    451c:	eb0001f7 	bl	4d00 <__aeabi_fmul>
    4520:	e59f10bc 	ldr	r1, [pc, #188]	; 45e4 <__kernel_sinf+0x144>
    4524:	eb00014d 	bl	4a60 <__addsf3>
    4528:	e3580000 	cmp	r8, #0
    452c:	e1a0a000 	mov	r10, r0
    4530:	0a00001b 	beq	45a4 <__kernel_sinf+0x104>
    4534:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
    4538:	e1a00007 	mov	r0, r7
    453c:	eb0001ef 	bl	4d00 <__aeabi_fmul>
    4540:	e1a0100a 	mov	r1, r10
    4544:	e1a08000 	mov	r8, r0
    4548:	e1a00006 	mov	r0, r6
    454c:	eb0001eb 	bl	4d00 <__aeabi_fmul>
    4550:	e1a01000 	mov	r1, r0
    4554:	e1a00008 	mov	r0, r8
    4558:	eb00013f 	bl	4a5c <__aeabi_fsub>
    455c:	e1a01005 	mov	r1, r5
    4560:	eb0001e6 	bl	4d00 <__aeabi_fmul>
    4564:	e1a01007 	mov	r1, r7
    4568:	eb00013b 	bl	4a5c <__aeabi_fsub>
    456c:	e59f1074 	ldr	r1, [pc, #116]	; 45e8 <__kernel_sinf+0x148>
    4570:	e1a05000 	mov	r5, r0
    4574:	e1a00006 	mov	r0, r6
    4578:	eb0001e0 	bl	4d00 <__aeabi_fmul>
    457c:	e1a01000 	mov	r1, r0
    4580:	e1a00005 	mov	r0, r5
    4584:	eb000135 	bl	4a60 <__addsf3>
    4588:	e1a01000 	mov	r1, r0
    458c:	e1a00004 	mov	r0, r4
    4590:	eb000131 	bl	4a5c <__aeabi_fsub>
    4594:	e1a04000 	mov	r4, r0
    4598:	e1a00004 	mov	r0, r4
    459c:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    45a0:	e12fff1e 	bx	lr
    45a4:	e1a01000 	mov	r1, r0
    45a8:	e1a00005 	mov	r0, r5
    45ac:	eb0001d3 	bl	4d00 <__aeabi_fmul>
    45b0:	e59f1030 	ldr	r1, [pc, #48]	; 45e8 <__kernel_sinf+0x148>
    45b4:	eb000128 	bl	4a5c <__aeabi_fsub>
    45b8:	e1a01006 	mov	r1, r6
    45bc:	eb0001cf 	bl	4d00 <__aeabi_fmul>
    45c0:	e1a01000 	mov	r1, r0
    45c4:	e1a00004 	mov	r0, r4
    45c8:	eb000124 	bl	4a60 <__addsf3>
    45cc:	e1a04000 	mov	r4, r0
    45d0:	eafffff0 	b	4598 <__kernel_sinf+0xf8>
    45d4:	2f2ec9d3 	.word	0x2f2ec9d3
    45d8:	32d72f34 	.word	0x32d72f34
    45dc:	3638ef1b 	.word	0x3638ef1b
    45e0:	39500d01 	.word	0x39500d01
    45e4:	3c088889 	.word	0x3c088889
    45e8:	3e2aaaab 	.word	0x3e2aaaab

000045ec <fabsf>:
    45ec:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    45f0:	e12fff1e 	bx	lr

000045f4 <floorf>:
    45f4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    45f8:	e3c06102 	bic	r6, r0, #-2147483648	; 0x80000000
    45fc:	e1a05ba6 	lsr	r5, r6, #23
    4600:	e245507f 	sub	r5, r5, #127	; 0x7f
    4604:	e3550016 	cmp	r5, #22
    4608:	e1a01000 	mov	r1, r0
    460c:	e1a04000 	mov	r4, r0
    4610:	ca000014 	bgt	4668 <floorf+0x74>
    4614:	e3550000 	cmp	r5, #0
    4618:	e1a07000 	mov	r7, r0
    461c:	ba000017 	blt	4680 <floorf+0x8c>
    4620:	e59f608c 	ldr	r6, [pc, #140]	; 46b4 <floorf+0xc0>
    4624:	e1a06556 	asr	r6, r6, r5
    4628:	e1160000 	tst	r6, r0
    462c:	0a00000a 	beq	465c <floorf+0x68>
    4630:	e59f1080 	ldr	r1, [pc, #128]	; 46b8 <floorf+0xc4>
    4634:	eb000109 	bl	4a60 <__addsf3>
    4638:	e3a01000 	mov	r1, #0
    463c:	eb0002ac 	bl	50f4 <__aeabi_fcmpgt>
    4640:	e3500000 	cmp	r0, #0
    4644:	0a000003 	beq	4658 <floorf+0x64>
    4648:	e3540000 	cmp	r4, #0
    464c:	b3a03502 	movlt	r3, #8388608	; 0x800000
    4650:	b0847553 	addlt	r7, r4, r3, asr r5
    4654:	e1c74006 	bic	r4, r7, r6
    4658:	e1a01004 	mov	r1, r4
    465c:	e1a00001 	mov	r0, r1
    4660:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4664:	e12fff1e 	bx	lr
    4668:	e59f304c 	ldr	r3, [pc, #76]	; 46bc <floorf+0xc8>
    466c:	e1560003 	cmp	r6, r3
    4670:	9afffff9 	bls	465c <floorf+0x68>
    4674:	eb0000f9 	bl	4a60 <__addsf3>
    4678:	e1a01000 	mov	r1, r0
    467c:	eafffff6 	b	465c <floorf+0x68>
    4680:	e59f1030 	ldr	r1, [pc, #48]	; 46b8 <floorf+0xc4>
    4684:	eb0000f5 	bl	4a60 <__addsf3>
    4688:	e3a01000 	mov	r1, #0
    468c:	eb000298 	bl	50f4 <__aeabi_fcmpgt>
    4690:	e3500000 	cmp	r0, #0
    4694:	0affffef 	beq	4658 <floorf+0x64>
    4698:	e3540000 	cmp	r4, #0
    469c:	a3a04000 	movge	r4, #0
    46a0:	aaffffec 	bge	4658 <floorf+0x64>
    46a4:	e59f3014 	ldr	r3, [pc, #20]	; 46c0 <floorf+0xcc>
    46a8:	e3560000 	cmp	r6, #0
    46ac:	11a04003 	movne	r4, r3
    46b0:	eaffffe8 	b	4658 <floorf+0x64>
    46b4:	007fffff 	.word	0x007fffff
    46b8:	7149f2ca 	.word	0x7149f2ca
    46bc:	7f7fffff 	.word	0x7f7fffff
    46c0:	bf800000 	.word	0xbf800000

000046c4 <scalbnf>:
    46c4:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    46c8:	e92d4010 	push	{r4, lr}
    46cc:	e1a03000 	mov	r3, r0
    46d0:	e1a02000 	mov	r2, r0
    46d4:	e1a04001 	mov	r4, r1
    46d8:	0a00000e 	beq	4718 <scalbnf+0x54>
    46dc:	e59f10e8 	ldr	r1, [pc, #232]	; 47cc <scalbnf+0x108>
    46e0:	e15c0001 	cmp	r12, r1
    46e4:	8a00000e 	bhi	4724 <scalbnf+0x60>
    46e8:	e35c0502 	cmp	r12, #8388608	; 0x800000
    46ec:	3a000010 	bcc	4734 <scalbnf+0x70>
    46f0:	e1a0cbac 	lsr	r12, r12, #23
    46f4:	e08cc004 	add	r12, r12, r4
    46f8:	e35c00fe 	cmp	r12, #254	; 0xfe
    46fc:	c1a01003 	movgt	r1, r3
    4700:	ca000023 	bgt	4794 <scalbnf+0xd0>
    4704:	e35c0000 	cmp	r12, #0
    4708:	da000015 	ble	4764 <scalbnf+0xa0>
    470c:	e3c2247f 	bic	r2, r2, #2130706432	; 0x7f000000
    4710:	e3c23502 	bic	r3, r2, #8388608	; 0x800000
    4714:	e1833b8c 	orr	r3, r3, r12, lsl #23
    4718:	e1a00003 	mov	r0, r3
    471c:	e8bd4010 	pop	{r4, lr}
    4720:	e12fff1e 	bx	lr
    4724:	e1a01000 	mov	r1, r0
    4728:	eb0000cc 	bl	4a60 <__addsf3>
    472c:	e1a03000 	mov	r3, r0
    4730:	eafffff8 	b	4718 <scalbnf+0x54>
    4734:	e3a01313 	mov	r1, #1275068416	; 0x4c000000
    4738:	eb000170 	bl	4d00 <__aeabi_fmul>
    473c:	e59f208c 	ldr	r2, [pc, #140]	; 47d0 <scalbnf+0x10c>
    4740:	e1540002 	cmp	r4, r2
    4744:	e1a03000 	mov	r3, r0
    4748:	ba00000d 	blt	4784 <scalbnf+0xc0>
    474c:	e59fc080 	ldr	r12, [pc, #128]	; 47d4 <scalbnf+0x110>
    4750:	e000c00c 	and	r12, r0, r12
    4754:	e1a0cbcc 	asr	r12, r12, #23
    4758:	e1a02000 	mov	r2, r0
    475c:	e24cc019 	sub	r12, r12, #25
    4760:	eaffffe3 	b	46f4 <scalbnf+0x30>
    4764:	e37c0016 	cmn	r12, #22
    4768:	aa00000f 	bge	47ac <scalbnf+0xe8>
    476c:	e59f2064 	ldr	r2, [pc, #100]	; 47d8 <scalbnf+0x114>
    4770:	e1540002 	cmp	r4, r2
    4774:	e1a01003 	mov	r1, r3
    4778:	ca000005 	bgt	4794 <scalbnf+0xd0>
    477c:	e59f0058 	ldr	r0, [pc, #88]	; 47dc <scalbnf+0x118>
    4780:	eb000017 	bl	47e4 <copysignf>
    4784:	e59f1050 	ldr	r1, [pc, #80]	; 47dc <scalbnf+0x118>
    4788:	eb00015c 	bl	4d00 <__aeabi_fmul>
    478c:	e1a03000 	mov	r3, r0
    4790:	eaffffe0 	b	4718 <scalbnf+0x54>
    4794:	e59f0044 	ldr	r0, [pc, #68]	; 47e0 <scalbnf+0x11c>
    4798:	eb000011 	bl	47e4 <copysignf>
    479c:	e59f103c 	ldr	r1, [pc, #60]	; 47e0 <scalbnf+0x11c>
    47a0:	eb000156 	bl	4d00 <__aeabi_fmul>
    47a4:	e1a03000 	mov	r3, r0
    47a8:	eaffffda 	b	4718 <scalbnf+0x54>
    47ac:	e3c2247f 	bic	r2, r2, #2130706432	; 0x7f000000
    47b0:	e28c0019 	add	r0, r12, #25
    47b4:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    47b8:	e1820b80 	orr	r0, r2, r0, lsl #23
    47bc:	e3a01433 	mov	r1, #855638016	; 0x33000000
    47c0:	eb00014e 	bl	4d00 <__aeabi_fmul>
    47c4:	e1a03000 	mov	r3, r0
    47c8:	eaffffd2 	b	4718 <scalbnf+0x54>
    47cc:	7f7fffff 	.word	0x7f7fffff
    47d0:	ffff3cb0 	.word	0xffff3cb0
    47d4:	7f800000 	.word	0x7f800000
    47d8:	0000c350 	.word	0x0000c350
    47dc:	0da24260 	.word	0x0da24260
    47e0:	7149f2ca 	.word	0x7149f2ca

000047e4 <copysignf>:
    47e4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    47e8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    47ec:	e1810000 	orr	r0, r1, r0
    47f0:	e12fff1e 	bx	lr

000047f4 <__aeabi_uidiv>:
    47f4:	e2512001 	subs	r2, r1, #1
    47f8:	012fff1e 	bxeq	lr
    47fc:	3a000036 	bcc	48dc <__aeabi_uidiv+0xe8>
    4800:	e1500001 	cmp	r0, r1
    4804:	9a000022 	bls	4894 <__aeabi_uidiv+0xa0>
    4808:	e1110002 	tst	r1, r2
    480c:	0a000023 	beq	48a0 <__aeabi_uidiv+0xac>
    4810:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    4814:	01a01181 	lsleq	r1, r1, #3
    4818:	03a03008 	moveq	r3, #8
    481c:	13a03001 	movne	r3, #1
    4820:	e3510201 	cmp	r1, #268435456	; 0x10000000
    4824:	31510000 	cmpcc	r1, r0
    4828:	31a01201 	lslcc	r1, r1, #4
    482c:	31a03203 	lslcc	r3, r3, #4
    4830:	3afffffa 	bcc	4820 <__aeabi_uidiv+0x2c>
    4834:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4838:	31510000 	cmpcc	r1, r0
    483c:	31a01081 	lslcc	r1, r1, #1
    4840:	31a03083 	lslcc	r3, r3, #1
    4844:	3afffffa 	bcc	4834 <__aeabi_uidiv+0x40>
    4848:	e3a02000 	mov	r2, #0
    484c:	e1500001 	cmp	r0, r1
    4850:	20400001 	subcs	r0, r0, r1
    4854:	21822003 	orrcs	r2, r2, r3
    4858:	e15000a1 	cmp	r0, r1, lsr #1
    485c:	204000a1 	subcs	r0, r0, r1, lsr #1
    4860:	218220a3 	orrcs	r2, r2, r3, lsr #1
    4864:	e1500121 	cmp	r0, r1, lsr #2
    4868:	20400121 	subcs	r0, r0, r1, lsr #2
    486c:	21822123 	orrcs	r2, r2, r3, lsr #2
    4870:	e15001a1 	cmp	r0, r1, lsr #3
    4874:	204001a1 	subcs	r0, r0, r1, lsr #3
    4878:	218221a3 	orrcs	r2, r2, r3, lsr #3
    487c:	e3500000 	cmp	r0, #0
    4880:	11b03223 	lsrsne	r3, r3, #4
    4884:	11a01221 	lsrne	r1, r1, #4
    4888:	1affffef 	bne	484c <__aeabi_uidiv+0x58>
    488c:	e1a00002 	mov	r0, r2
    4890:	e12fff1e 	bx	lr
    4894:	03a00001 	moveq	r0, #1
    4898:	13a00000 	movne	r0, #0
    489c:	e12fff1e 	bx	lr
    48a0:	e3510801 	cmp	r1, #65536	; 0x10000
    48a4:	21a01821 	lsrcs	r1, r1, #16
    48a8:	23a02010 	movcs	r2, #16
    48ac:	33a02000 	movcc	r2, #0
    48b0:	e3510c01 	cmp	r1, #256	; 0x100
    48b4:	21a01421 	lsrcs	r1, r1, #8
    48b8:	22822008 	addcs	r2, r2, #8
    48bc:	e3510010 	cmp	r1, #16
    48c0:	21a01221 	lsrcs	r1, r1, #4
    48c4:	22822004 	addcs	r2, r2, #4
    48c8:	e3510004 	cmp	r1, #4
    48cc:	82822003 	addhi	r2, r2, #3
    48d0:	908220a1 	addls	r2, r2, r1, lsr #1
    48d4:	e1a00230 	lsr	r0, r0, r2
    48d8:	e12fff1e 	bx	lr
    48dc:	e3500000 	cmp	r0, #0
    48e0:	13e00000 	mvnne	r0, #0
    48e4:	ea000059 	b	4a50 <__aeabi_idiv0>

000048e8 <__aeabi_uidivmod>:
    48e8:	e3510000 	cmp	r1, #0
    48ec:	0afffffa 	beq	48dc <__aeabi_uidiv+0xe8>
    48f0:	e92d4003 	push	{r0, r1, lr}
    48f4:	ebffffbe 	bl	47f4 <__aeabi_uidiv>
    48f8:	e8bd4006 	pop	{r1, r2, lr}
    48fc:	e0030092 	mul	r3, r2, r0
    4900:	e0411003 	sub	r1, r1, r3
    4904:	e12fff1e 	bx	lr

00004908 <__aeabi_idiv>:
    4908:	e3510000 	cmp	r1, #0
    490c:	0a000043 	beq	4a20 <.divsi3_skip_div0_test+0x110>

00004910 <.divsi3_skip_div0_test>:
    4910:	e020c001 	eor	r12, r0, r1
    4914:	42611000 	rsbmi	r1, r1, #0
    4918:	e2512001 	subs	r2, r1, #1
    491c:	0a000027 	beq	49c0 <.divsi3_skip_div0_test+0xb0>
    4920:	e1b03000 	movs	r3, r0
    4924:	42603000 	rsbmi	r3, r0, #0
    4928:	e1530001 	cmp	r3, r1
    492c:	9a000026 	bls	49cc <.divsi3_skip_div0_test+0xbc>
    4930:	e1110002 	tst	r1, r2
    4934:	0a000028 	beq	49dc <.divsi3_skip_div0_test+0xcc>
    4938:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    493c:	01a01181 	lsleq	r1, r1, #3
    4940:	03a02008 	moveq	r2, #8
    4944:	13a02001 	movne	r2, #1
    4948:	e3510201 	cmp	r1, #268435456	; 0x10000000
    494c:	31510003 	cmpcc	r1, r3
    4950:	31a01201 	lslcc	r1, r1, #4
    4954:	31a02202 	lslcc	r2, r2, #4
    4958:	3afffffa 	bcc	4948 <.divsi3_skip_div0_test+0x38>
    495c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4960:	31510003 	cmpcc	r1, r3
    4964:	31a01081 	lslcc	r1, r1, #1
    4968:	31a02082 	lslcc	r2, r2, #1
    496c:	3afffffa 	bcc	495c <.divsi3_skip_div0_test+0x4c>
    4970:	e3a00000 	mov	r0, #0
    4974:	e1530001 	cmp	r3, r1
    4978:	20433001 	subcs	r3, r3, r1
    497c:	21800002 	orrcs	r0, r0, r2
    4980:	e15300a1 	cmp	r3, r1, lsr #1
    4984:	204330a1 	subcs	r3, r3, r1, lsr #1
    4988:	218000a2 	orrcs	r0, r0, r2, lsr #1
    498c:	e1530121 	cmp	r3, r1, lsr #2
    4990:	20433121 	subcs	r3, r3, r1, lsr #2
    4994:	21800122 	orrcs	r0, r0, r2, lsr #2
    4998:	e15301a1 	cmp	r3, r1, lsr #3
    499c:	204331a1 	subcs	r3, r3, r1, lsr #3
    49a0:	218001a2 	orrcs	r0, r0, r2, lsr #3
    49a4:	e3530000 	cmp	r3, #0
    49a8:	11b02222 	lsrsne	r2, r2, #4
    49ac:	11a01221 	lsrne	r1, r1, #4
    49b0:	1affffef 	bne	4974 <.divsi3_skip_div0_test+0x64>
    49b4:	e35c0000 	cmp	r12, #0
    49b8:	42600000 	rsbmi	r0, r0, #0
    49bc:	e12fff1e 	bx	lr
    49c0:	e13c0000 	teq	r12, r0
    49c4:	42600000 	rsbmi	r0, r0, #0
    49c8:	e12fff1e 	bx	lr
    49cc:	33a00000 	movcc	r0, #0
    49d0:	01a00fcc 	asreq	r0, r12, #31
    49d4:	03800001 	orreq	r0, r0, #1
    49d8:	e12fff1e 	bx	lr
    49dc:	e3510801 	cmp	r1, #65536	; 0x10000
    49e0:	21a01821 	lsrcs	r1, r1, #16
    49e4:	23a02010 	movcs	r2, #16
    49e8:	33a02000 	movcc	r2, #0
    49ec:	e3510c01 	cmp	r1, #256	; 0x100
    49f0:	21a01421 	lsrcs	r1, r1, #8
    49f4:	22822008 	addcs	r2, r2, #8
    49f8:	e3510010 	cmp	r1, #16
    49fc:	21a01221 	lsrcs	r1, r1, #4
    4a00:	22822004 	addcs	r2, r2, #4
    4a04:	e3510004 	cmp	r1, #4
    4a08:	82822003 	addhi	r2, r2, #3
    4a0c:	908220a1 	addls	r2, r2, r1, lsr #1
    4a10:	e35c0000 	cmp	r12, #0
    4a14:	e1a00233 	lsr	r0, r3, r2
    4a18:	42600000 	rsbmi	r0, r0, #0
    4a1c:	e12fff1e 	bx	lr
    4a20:	e3500000 	cmp	r0, #0
    4a24:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    4a28:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    4a2c:	ea000007 	b	4a50 <__aeabi_idiv0>

00004a30 <__aeabi_idivmod>:
    4a30:	e3510000 	cmp	r1, #0
    4a34:	0afffff9 	beq	4a20 <.divsi3_skip_div0_test+0x110>
    4a38:	e92d4003 	push	{r0, r1, lr}
    4a3c:	ebffffb3 	bl	4910 <.divsi3_skip_div0_test>
    4a40:	e8bd4006 	pop	{r1, r2, lr}
    4a44:	e0030092 	mul	r3, r2, r0
    4a48:	e0411003 	sub	r1, r1, r3
    4a4c:	e12fff1e 	bx	lr

00004a50 <__aeabi_idiv0>:
    4a50:	e12fff1e 	bx	lr

00004a54 <__aeabi_frsub>:
    4a54:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    4a58:	ea000000 	b	4a60 <__addsf3>

00004a5c <__aeabi_fsub>:
    4a5c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00004a60 <__addsf3>:
    4a60:	e1b02080 	lsls	r2, r0, #1
    4a64:	11b03081 	lslsne	r3, r1, #1
    4a68:	11320003 	teqne	r2, r3
    4a6c:	11f0cc42 	mvnsne	r12, r2, asr #24
    4a70:	11f0cc43 	mvnsne	r12, r3, asr #24
    4a74:	0a000047 	beq	4b98 <__addsf3+0x138>
    4a78:	e1a02c22 	lsr	r2, r2, #24
    4a7c:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    4a80:	c0822003 	addgt	r2, r2, r3
    4a84:	c0201001 	eorgt	r1, r0, r1
    4a88:	c0210000 	eorgt	r0, r1, r0
    4a8c:	c0201001 	eorgt	r1, r0, r1
    4a90:	b2633000 	rsblt	r3, r3, #0
    4a94:	e3530019 	cmp	r3, #25
    4a98:	812fff1e 	bxhi	lr
    4a9c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    4aa0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4aa4:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    4aa8:	12600000 	rsbne	r0, r0, #0
    4aac:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    4ab0:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    4ab4:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    4ab8:	12611000 	rsbne	r1, r1, #0
    4abc:	e1320003 	teq	r2, r3
    4ac0:	0a00002e 	beq	4b80 <__addsf3+0x120>
    4ac4:	e2422001 	sub	r2, r2, #1
    4ac8:	e0900351 	adds	r0, r0, r1, asr r3
    4acc:	e2633020 	rsb	r3, r3, #32
    4ad0:	e1a01311 	lsl	r1, r1, r3
    4ad4:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    4ad8:	5a000001 	bpl	4ae4 <__addsf3+0x84>
    4adc:	e2711000 	rsbs	r1, r1, #0
    4ae0:	e2e00000 	rsc	r0, r0, #0
    4ae4:	e3500502 	cmp	r0, #8388608	; 0x800000
    4ae8:	3a00000b 	bcc	4b1c <__addsf3+0xbc>
    4aec:	e3500401 	cmp	r0, #16777216	; 0x1000000
    4af0:	3a000004 	bcc	4b08 <__addsf3+0xa8>
    4af4:	e1b000a0 	lsrs	r0, r0, #1
    4af8:	e1a01061 	rrx	r1, r1
    4afc:	e2822001 	add	r2, r2, #1
    4b00:	e35200fe 	cmp	r2, #254	; 0xfe
    4b04:	2a000038 	bcs	4bec <__addsf3+0x18c>
    4b08:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4b0c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    4b10:	03c00001 	biceq	r0, r0, #1
    4b14:	e1800003 	orr	r0, r0, r3
    4b18:	e12fff1e 	bx	lr
    4b1c:	e1b01081 	lsls	r1, r1, #1
    4b20:	e0a00000 	adc	r0, r0, r0
    4b24:	e3100502 	tst	r0, #8388608	; 0x800000
    4b28:	e2422001 	sub	r2, r2, #1
    4b2c:	1afffff5 	bne	4b08 <__addsf3+0xa8>
    4b30:	e1b0c620 	lsrs	r12, r0, #12
    4b34:	01a00600 	lsleq	r0, r0, #12
    4b38:	0242200c 	subeq	r2, r2, #12
    4b3c:	e31008ff 	tst	r0, #16711680	; 0xff0000
    4b40:	01a00400 	lsleq	r0, r0, #8
    4b44:	02422008 	subeq	r2, r2, #8
    4b48:	e310060f 	tst	r0, #15728640	; 0xf00000
    4b4c:	01a00200 	lsleq	r0, r0, #4
    4b50:	02422004 	subeq	r2, r2, #4
    4b54:	e3100503 	tst	r0, #12582912	; 0xc00000
    4b58:	01a00100 	lsleq	r0, r0, #2
    4b5c:	02422002 	subeq	r2, r2, #2
    4b60:	e3500502 	cmp	r0, #8388608	; 0x800000
    4b64:	31a00080 	lslcc	r0, r0, #1
    4b68:	e2d22000 	sbcs	r2, r2, #0
    4b6c:	a0800b82 	addge	r0, r0, r2, lsl #23
    4b70:	b2622000 	rsblt	r2, r2, #0
    4b74:	a1800003 	orrge	r0, r0, r3
    4b78:	b1830230 	orrlt	r0, r3, r0, lsr r2
    4b7c:	e12fff1e 	bx	lr
    4b80:	e3320000 	teq	r2, #0
    4b84:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    4b88:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    4b8c:	02822001 	addeq	r2, r2, #1
    4b90:	12433001 	subne	r3, r3, #1
    4b94:	eaffffca 	b	4ac4 <__addsf3+0x64>
    4b98:	e1a03081 	lsl	r3, r1, #1
    4b9c:	e1f0cc42 	mvns	r12, r2, asr #24
    4ba0:	11f0cc43 	mvnsne	r12, r3, asr #24
    4ba4:	0a000013 	beq	4bf8 <__addsf3+0x198>
    4ba8:	e1320003 	teq	r2, r3
    4bac:	0a000002 	beq	4bbc <__addsf3+0x15c>
    4bb0:	e3320000 	teq	r2, #0
    4bb4:	01a00001 	moveq	r0, r1
    4bb8:	e12fff1e 	bx	lr
    4bbc:	e1300001 	teq	r0, r1
    4bc0:	13a00000 	movne	r0, #0
    4bc4:	112fff1e 	bxne	lr
    4bc8:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    4bcc:	1a000002 	bne	4bdc <__addsf3+0x17c>
    4bd0:	e1b00080 	lsls	r0, r0, #1
    4bd4:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    4bd8:	e12fff1e 	bx	lr
    4bdc:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    4be0:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    4be4:	312fff1e 	bxcc	lr
    4be8:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    4bec:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    4bf0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4bf4:	e12fff1e 	bx	lr
    4bf8:	e1f02c42 	mvns	r2, r2, asr #24
    4bfc:	11a00001 	movne	r0, r1
    4c00:	01f03c43 	mvnseq	r3, r3, asr #24
    4c04:	11a01000 	movne	r1, r0
    4c08:	e1b02480 	lsls	r2, r0, #9
    4c0c:	01b03481 	lslseq	r3, r1, #9
    4c10:	01300001 	teqeq	r0, r1
    4c14:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    4c18:	e12fff1e 	bx	lr

00004c1c <__aeabi_ui2f>:
    4c1c:	e3a03000 	mov	r3, #0
    4c20:	ea000001 	b	4c2c <__aeabi_i2f+0x8>

00004c24 <__aeabi_i2f>:
    4c24:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    4c28:	42600000 	rsbmi	r0, r0, #0
    4c2c:	e1b0c000 	movs	r12, r0
    4c30:	012fff1e 	bxeq	lr
    4c34:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    4c38:	e1a01000 	mov	r1, r0
    4c3c:	e3a00000 	mov	r0, #0
    4c40:	ea00000f 	b	4c84 <__aeabi_l2f+0x30>

00004c44 <__aeabi_ul2f>:
    4c44:	e1902001 	orrs	r2, r0, r1
    4c48:	012fff1e 	bxeq	lr
    4c4c:	e3a03000 	mov	r3, #0
    4c50:	ea000005 	b	4c6c <__aeabi_l2f+0x18>

00004c54 <__aeabi_l2f>:
    4c54:	e1902001 	orrs	r2, r0, r1
    4c58:	012fff1e 	bxeq	lr
    4c5c:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    4c60:	5a000001 	bpl	4c6c <__aeabi_l2f+0x18>
    4c64:	e2700000 	rsbs	r0, r0, #0
    4c68:	e2e11000 	rsc	r1, r1, #0
    4c6c:	e1b0c001 	movs	r12, r1
    4c70:	01a0c000 	moveq	r12, r0
    4c74:	01a01000 	moveq	r1, r0
    4c78:	03a00000 	moveq	r0, #0
    4c7c:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    4c80:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    4c84:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    4c88:	e3a02017 	mov	r2, #23
    4c8c:	e35c0801 	cmp	r12, #65536	; 0x10000
    4c90:	21a0c82c 	lsrcs	r12, r12, #16
    4c94:	22422010 	subcs	r2, r2, #16
    4c98:	e35c0c01 	cmp	r12, #256	; 0x100
    4c9c:	21a0c42c 	lsrcs	r12, r12, #8
    4ca0:	22422008 	subcs	r2, r2, #8
    4ca4:	e35c0010 	cmp	r12, #16
    4ca8:	21a0c22c 	lsrcs	r12, r12, #4
    4cac:	22422004 	subcs	r2, r2, #4
    4cb0:	e35c0004 	cmp	r12, #4
    4cb4:	22422002 	subcs	r2, r2, #2
    4cb8:	304220ac 	subcc	r2, r2, r12, lsr #1
    4cbc:	e05221ac 	subs	r2, r2, r12, lsr #3
    4cc0:	e0433b82 	sub	r3, r3, r2, lsl #23
    4cc4:	ba000006 	blt	4ce4 <__aeabi_l2f+0x90>
    4cc8:	e0833211 	add	r3, r3, r1, lsl r2
    4ccc:	e1a0c210 	lsl	r12, r0, r2
    4cd0:	e2622020 	rsb	r2, r2, #32
    4cd4:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    4cd8:	e0a30230 	adc	r0, r3, r0, lsr r2
    4cdc:	03c00001 	biceq	r0, r0, #1
    4ce0:	e12fff1e 	bx	lr
    4ce4:	e2822020 	add	r2, r2, #32
    4ce8:	e1a0c211 	lsl	r12, r1, r2
    4cec:	e2622020 	rsb	r2, r2, #32
    4cf0:	e190008c 	orrs	r0, r0, r12, lsl #1
    4cf4:	e0a30231 	adc	r0, r3, r1, lsr r2
    4cf8:	01c00fac 	biceq	r0, r0, r12, lsr #31
    4cfc:	e12fff1e 	bx	lr

00004d00 <__aeabi_fmul>:
    4d00:	e3a0c0ff 	mov	r12, #255	; 0xff
    4d04:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    4d08:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    4d0c:	1132000c 	teqne	r2, r12
    4d10:	1133000c 	teqne	r3, r12
    4d14:	0a00003e 	beq	4e14 <__aeabi_fmul+0x114>
    4d18:	e0822003 	add	r2, r2, r3
    4d1c:	e020c001 	eor	r12, r0, r1
    4d20:	e1b00480 	lsls	r0, r0, #9
    4d24:	11b01481 	lslsne	r1, r1, #9
    4d28:	0a000010 	beq	4d70 <__aeabi_fmul+0x70>
    4d2c:	e3a03302 	mov	r3, #134217728	; 0x8000000
    4d30:	e18302a0 	orr	r0, r3, r0, lsr #5
    4d34:	e18312a1 	orr	r1, r3, r1, lsr #5
    4d38:	e0813190 	umull	r3, r1, r0, r1
    4d3c:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    4d40:	e3510502 	cmp	r1, #8388608	; 0x800000
    4d44:	31a01081 	lslcc	r1, r1, #1
    4d48:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    4d4c:	31a03083 	lslcc	r3, r3, #1
    4d50:	e1800001 	orr	r0, r0, r1
    4d54:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    4d58:	e35200fd 	cmp	r2, #253	; 0xfd
    4d5c:	8a00000f 	bhi	4da0 <__aeabi_fmul+0xa0>
    4d60:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    4d64:	e0a00b82 	adc	r0, r0, r2, lsl #23
    4d68:	03c00001 	biceq	r0, r0, #1
    4d6c:	e12fff1e 	bx	lr
    4d70:	e3300000 	teq	r0, #0
    4d74:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    4d78:	01a01481 	lsleq	r1, r1, #9
    4d7c:	e18c04a0 	orr	r0, r12, r0, lsr #9
    4d80:	e18004a1 	orr	r0, r0, r1, lsr #9
    4d84:	e252207f 	subs	r2, r2, #127	; 0x7f
    4d88:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    4d8c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    4d90:	c12fff1e 	bxgt	lr
    4d94:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4d98:	e3a03000 	mov	r3, #0
    4d9c:	e2522001 	subs	r2, r2, #1
    4da0:	ca000035 	bgt	4e7c <__aeabi_fmul+0x17c>
    4da4:	e3720019 	cmn	r2, #25
    4da8:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    4dac:	d12fff1e 	bxle	lr
    4db0:	e2622000 	rsb	r2, r2, #0
    4db4:	e1b01080 	lsls	r1, r0, #1
    4db8:	e1a01231 	lsr	r1, r1, r2
    4dbc:	e2622020 	rsb	r2, r2, #32
    4dc0:	e1a0c210 	lsl	r12, r0, r2
    4dc4:	e1b00061 	rrxs	r0, r1
    4dc8:	e2a00000 	adc	r0, r0, #0
    4dcc:	e193308c 	orrs	r3, r3, r12, lsl #1
    4dd0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    4dd4:	e12fff1e 	bx	lr
    4dd8:	e3320000 	teq	r2, #0
    4ddc:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    4de0:	01a00080 	lsleq	r0, r0, #1
    4de4:	03100502 	tsteq	r0, #8388608	; 0x800000
    4de8:	02422001 	subeq	r2, r2, #1
    4dec:	0afffffb 	beq	4de0 <__aeabi_fmul+0xe0>
    4df0:	e180000c 	orr	r0, r0, r12
    4df4:	e3330000 	teq	r3, #0
    4df8:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    4dfc:	01a01081 	lsleq	r1, r1, #1
    4e00:	03110502 	tsteq	r1, #8388608	; 0x800000
    4e04:	02433001 	subeq	r3, r3, #1
    4e08:	0afffffb 	beq	4dfc <__aeabi_fmul+0xfc>
    4e0c:	e181100c 	orr	r1, r1, r12
    4e10:	eaffffc0 	b	4d18 <__aeabi_fmul+0x18>
    4e14:	e00c3ba1 	and	r3, r12, r1, lsr #23
    4e18:	e132000c 	teq	r2, r12
    4e1c:	1133000c 	teqne	r3, r12
    4e20:	0a000005 	beq	4e3c <__aeabi_fmul+0x13c>
    4e24:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    4e28:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    4e2c:	1affffe9 	bne	4dd8 <__aeabi_fmul+0xd8>
    4e30:	e0200001 	eor	r0, r0, r1
    4e34:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    4e38:	e12fff1e 	bx	lr
    4e3c:	e3300000 	teq	r0, #0
    4e40:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    4e44:	01a00001 	moveq	r0, r1
    4e48:	13310000 	teqne	r1, #0
    4e4c:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    4e50:	0a00000d 	beq	4e8c <__aeabi_fmul+0x18c>
    4e54:	e132000c 	teq	r2, r12
    4e58:	1a000001 	bne	4e64 <__aeabi_fmul+0x164>
    4e5c:	e1b02480 	lsls	r2, r0, #9
    4e60:	1a000009 	bne	4e8c <__aeabi_fmul+0x18c>
    4e64:	e133000c 	teq	r3, r12
    4e68:	1a000002 	bne	4e78 <__aeabi_fmul+0x178>
    4e6c:	e1b03481 	lsls	r3, r1, #9
    4e70:	11a00001 	movne	r0, r1
    4e74:	1a000004 	bne	4e8c <__aeabi_fmul+0x18c>
    4e78:	e0200001 	eor	r0, r0, r1
    4e7c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    4e80:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    4e84:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4e88:	e12fff1e 	bx	lr
    4e8c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    4e90:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    4e94:	e12fff1e 	bx	lr

00004e98 <__aeabi_fdiv>:
    4e98:	e3a0c0ff 	mov	r12, #255	; 0xff
    4e9c:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    4ea0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    4ea4:	1132000c 	teqne	r2, r12
    4ea8:	1133000c 	teqne	r3, r12
    4eac:	0a00003a 	beq	4f9c <__aeabi_fdiv+0x104>
    4eb0:	e0422003 	sub	r2, r2, r3
    4eb4:	e020c001 	eor	r12, r0, r1
    4eb8:	e1b01481 	lsls	r1, r1, #9
    4ebc:	e1a00480 	lsl	r0, r0, #9
    4ec0:	0a00001c 	beq	4f38 <__aeabi_fdiv+0xa0>
    4ec4:	e3a03201 	mov	r3, #268435456	; 0x10000000
    4ec8:	e1831221 	orr	r1, r3, r1, lsr #4
    4ecc:	e1833220 	orr	r3, r3, r0, lsr #4
    4ed0:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    4ed4:	e1530001 	cmp	r3, r1
    4ed8:	31a03083 	lslcc	r3, r3, #1
    4edc:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    4ee0:	e3a0c502 	mov	r12, #8388608	; 0x800000
    4ee4:	e1530001 	cmp	r3, r1
    4ee8:	20433001 	subcs	r3, r3, r1
    4eec:	2180000c 	orrcs	r0, r0, r12
    4ef0:	e15300a1 	cmp	r3, r1, lsr #1
    4ef4:	204330a1 	subcs	r3, r3, r1, lsr #1
    4ef8:	218000ac 	orrcs	r0, r0, r12, lsr #1
    4efc:	e1530121 	cmp	r3, r1, lsr #2
    4f00:	20433121 	subcs	r3, r3, r1, lsr #2
    4f04:	2180012c 	orrcs	r0, r0, r12, lsr #2
    4f08:	e15301a1 	cmp	r3, r1, lsr #3
    4f0c:	204331a1 	subcs	r3, r3, r1, lsr #3
    4f10:	218001ac 	orrcs	r0, r0, r12, lsr #3
    4f14:	e1b03203 	lsls	r3, r3, #4
    4f18:	11b0c22c 	lsrsne	r12, r12, #4
    4f1c:	1afffff0 	bne	4ee4 <__aeabi_fdiv+0x4c>
    4f20:	e35200fd 	cmp	r2, #253	; 0xfd
    4f24:	8affff9d 	bhi	4da0 <__aeabi_fmul+0xa0>
    4f28:	e1530001 	cmp	r3, r1
    4f2c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    4f30:	03c00001 	biceq	r0, r0, #1
    4f34:	e12fff1e 	bx	lr
    4f38:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    4f3c:	e18c04a0 	orr	r0, r12, r0, lsr #9
    4f40:	e292207f 	adds	r2, r2, #127	; 0x7f
    4f44:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    4f48:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    4f4c:	c12fff1e 	bxgt	lr
    4f50:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4f54:	e3a03000 	mov	r3, #0
    4f58:	e2522001 	subs	r2, r2, #1
    4f5c:	eaffff8f 	b	4da0 <__aeabi_fmul+0xa0>
    4f60:	e3320000 	teq	r2, #0
    4f64:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    4f68:	01a00080 	lsleq	r0, r0, #1
    4f6c:	03100502 	tsteq	r0, #8388608	; 0x800000
    4f70:	02422001 	subeq	r2, r2, #1
    4f74:	0afffffb 	beq	4f68 <__aeabi_fdiv+0xd0>
    4f78:	e180000c 	orr	r0, r0, r12
    4f7c:	e3330000 	teq	r3, #0
    4f80:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    4f84:	01a01081 	lsleq	r1, r1, #1
    4f88:	03110502 	tsteq	r1, #8388608	; 0x800000
    4f8c:	02433001 	subeq	r3, r3, #1
    4f90:	0afffffb 	beq	4f84 <__aeabi_fdiv+0xec>
    4f94:	e181100c 	orr	r1, r1, r12
    4f98:	eaffffc4 	b	4eb0 <__aeabi_fdiv+0x18>
    4f9c:	e00c3ba1 	and	r3, r12, r1, lsr #23
    4fa0:	e132000c 	teq	r2, r12
    4fa4:	1a000005 	bne	4fc0 <__aeabi_fdiv+0x128>
    4fa8:	e1b02480 	lsls	r2, r0, #9
    4fac:	1affffb6 	bne	4e8c <__aeabi_fmul+0x18c>
    4fb0:	e133000c 	teq	r3, r12
    4fb4:	1affffaf 	bne	4e78 <__aeabi_fmul+0x178>
    4fb8:	e1a00001 	mov	r0, r1
    4fbc:	eaffffb2 	b	4e8c <__aeabi_fmul+0x18c>
    4fc0:	e133000c 	teq	r3, r12
    4fc4:	1a000003 	bne	4fd8 <__aeabi_fdiv+0x140>
    4fc8:	e1b03481 	lsls	r3, r1, #9
    4fcc:	0affff97 	beq	4e30 <__aeabi_fmul+0x130>
    4fd0:	e1a00001 	mov	r0, r1
    4fd4:	eaffffac 	b	4e8c <__aeabi_fmul+0x18c>
    4fd8:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    4fdc:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    4fe0:	1affffde 	bne	4f60 <__aeabi_fdiv+0xc8>
    4fe4:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    4fe8:	1affffa2 	bne	4e78 <__aeabi_fmul+0x178>
    4fec:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    4ff0:	1affff8e 	bne	4e30 <__aeabi_fmul+0x130>
    4ff4:	eaffffa4 	b	4e8c <__aeabi_fmul+0x18c>

00004ff8 <__gesf2>:
    4ff8:	e3e0c000 	mvn	r12, #0
    4ffc:	ea000002 	b	500c <__cmpsf2+0x4>

00005000 <__lesf2>:
    5000:	e3a0c001 	mov	r12, #1
    5004:	ea000000 	b	500c <__cmpsf2+0x4>

00005008 <__cmpsf2>:
    5008:	e3a0c001 	mov	r12, #1
    500c:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    5010:	e1a02080 	lsl	r2, r0, #1
    5014:	e1a03081 	lsl	r3, r1, #1
    5018:	e1f0cc42 	mvns	r12, r2, asr #24
    501c:	11f0cc43 	mvnsne	r12, r3, asr #24
    5020:	0a000007 	beq	5044 <__cmpsf2+0x3c>
    5024:	e28dd004 	add	sp, sp, #4
    5028:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    502c:	11300001 	teqne	r0, r1
    5030:	50520003 	subspl	r0, r2, r3
    5034:	81a00fc1 	asrhi	r0, r1, #31
    5038:	31e00fc1 	mvncc	r0, r1, asr #31
    503c:	13800001 	orrne	r0, r0, #1
    5040:	e12fff1e 	bx	lr
    5044:	e1f0cc42 	mvns	r12, r2, asr #24
    5048:	1a000001 	bne	5054 <__cmpsf2+0x4c>
    504c:	e1b0c480 	lsls	r12, r0, #9
    5050:	1a000003 	bne	5064 <__cmpsf2+0x5c>
    5054:	e1f0cc43 	mvns	r12, r3, asr #24
    5058:	1afffff1 	bne	5024 <__cmpsf2+0x1c>
    505c:	e1b0c481 	lsls	r12, r1, #9
    5060:	0affffef 	beq	5024 <__cmpsf2+0x1c>
    5064:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    5068:	e12fff1e 	bx	lr

0000506c <__aeabi_cfrcmple>:
    506c:	e1a0c000 	mov	r12, r0
    5070:	e1a00001 	mov	r0, r1
    5074:	e1a0100c 	mov	r1, r12
    5078:	eaffffff 	b	507c <__aeabi_cfcmpeq>

0000507c <__aeabi_cfcmpeq>:
    507c:	e92d400f 	push	{r0, r1, r2, r3, lr}
    5080:	ebffffe0 	bl	5008 <__cmpsf2>
    5084:	e3500000 	cmp	r0, #0
    5088:	43700000 	cmnmi	r0, #0
    508c:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    5090:	e12fff1e 	bx	lr

00005094 <__aeabi_fcmpeq>:
    5094:	e52de008 	str	lr, [sp, #-8]!
    5098:	ebfffff7 	bl	507c <__aeabi_cfcmpeq>
    509c:	03a00001 	moveq	r0, #1
    50a0:	13a00000 	movne	r0, #0
    50a4:	e49de008 	ldr	lr, [sp], #8
    50a8:	e12fff1e 	bx	lr

000050ac <__aeabi_fcmplt>:
    50ac:	e52de008 	str	lr, [sp, #-8]!
    50b0:	ebfffff1 	bl	507c <__aeabi_cfcmpeq>
    50b4:	33a00001 	movcc	r0, #1
    50b8:	23a00000 	movcs	r0, #0
    50bc:	e49de008 	ldr	lr, [sp], #8
    50c0:	e12fff1e 	bx	lr

000050c4 <__aeabi_fcmple>:
    50c4:	e52de008 	str	lr, [sp, #-8]!
    50c8:	ebffffeb 	bl	507c <__aeabi_cfcmpeq>
    50cc:	93a00001 	movls	r0, #1
    50d0:	83a00000 	movhi	r0, #0
    50d4:	e49de008 	ldr	lr, [sp], #8
    50d8:	e12fff1e 	bx	lr

000050dc <__aeabi_fcmpge>:
    50dc:	e52de008 	str	lr, [sp, #-8]!
    50e0:	ebffffe1 	bl	506c <__aeabi_cfrcmple>
    50e4:	93a00001 	movls	r0, #1
    50e8:	83a00000 	movhi	r0, #0
    50ec:	e49de008 	ldr	lr, [sp], #8
    50f0:	e12fff1e 	bx	lr

000050f4 <__aeabi_fcmpgt>:
    50f4:	e52de008 	str	lr, [sp, #-8]!
    50f8:	ebffffdb 	bl	506c <__aeabi_cfrcmple>
    50fc:	33a00001 	movcc	r0, #1
    5100:	23a00000 	movcs	r0, #0
    5104:	e49de008 	ldr	lr, [sp], #8
    5108:	e12fff1e 	bx	lr

0000510c <__aeabi_f2iz>:
    510c:	e1a02080 	lsl	r2, r0, #1
    5110:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    5114:	3a000008 	bcc	513c <__aeabi_f2iz+0x30>
    5118:	e3a0309e 	mov	r3, #158	; 0x9e
    511c:	e0532c22 	subs	r2, r3, r2, lsr #24
    5120:	9a000007 	bls	5144 <__aeabi_f2iz+0x38>
    5124:	e1a03400 	lsl	r3, r0, #8
    5128:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    512c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    5130:	e1a00233 	lsr	r0, r3, r2
    5134:	12600000 	rsbne	r0, r0, #0
    5138:	e12fff1e 	bx	lr
    513c:	e3a00000 	mov	r0, #0
    5140:	e12fff1e 	bx	lr
    5144:	e3720061 	cmn	r2, #97	; 0x61
    5148:	1a000001 	bne	5154 <__aeabi_f2iz+0x48>
    514c:	e1b02480 	lsls	r2, r0, #9
    5150:	1a000002 	bne	5160 <__aeabi_f2iz+0x54>
    5154:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    5158:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    515c:	e12fff1e 	bx	lr
    5160:	e3a00000 	mov	r0, #0
    5164:	e12fff1e 	bx	lr

00005168 <atexit>:
    5168:	e1a01000 	mov	r1, r0
    516c:	e3a00000 	mov	r0, #0
    5170:	e92d4008 	push	{r3, lr}
    5174:	e1a02000 	mov	r2, r0
    5178:	e1a03000 	mov	r3, r0
    517c:	eb000091 	bl	53c8 <__register_exitproc>
    5180:	e8bd4008 	pop	{r3, lr}
    5184:	e12fff1e 	bx	lr

00005188 <exit>:
    5188:	e92d4008 	push	{r3, lr}
    518c:	e3a01000 	mov	r1, #0
    5190:	e1a04000 	mov	r4, r0
    5194:	eb0000c8 	bl	54bc <__call_exitprocs>
    5198:	e59f3018 	ldr	r3, [pc, #24]	; 51b8 <exit+0x30>
    519c:	e5930000 	ldr	r0, [r3]
    51a0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    51a4:	e3530000 	cmp	r3, #0
    51a8:	11a0e00f 	movne	lr, pc
    51ac:	112fff13 	bxne	r3
    51b0:	e1a00004 	mov	r0, r4
    51b4:	eb00014c 	bl	56ec <_exit>
    51b8:	00007d88 	.word	0x00007d88

000051bc <memset>:
    51bc:	e3520003 	cmp	r2, #3
    51c0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    51c4:	e20110ff 	and	r1, r1, #255	; 0xff
    51c8:	8a000008 	bhi	51f0 <memset+0x34>
    51cc:	e3520000 	cmp	r2, #0
    51d0:	0a000004 	beq	51e8 <memset+0x2c>
    51d4:	e1a03000 	mov	r3, r0
    51d8:	e0822000 	add	r2, r2, r0
    51dc:	e4c31001 	strb	r1, [r3], #1
    51e0:	e1530002 	cmp	r3, r2
    51e4:	1afffffc 	bne	51dc <memset+0x20>
    51e8:	e8bd0010 	ldmfd	sp!, {r4}
    51ec:	e12fff1e 	bx	lr
    51f0:	e3100003 	tst	r0, #3
    51f4:	e0802002 	add	r2, r0, r2
    51f8:	0a000007 	beq	521c <memset+0x60>
    51fc:	e280c001 	add	r12, r0, #1
    5200:	e20c3003 	and	r3, r12, #3
    5204:	e3530000 	cmp	r3, #0
    5208:	e54c1001 	strb	r1, [r12, #-1]
    520c:	e1a0300c 	mov	r3, r12
    5210:	e28cc001 	add	r12, r12, #1
    5214:	1afffff9 	bne	5200 <memset+0x44>
    5218:	ea000000 	b	5220 <memset+0x64>
    521c:	e1a03000 	mov	r3, r0
    5220:	e0634002 	rsb	r4, r3, r2
    5224:	e081c401 	add	r12, r1, r1, lsl #8
    5228:	e354003f 	cmp	r4, #63	; 0x3f
    522c:	e08cc80c 	add	r12, r12, r12, lsl #16
    5230:	da00001a 	ble	52a0 <memset+0xe4>
    5234:	e583c000 	str	r12, [r3]
    5238:	e583c004 	str	r12, [r3, #4]
    523c:	e583c008 	str	r12, [r3, #8]
    5240:	e583c00c 	str	r12, [r3, #12]
    5244:	e583c010 	str	r12, [r3, #16]
    5248:	e583c014 	str	r12, [r3, #20]
    524c:	e583c018 	str	r12, [r3, #24]
    5250:	e583c01c 	str	r12, [r3, #28]
    5254:	e583c020 	str	r12, [r3, #32]
    5258:	e583c024 	str	r12, [r3, #36]	; 0x24
    525c:	e583c028 	str	r12, [r3, #40]	; 0x28
    5260:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    5264:	e583c030 	str	r12, [r3, #48]	; 0x30
    5268:	e583c034 	str	r12, [r3, #52]	; 0x34
    526c:	e583c038 	str	r12, [r3, #56]	; 0x38
    5270:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    5274:	e2833040 	add	r3, r3, #64	; 0x40
    5278:	e0634002 	rsb	r4, r3, r2
    527c:	e354003f 	cmp	r4, #63	; 0x3f
    5280:	caffffeb 	bgt	5234 <memset+0x78>
    5284:	ea000005 	b	52a0 <memset+0xe4>
    5288:	e583c000 	str	r12, [r3]
    528c:	e583c004 	str	r12, [r3, #4]
    5290:	e583c008 	str	r12, [r3, #8]
    5294:	e583c00c 	str	r12, [r3, #12]
    5298:	e2833010 	add	r3, r3, #16
    529c:	e0634002 	rsb	r4, r3, r2
    52a0:	e354000f 	cmp	r4, #15
    52a4:	cafffff7 	bgt	5288 <memset+0xcc>
    52a8:	e3540003 	cmp	r4, #3
    52ac:	da000006 	ble	52cc <memset+0x110>
    52b0:	e2834004 	add	r4, r3, #4
    52b4:	e0643002 	rsb	r3, r4, r2
    52b8:	e3530003 	cmp	r3, #3
    52bc:	e504c004 	str	r12, [r4, #-4]
    52c0:	e1a03004 	mov	r3, r4
    52c4:	e2844004 	add	r4, r4, #4
    52c8:	cafffff9 	bgt	52b4 <memset+0xf8>
    52cc:	e1520003 	cmp	r2, r3
    52d0:	9affffc4 	bls	51e8 <memset+0x2c>
    52d4:	e2833001 	add	r3, r3, #1
    52d8:	e2822001 	add	r2, r2, #1
    52dc:	e5431001 	strb	r1, [r3, #-1]
    52e0:	e2833001 	add	r3, r3, #1
    52e4:	e1530002 	cmp	r3, r2
    52e8:	1afffffb 	bne	52dc <memset+0x120>
    52ec:	eaffffbd 	b	51e8 <memset+0x2c>

000052f0 <srand>:
    52f0:	e59f3010 	ldr	r3, [pc, #16]	; 5308 <srand+0x18>
    52f4:	e5933000 	ldr	r3, [r3]
    52f8:	e3a02000 	mov	r2, #0
    52fc:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    5300:	e58320ac 	str	r2, [r3, #172]	; 0xac
    5304:	e12fff1e 	bx	lr
    5308:	00007e48 	.word	0x00007e48

0000530c <rand>:
    530c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5310:	e59f3044 	ldr	r3, [pc, #68]	; 535c <rand+0x50>
    5314:	e593c000 	ldr	r12, [r3]
    5318:	e59f4040 	ldr	r4, [pc, #64]	; 5360 <rand+0x54>
    531c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    5320:	e0040492 	mul	r4, r2, r4
    5324:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    5328:	e59f3034 	ldr	r3, [pc, #52]	; 5364 <rand+0x58>
    532c:	e0244193 	mla	r4, r3, r1, r4
    5330:	e0810392 	umull	r0, r1, r2, r3
    5334:	e3a02001 	mov	r2, #1
    5338:	e0922000 	adds	r2, r2, r0
    533c:	e0841001 	add	r1, r4, r1
    5340:	e3a03000 	mov	r3, #0
    5344:	e0a33001 	adc	r3, r3, r1
    5348:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    534c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    5350:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    5354:	e8bd0010 	ldmfd	sp!, {r4}
    5358:	e12fff1e 	bx	lr
    535c:	00007e48 	.word	0x00007e48
    5360:	5851f42d 	.word	0x5851f42d
    5364:	4c957f2d 	.word	0x4c957f2d

00005368 <strlen>:
    5368:	e3c01003 	bic	r1, r0, #3
    536c:	e2100003 	ands	r0, r0, #3
    5370:	e2600000 	rsb	r0, r0, #0
    5374:	e4913004 	ldr	r3, [r1], #4
    5378:	e280c004 	add	r12, r0, #4
    537c:	e1a0c18c 	lsl	r12, r12, #3
    5380:	e3e02000 	mvn	r2, #0
    5384:	11833c32 	orrne	r3, r3, r2, lsr r12
    5388:	e3a0c001 	mov	r12, #1
    538c:	e18cc40c 	orr	r12, r12, r12, lsl #8
    5390:	e18cc80c 	orr	r12, r12, r12, lsl #16
    5394:	e043200c 	sub	r2, r3, r12
    5398:	e1c22003 	bic	r2, r2, r3
    539c:	e012238c 	ands	r2, r2, r12, lsl #7
    53a0:	04913004 	ldreq	r3, [r1], #4
    53a4:	02800004 	addeq	r0, r0, #4
    53a8:	0afffff9 	beq	5394 <strlen+0x2c>
    53ac:	e31300ff 	tst	r3, #255	; 0xff
    53b0:	12800001 	addne	r0, r0, #1
    53b4:	13130cff 	tstne	r3, #65280	; 0xff00
    53b8:	12800001 	addne	r0, r0, #1
    53bc:	131308ff 	tstne	r3, #16711680	; 0xff0000
    53c0:	12800001 	addne	r0, r0, #1
    53c4:	e12fff1e 	bx	lr

000053c8 <__register_exitproc>:
    53c8:	e59fc0e4 	ldr	r12, [pc, #228]	; 54b4 <__register_exitproc+0xec>
    53cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    53d0:	e59c4000 	ldr	r4, [r12]
    53d4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    53d8:	e35c0000 	cmp	r12, #0
    53dc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    53e0:	e59c5004 	ldr	r5, [r12, #4]
    53e4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    53e8:	e355001f 	cmp	r5, #31
    53ec:	e24dd010 	sub	sp, sp, #16
    53f0:	e1a06000 	mov	r6, r0
    53f4:	da000015 	ble	5450 <__register_exitproc+0x88>
    53f8:	e59f00b8 	ldr	r0, [pc, #184]	; 54b8 <__register_exitproc+0xf0>
    53fc:	e3500000 	cmp	r0, #0
    5400:	1a000001 	bne	540c <__register_exitproc+0x44>
    5404:	e3e00000 	mvn	r0, #0
    5408:	ea000018 	b	5470 <__register_exitproc+0xa8>
    540c:	e3a00e19 	mov	r0, #400	; 0x190
    5410:	e58d100c 	str	r1, [sp, #12]
    5414:	e58d2008 	str	r2, [sp, #8]
    5418:	e58d3004 	str	r3, [sp, #4]
    541c:	e320f000 	nop	{0}
    5420:	e250c000 	subs	r12, r0, #0
    5424:	e59d100c 	ldr	r1, [sp, #12]
    5428:	e59d2008 	ldr	r2, [sp, #8]
    542c:	e59d3004 	ldr	r3, [sp, #4]
    5430:	0afffff3 	beq	5404 <__register_exitproc+0x3c>
    5434:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    5438:	e3a00000 	mov	r0, #0
    543c:	e58c0004 	str	r0, [r12, #4]
    5440:	e58c5000 	str	r5, [r12]
    5444:	e584c148 	str	r12, [r4, #328]	; 0x148
    5448:	e58c0188 	str	r0, [r12, #392]	; 0x188
    544c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    5450:	e3560000 	cmp	r6, #0
    5454:	e59c4004 	ldr	r4, [r12, #4]
    5458:	1a000007 	bne	547c <__register_exitproc+0xb4>
    545c:	e2843002 	add	r3, r4, #2
    5460:	e2844001 	add	r4, r4, #1
    5464:	e78c1103 	str	r1, [r12, r3, lsl #2]
    5468:	e58c4004 	str	r4, [r12, #4]
    546c:	e3a00000 	mov	r0, #0
    5470:	e28dd010 	add	sp, sp, #16
    5474:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    5478:	e12fff1e 	bx	lr
    547c:	e3a00001 	mov	r0, #1
    5480:	e1a00410 	lsl	r0, r0, r4
    5484:	e08c8104 	add	r8, r12, r4, lsl #2
    5488:	e3560002 	cmp	r6, #2
    548c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    5490:	e5883108 	str	r3, [r8, #264]	; 0x108
    5494:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    5498:	e1877000 	orr	r7, r7, r0
    549c:	01830000 	orreq	r0, r3, r0
    54a0:	e1a05008 	mov	r5, r8
    54a4:	e5882088 	str	r2, [r8, #136]	; 0x88
    54a8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    54ac:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    54b0:	eaffffe9 	b	545c <__register_exitproc+0x94>
    54b4:	00007d88 	.word	0x00007d88
    54b8:	00000000 	.word	0x00000000

000054bc <__call_exitprocs>:
    54bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    54c0:	e59f3168 	ldr	r3, [pc, #360]	; 5630 <__call_exitprocs+0x174>
    54c4:	e5933000 	ldr	r3, [r3]
    54c8:	e24dd014 	sub	sp, sp, #20
    54cc:	e58d3004 	str	r3, [sp, #4]
    54d0:	e2833f52 	add	r3, r3, #328	; 0x148
    54d4:	e58d0008 	str	r0, [sp, #8]
    54d8:	e58d300c 	str	r3, [sp, #12]
    54dc:	e1a07001 	mov	r7, r1
    54e0:	e3a08001 	mov	r8, #1
    54e4:	e59d3004 	ldr	r3, [sp, #4]
    54e8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    54ec:	e3560000 	cmp	r6, #0
    54f0:	e59db00c 	ldr	r11, [sp, #12]
    54f4:	0a000033 	beq	55c8 <__call_exitprocs+0x10c>
    54f8:	e5965004 	ldr	r5, [r6, #4]
    54fc:	e2554001 	subs	r4, r5, #1
    5500:	5286a088 	addpl	r10, r6, #136	; 0x88
    5504:	5285501f 	addpl	r5, r5, #31
    5508:	508a5105 	addpl	r5, r10, r5, lsl #2
    550c:	5a000007 	bpl	5530 <__call_exitprocs+0x74>
    5510:	ea000029 	b	55bc <__call_exitprocs+0x100>
    5514:	e5953000 	ldr	r3, [r5]
    5518:	e1530007 	cmp	r3, r7
    551c:	0a000005 	beq	5538 <__call_exitprocs+0x7c>
    5520:	e2444001 	sub	r4, r4, #1
    5524:	e3740001 	cmn	r4, #1
    5528:	e2455004 	sub	r5, r5, #4
    552c:	0a000022 	beq	55bc <__call_exitprocs+0x100>
    5530:	e3570000 	cmp	r7, #0
    5534:	1afffff6 	bne	5514 <__call_exitprocs+0x58>
    5538:	e5963004 	ldr	r3, [r6, #4]
    553c:	e06a2005 	rsb	r2, r10, r5
    5540:	e2433001 	sub	r3, r3, #1
    5544:	e0862002 	add	r2, r6, r2
    5548:	e1530004 	cmp	r3, r4
    554c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    5550:	13a01000 	movne	r1, #0
    5554:	05864004 	streq	r4, [r6, #4]
    5558:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    555c:	e3530000 	cmp	r3, #0
    5560:	0affffee 	beq	5520 <__call_exitprocs+0x64>
    5564:	e1a02418 	lsl	r2, r8, r4
    5568:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    556c:	e1120001 	tst	r2, r1
    5570:	e5969004 	ldr	r9, [r6, #4]
    5574:	0a000016 	beq	55d4 <__call_exitprocs+0x118>
    5578:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    557c:	e1120001 	tst	r2, r1
    5580:	1a000016 	bne	55e0 <__call_exitprocs+0x124>
    5584:	e59d0008 	ldr	r0, [sp, #8]
    5588:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    558c:	e1a0e00f 	mov	lr, pc
    5590:	e12fff13 	bx	r3
    5594:	e5963004 	ldr	r3, [r6, #4]
    5598:	e1530009 	cmp	r3, r9
    559c:	1affffd0 	bne	54e4 <__call_exitprocs+0x28>
    55a0:	e59b3000 	ldr	r3, [r11]
    55a4:	e1530006 	cmp	r3, r6
    55a8:	1affffcd 	bne	54e4 <__call_exitprocs+0x28>
    55ac:	e2444001 	sub	r4, r4, #1
    55b0:	e3740001 	cmn	r4, #1
    55b4:	e2455004 	sub	r5, r5, #4
    55b8:	1affffdc 	bne	5530 <__call_exitprocs+0x74>
    55bc:	e59f1070 	ldr	r1, [pc, #112]	; 5634 <__call_exitprocs+0x178>
    55c0:	e3510000 	cmp	r1, #0
    55c4:	1a000009 	bne	55f0 <__call_exitprocs+0x134>
    55c8:	e28dd014 	add	sp, sp, #20
    55cc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    55d0:	e12fff1e 	bx	lr
    55d4:	e1a0e00f 	mov	lr, pc
    55d8:	e12fff13 	bx	r3
    55dc:	eaffffec 	b	5594 <__call_exitprocs+0xd8>
    55e0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    55e4:	e1a0e00f 	mov	lr, pc
    55e8:	e12fff13 	bx	r3
    55ec:	eaffffe8 	b	5594 <__call_exitprocs+0xd8>
    55f0:	e5963004 	ldr	r3, [r6, #4]
    55f4:	e3530000 	cmp	r3, #0
    55f8:	e5963000 	ldr	r3, [r6]
    55fc:	1a000008 	bne	5624 <__call_exitprocs+0x168>
    5600:	e3530000 	cmp	r3, #0
    5604:	0a000006 	beq	5624 <__call_exitprocs+0x168>
    5608:	e1a00006 	mov	r0, r6
    560c:	e58b3000 	str	r3, [r11]
    5610:	e320f000 	nop	{0}
    5614:	e59b6000 	ldr	r6, [r11]
    5618:	e3560000 	cmp	r6, #0
    561c:	1affffb5 	bne	54f8 <__call_exitprocs+0x3c>
    5620:	eaffffe8 	b	55c8 <__call_exitprocs+0x10c>
    5624:	e1a0b006 	mov	r11, r6
    5628:	e1a06003 	mov	r6, r3
    562c:	eafffff9 	b	5618 <__call_exitprocs+0x15c>
    5630:	00007d88 	.word	0x00007d88
    5634:	00000000 	.word	0x00000000

00005638 <register_fini>:
    5638:	e92d4008 	push	{r3, lr}
    563c:	e59f3010 	ldr	r3, [pc, #16]	; 5654 <register_fini+0x1c>
    5640:	e3530000 	cmp	r3, #0
    5644:	159f000c 	ldrne	r0, [pc, #12]	; 5658 <register_fini+0x20>
    5648:	1bfffec6 	blne	5168 <atexit>
    564c:	e8bd4008 	pop	{r3, lr}
    5650:	e12fff1e 	bx	lr
    5654:	00007db0 	.word	0x00007db0
    5658:	0000565c 	.word	0x0000565c

0000565c <__libc_fini_array>:
    565c:	e92d4038 	push	{r3, r4, r5, lr}
    5660:	e59f5030 	ldr	r5, [pc, #48]	; 5698 <__libc_fini_array+0x3c>
    5664:	e59f4030 	ldr	r4, [pc, #48]	; 569c <__libc_fini_array+0x40>
    5668:	e0654004 	rsb	r4, r5, r4
    566c:	e1b04144 	asrs	r4, r4, #2
    5670:	10855104 	addne	r5, r5, r4, lsl #2
    5674:	0a000004 	beq	568c <__libc_fini_array+0x30>
    5678:	e5353004 	ldr	r3, [r5, #-4]!
    567c:	e1a0e00f 	mov	lr, pc
    5680:	e12fff13 	bx	r3
    5684:	e2544001 	subs	r4, r4, #1
    5688:	1afffffa 	bne	5678 <__libc_fini_array+0x1c>
    568c:	eb0009c7 	bl	7db0 <__libc_fini>
    5690:	e8bd4038 	pop	{r3, r4, r5, lr}
    5694:	e12fff1e 	bx	lr
    5698:	00007dc8 	.word	0x00007dc8
    569c:	00007dcc 	.word	0x00007dcc

000056a0 <__cs3_premain>:
    56a0:	e92d4008 	push	{r3, lr}
    56a4:	eb00001d 	bl	5720 <__libc_init_array>
    56a8:	e59f3030 	ldr	r3, [pc, #48]	; 56e0 <__cs3_premain+0x40>
    56ac:	e3530000 	cmp	r3, #0
    56b0:	15930000 	ldrne	r0, [r3]
    56b4:	01a00003 	moveq	r0, r3
    56b8:	e59f3024 	ldr	r3, [pc, #36]	; 56e4 <__cs3_premain+0x44>
    56bc:	e3530000 	cmp	r3, #0
    56c0:	15931000 	ldrne	r1, [r3]
    56c4:	01a01003 	moveq	r1, r3
    56c8:	e3a02000 	mov	r2, #0
    56cc:	ebffeae2 	bl	25c <main>
    56d0:	e59f3010 	ldr	r3, [pc, #16]	; 56e8 <__cs3_premain+0x48>
    56d4:	e3530000 	cmp	r3, #0
    56d8:	1bfffeaa 	blne	5188 <exit>
    56dc:	eafffffe 	b	56dc <__cs3_premain+0x3c>
	...
    56e8:	00005188 	.word	0x00005188

000056ec <_exit>:
    56ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    56f0:	e3a00018 	mov	r0, #24
    56f4:	e59f1004 	ldr	r1, [pc, #4]	; 5700 <_exit+0x14>
    56f8:	ef123456 	svc	0x00123456
    56fc:	eafffffe 	b	56fc <_exit+0x10>
    5700:	00020026 	.word	0x00020026

00005704 <__cs3_isr_interrupt>:
    5704:	eafffffe 	b	5704 <__cs3_isr_interrupt>

00005708 <__cs3_isr_undef>:
    5708:	eafffffe 	b	5708 <__cs3_isr_undef>

0000570c <__cs3_isr_swi>:
    570c:	eafffffe 	b	570c <__cs3_isr_swi>

00005710 <__cs3_isr_pabort>:
    5710:	eafffffe 	b	5710 <__cs3_isr_pabort>

00005714 <__cs3_isr_dabort>:
    5714:	eafffffe 	b	5714 <__cs3_isr_dabort>

00005718 <__cs3_isr_irq>:
    5718:	eafffffe 	b	5718 <__cs3_isr_irq>

0000571c <__cs3_isr_fiq>:
    571c:	eafffffe 	b	571c <__cs3_isr_fiq>

00005720 <__libc_init_array>:
    5720:	e92d4070 	push	{r4, r5, r6, lr}
    5724:	e59f506c 	ldr	r5, [pc, #108]	; 5798 <__libc_init_array+0x78>
    5728:	e59f606c 	ldr	r6, [pc, #108]	; 579c <__libc_init_array+0x7c>
    572c:	e0656006 	rsb	r6, r5, r6
    5730:	e1b06146 	asrs	r6, r6, #2
    5734:	12455004 	subne	r5, r5, #4
    5738:	13a04000 	movne	r4, #0
    573c:	0a000005 	beq	5758 <__libc_init_array+0x38>
    5740:	e5b53004 	ldr	r3, [r5, #4]!
    5744:	e2844001 	add	r4, r4, #1
    5748:	e1a0e00f 	mov	lr, pc
    574c:	e12fff13 	bx	r3
    5750:	e1560004 	cmp	r6, r4
    5754:	1afffff9 	bne	5740 <__libc_init_array+0x20>
    5758:	e59f5040 	ldr	r5, [pc, #64]	; 57a0 <__libc_init_array+0x80>
    575c:	e59f6040 	ldr	r6, [pc, #64]	; 57a4 <__libc_init_array+0x84>
    5760:	e0656006 	rsb	r6, r5, r6
    5764:	eb000989 	bl	7d90 <_init>
    5768:	e1b06146 	asrs	r6, r6, #2
    576c:	12455004 	subne	r5, r5, #4
    5770:	13a04000 	movne	r4, #0
    5774:	0a000005 	beq	5790 <__libc_init_array+0x70>
    5778:	e5b53004 	ldr	r3, [r5, #4]!
    577c:	e2844001 	add	r4, r4, #1
    5780:	e1a0e00f 	mov	lr, pc
    5784:	e12fff13 	bx	r3
    5788:	e1560004 	cmp	r6, r4
    578c:	1afffff9 	bne	5778 <__libc_init_array+0x58>
    5790:	e8bd4070 	pop	{r4, r5, r6, lr}
    5794:	e12fff1e 	bx	lr
    5798:	00007da8 	.word	0x00007da8
    579c:	00007da8 	.word	0x00007da8
    57a0:	00007da8 	.word	0x00007da8
    57a4:	00007db0 	.word	0x00007db0

Disassembly of section .rodata:

000057b0 <intToChar>:
    57b0:	33323130 37363534 00003938 41544a0a     0123456789...JTA
    57c0:	41552047 74205452 0a747365 0000203e     G UART test.> ..
    57d0:	6572500a 61207373 6b20796e 74207965     .Press any key t
    57e0:	6f63206f 6e69746e 3e0a6575 00000020     o continue.> ...

000057f0 <colorScale.4664>:
    57f0:	00000037                                7...

000057f4 <colorOffset.4665>:
    57f4:	000000c8                                ....

000057f8 <COSs>:
    57f8:	00000000 3ff00000 91d14e3c 3feffe5c     .......?<N..\..?
    5808:	b573eab3 3feffb15 fcb923a3 3feff487     ..s....?.#.....?
    5818:	d5cfaace 3fefec56 d288ce70 3fefe0de     ....V..?p......?
    5828:	a9fbe76d 3fefd2f1 5c28f5c3 3fefc28f     m......?..(\...?
    5838:	a0275254 3fefb089 07c84b5e 3fef9b3d     TR'....?^K..=..?
    5848:	4a2339c1 3fef837b 67381d7e 3fef6944     .9#J{..?~.8gDi.?
    5858:	5f06f694 3fef4c98 e8a71de7 3fef2e48     ..._.L.?....H..?
    5868:	95e9e1b1 3fef0cb2 1de69ad4 3feee8a7     .......?.......?
    5878:	37b4a234 3feec2f8 7525460b 3fee9a02     4..7...?.F%u...?
    5888:	4467381d 3fee6f69 374bc6a8 3fee4189     .8gDio.?..K7.A.?
    5898:	bc01a36e 3fee1205 1b71758e 3fede00d     n......?.uq....?
    58a8:	559b3d08 3fedab9f 6a7ef9db 3fed74bc     .=.U...?..~j.t.?
    58b8:	5a1cac08 3fed3b64 db8bac71 3fed0068     ...Zd;.?q...h..?
    58c8:	37b4a234 3fecc2f8 6e978d50 3fec8312     4..7...?P..n...?
    58d8:	80346dc6 3fec40b7 23a29c78 3febfcb9     .m4..@.?x..#...?
    58e8:	a1cac083 3febb645 b1c432ca 3feb6e2e     ....E..?.2...n.?
    58f8:	e5604189 3feb22d0 61e4f766 3fead6a1     .A`..".?f..a...?
    5908:	020c49ba 3fea872b eb1c432d 3fea36e2     .I..+..?-C...6.?
    5918:	f7ced917 3fe9e353 9652bd3c 3fe98e21     ....S..?<.R.!..?
    5928:	c6a7ef9e 3fe9374b d1b71759 3fe8de00     ....K7.?Y......?
    5938:	6e978d50 3fe88312 9d495183 3fe82680     P..n...?.QI..&.?
    5948:	a6b50b0f 3fe7c779 f9096bba 3fe767a0     ....y..?.k...g.?
    5958:	6f0068dc 3fe70481 2de00d1b 3fe6a090     .h.o...?...-...?
    5968:	7e90ff97 3fe63afb a9fbe76d 3fe5d2f1     ...~.:.?m......?
    5978:	67381d7e 3fe56944 6d5cfaad 3fe4fec5     ~.8gDi.?..\m...?
    5988:	4e3bcd36 3fe491d1 c0ebedfa 3fe42339     6.;N...?....9#.?
    5998:	7c84b5dd 3fe3b3d0 12d77319 3fe341f2     ...|...?.s...A.?
    59a8:	f212d773 3fe2cf41 631f8a09 3fe25aee     s...A..?...c.Z.?
    59b8:	65fd8adb 3fe1e4f7 faacd9e8 3fe16d5c     ...e...?....\m.?
    59c8:	d844d014 3fe0f4f0 47ae147b 3fe07ae1     ..D....?{..G.z.?
    59d8:	00000000 3fe00000 94467382 3fdf06f6     .......?.sF....?
    59e8:	ba5e353f 3fde0c49 04189375 3fdd0e56     ?5^.I..?u...V..?
    59f8:	dfa43fe6 3fdc0ebe ded288ce 3fdb0be0     .?.....?.......?
    5a08:	6fd21ff3 3fda075f 92a30553 3fd9013a     ...o_..?S...:..?
    5a18:	474538ef 3fd7f972 8db8bac7 3fd6f006     .8EGr..?.......?
    5a28:	f7ced917 3fd5e353 61e4f766 3fd4d6a1     ....S..?f..a...?
    5a38:	ef9db22d 3fd3c6a7 7d566cf4 3fd2b6ae     -......?.lV}...?
    5a48:	2eb1c433 3fd1a36e e00d1b71 3fd0902d     3...n..?q...-..?
    5a58:	467381d8 3fcef694 cccccccd 3fcccccc     ..sF...?.......?
    5a68:	9a6b50b1 3fca9c77 6809d495 3fc86c22     .Pk.w..?...h"l.?
    5a78:	594af4f1 3fc63886 4a8c154d 3fc404ea     ..JY.8.?M..J...?
    5a88:	3bcd35a8 3fc1d14e a161e4f7 3fbf34d6     .5.;N..?..a..4.?
    5a98:	126e978d 3fbac083 3c361134 3fb652bd     ..n....?4.6<.R.?
    5aa8:	ad42c3ca 3fb1de69 cb295e9e 3faac710     ..B.i..?.^)....?
    5ab8:	ad42c3ca 3fa1de69 1eb851ec 3f91eb85     ..B.i..?.Q.....?
	...
    5ad0:	1eb851ec bf91eb85 ad42c3ca bfa1de69     .Q........B.i...
    5ae0:	cb295e9e bfaac710 ad42c3ca bfb1de69     .^).......B.i...
    5af0:	3c361134 bfb652bd 126e978d bfbac083     4.6<.R....n.....
    5b00:	a161e4f7 bfbf34d6 3bcd35a8 bfc1d14e     ..a..4...5.;N...
    5b10:	4a8c154d bfc404ea 594af4f1 bfc63886     M..J......JY.8..
    5b20:	6809d495 bfc86c22 9a6b50b1 bfca9c77     ...h"l...Pk.w...
    5b30:	cccccccd bfcccccc 467381d8 bfcef694     ..........sF....
    5b40:	e00d1b71 bfd0902d 2eb1c433 bfd1a36e     q...-...3...n...
    5b50:	7d566cf4 bfd2b6ae ef9db22d bfd3c6a7     .lV}....-.......
    5b60:	61e4f766 bfd4d6a1 f7ced917 bfd5e353     f..a........S...
    5b70:	8db8bac7 bfd6f006 474538ef bfd7f972     .........8EGr...
    5b80:	92a30553 bfd9013a 6fd21ff3 bfda075f     S...:......o_...
    5b90:	ded288ce bfdb0be0 dfa43fe6 bfdc0ebe     .........?......
    5ba0:	04189375 bfdd0e56 ba5e353f bfde0c49     u...V...?5^.I...
    5bb0:	94467382 bfdf06f6 00000000 bfe00000     .sF.............
    5bc0:	47ae147b bfe07ae1 d844d014 bfe0f4f0     {..G.z....D.....
    5bd0:	faacd9e8 bfe16d5c 65fd8adb bfe1e4f7     ....\m.....e....
    5be0:	631f8a09 bfe25aee f212d773 bfe2cf41     ...c.Z..s...A...
    5bf0:	12d77319 bfe341f2 7c84b5dd bfe3b3d0     .s...A.....|....
    5c00:	c0ebedfa bfe42339 4e3bcd36 bfe491d1     ....9#..6.;N....
    5c10:	6d5cfaad bfe4fec5 67381d7e bfe56944     ..\m....~.8gDi..
    5c20:	a9fbe76d bfe5d2f1 7e90ff97 bfe63afb     m..........~.:..
    5c30:	2de00d1b bfe6a090 6f0068dc bfe70481     ...-.....h.o....
    5c40:	f9096bba bfe767a0 a6b50b0f bfe7c779     .k...g......y...
    5c50:	9d495183 bfe82680 6e978d50 bfe88312     .QI..&..P..n....
    5c60:	d1b71759 bfe8de00 c6a7ef9e bfe9374b     Y...........K7..
    5c70:	9652bd3c bfe98e21 f7ced917 bfe9e353     <.R.!.......S...
    5c80:	eb1c432d bfea36e2 020c49ba bfea872b     -C...6...I..+...
    5c90:	61e4f766 bfead6a1 e5604189 bfeb22d0     f..a.....A`.."..
    5ca0:	b1c432ca bfeb6e2e a1cac083 bfebb645     .2...n......E...
    5cb0:	23a29c78 bfebfcb9 80346dc6 bfec40b7     x..#.....m4..@..
    5cc0:	6e978d50 bfec8312 37b4a234 bfecc2f8     P..n....4..7....
    5cd0:	db8bac71 bfed0068 5a1cac08 bfed3b64     q...h......Zd;..
    5ce0:	6a7ef9db bfed74bc 559b3d08 bfedab9f     ..~j.t...=.U....
    5cf0:	1b71758e bfede00d bc01a36e bfee1205     .uq.....n.......
    5d00:	374bc6a8 bfee4189 4467381d bfee6f69     ..K7.A...8gDio..
    5d10:	7525460b bfee9a02 37b4a234 bfeec2f8     .F%u....4..7....
    5d20:	1de69ad4 bfeee8a7 95e9e1b1 bfef0cb2     ................
    5d30:	e8a71de7 bfef2e48 5f06f694 bfef4c98     ....H......_.L..
    5d40:	67381d7e bfef6944 4a2339c1 bfef837b     ~.8gDi...9#J{...
    5d50:	07c84b5e bfef9b3d a0275254 bfefb089     ^K..=...TR'.....
    5d60:	5c28f5c3 bfefc28f a9fbe76d bfefd2f1     ..(\....m.......
    5d70:	d288ce70 bfefe0de d5cfaace bfefec56     p...........V...
    5d80:	fcb923a3 bfeff487 b573eab3 bfeffb15     .#........s.....
    5d90:	91d14e3c bfeffe5c 00000000 bff00000     <N..\...........
    5da0:	91d14e3c bfeffe5c b573eab3 bfeffb15     <N..\.....s.....
    5db0:	fcb923a3 bfeff487 d5cfaace bfefec56     .#..........V...
    5dc0:	d288ce70 bfefe0de a9fbe76d bfefd2f1     p.......m.......
    5dd0:	5c28f5c3 bfefc28f a0275254 bfefb089     ..(\....TR'.....
    5de0:	07c84b5e bfef9b3d 4a2339c1 bfef837b     ^K..=....9#J{...
    5df0:	67381d7e bfef6944 5f06f694 bfef4c98     ~.8gDi....._.L..
    5e00:	e8a71de7 bfef2e48 95e9e1b1 bfef0cb2     ....H...........
    5e10:	1de69ad4 bfeee8a7 37b4a234 bfeec2f8     ........4..7....
    5e20:	7525460b bfee9a02 4467381d bfee6f69     .F%u.....8gDio..
    5e30:	374bc6a8 bfee4189 bc01a36e bfee1205     ..K7.A..n.......
    5e40:	1b71758e bfede00d 559b3d08 bfedab9f     .uq......=.U....
    5e50:	6a7ef9db bfed74bc 5a1cac08 bfed3b64     ..~j.t.....Zd;..
    5e60:	db8bac71 bfed0068 37b4a234 bfecc2f8     q...h...4..7....
    5e70:	6e978d50 bfec8312 80346dc6 bfec40b7     P..n.....m4..@..
    5e80:	23a29c78 bfebfcb9 a1cac083 bfebb645     x..#........E...
    5e90:	b1c432ca bfeb6e2e e5604189 bfeb22d0     .2...n...A`.."..
    5ea0:	61e4f766 bfead6a1 020c49ba bfea872b     f..a.....I..+...
    5eb0:	eb1c432d bfea36e2 f7ced917 bfe9e353     -C...6......S...
    5ec0:	9652bd3c bfe98e21 c6a7ef9e bfe9374b     <.R.!.......K7..
    5ed0:	d1b71759 bfe8de00 6e978d50 bfe88312     Y.......P..n....
    5ee0:	9d495183 bfe82680 a6b50b0f bfe7c779     .QI..&......y...
    5ef0:	f9096bba bfe767a0 6f0068dc bfe70481     .k...g...h.o....
    5f00:	2de00d1b bfe6a090 7e90ff97 bfe63afb     ...-.......~.:..
    5f10:	a9fbe76d bfe5d2f1 67381d7e bfe56944     m.......~.8gDi..
    5f20:	6d5cfaad bfe4fec5 4e3bcd36 bfe491d1     ..\m....6.;N....
    5f30:	c0ebedfa bfe42339 7c84b5dd bfe3b3d0     ....9#.....|....
    5f40:	12d77319 bfe341f2 f212d773 bfe2cf41     .s...A..s...A...
    5f50:	631f8a09 bfe25aee 65fd8adb bfe1e4f7     ...c.Z.....e....
    5f60:	faacd9e8 bfe16d5c d844d014 bfe0f4f0     ....\m....D.....
    5f70:	47ae147b bfe07ae1 00000000 bfe00000     {..G.z..........
    5f80:	94467382 bfdf06f6 ba5e353f bfde0c49     .sF.....?5^.I...
    5f90:	04189375 bfdd0e56 dfa43fe6 bfdc0ebe     u...V....?......
    5fa0:	ded288ce bfdb0be0 6fd21ff3 bfda075f     ...........o_...
    5fb0:	92a30553 bfd9013a 474538ef bfd7f972     S...:....8EGr...
    5fc0:	8db8bac7 bfd6f006 f7ced917 bfd5e353     ............S...
    5fd0:	61e4f766 bfd4d6a1 ef9db22d bfd3c6a7     f..a....-.......
    5fe0:	7d566cf4 bfd2b6ae 2eb1c433 bfd1a36e     .lV}....3...n...
    5ff0:	e00d1b71 bfd0902d 467381d8 bfcef694     q...-.....sF....
    6000:	cccccccd bfcccccc 9a6b50b1 bfca9c77     .........Pk.w...
    6010:	6809d495 bfc86c22 594af4f1 bfc63886     ...h"l....JY.8..
    6020:	4a8c154d bfc404ea 3bcd35a8 bfc1d14e     M..J.....5.;N...
    6030:	a161e4f7 bfbf34d6 126e978d bfbac083     ..a..4....n.....
    6040:	3c361134 bfb652bd ad42c3ca bfb1de69     4.6<.R....B.i...
    6050:	cb295e9e bfaac710 ad42c3ca bfa1de69     .^).......B.i...
    6060:	1eb851ec bf91eb85 00000000 80000000     .Q..............
    6070:	1eb851ec 3f91eb85 ad42c3ca 3fa1de69     .Q.....?..B.i..?
    6080:	cb295e9e 3faac710 ad42c3ca 3fb1de69     .^)....?..B.i..?
    6090:	3c361134 3fb652bd 126e978d 3fbac083     4.6<.R.?..n....?
    60a0:	a161e4f7 3fbf34d6 3bcd35a8 3fc1d14e     ..a..4.?.5.;N..?
    60b0:	4a8c154d 3fc404ea 594af4f1 3fc63886     M..J...?..JY.8.?
    60c0:	6809d495 3fc86c22 9a6b50b1 3fca9c77     ...h"l.?.Pk.w..?
    60d0:	cccccccd 3fcccccc 467381d8 3fcef694     .......?..sF...?
    60e0:	e00d1b71 3fd0902d 2eb1c433 3fd1a36e     q...-..?3...n..?
    60f0:	7d566cf4 3fd2b6ae ef9db22d 3fd3c6a7     .lV}...?-......?
    6100:	61e4f766 3fd4d6a1 f7ced917 3fd5e353     f..a...?....S..?
    6110:	8db8bac7 3fd6f006 474538ef 3fd7f972     .......?.8EGr..?
    6120:	92a30553 3fd9013a 6fd21ff3 3fda075f     S...:..?...o_..?
    6130:	ded288ce 3fdb0be0 dfa43fe6 3fdc0ebe     .......?.?.....?
    6140:	04189375 3fdd0e56 ba5e353f 3fde0c49     u...V..??5^.I..?
    6150:	94467382 3fdf06f6 00000000 3fe00000     .sF....?.......?
    6160:	47ae147b 3fe07ae1 d844d014 3fe0f4f0     {..G.z.?..D....?
    6170:	faacd9e8 3fe16d5c 65fd8adb 3fe1e4f7     ....\m.?...e...?
    6180:	631f8a09 3fe25aee f212d773 3fe2cf41     ...c.Z.?s...A..?
    6190:	12d77319 3fe341f2 7c84b5dd 3fe3b3d0     .s...A.?...|...?
    61a0:	c0ebedfa 3fe42339 4e3bcd36 3fe491d1     ....9#.?6.;N...?
    61b0:	6d5cfaad 3fe4fec5 67381d7e 3fe56944     ..\m...?~.8gDi.?
    61c0:	a9fbe76d 3fe5d2f1 7e90ff97 3fe63afb     m......?...~.:.?
    61d0:	2de00d1b 3fe6a090 6f0068dc 3fe70481     ...-...?.h.o...?
    61e0:	f9096bba 3fe767a0 a6b50b0f 3fe7c779     .k...g.?....y..?
    61f0:	9d495183 3fe82680 6e978d50 3fe88312     .QI..&.?P..n...?
    6200:	d1b71759 3fe8de00 c6a7ef9e 3fe9374b     Y......?....K7.?
    6210:	9652bd3c 3fe98e21 f7ced917 3fe9e353     <.R.!..?....S..?
    6220:	eb1c432d 3fea36e2 020c49ba 3fea872b     -C...6.?.I..+..?
    6230:	61e4f766 3fead6a1 e5604189 3feb22d0     f..a...?.A`..".?
    6240:	b1c432ca 3feb6e2e a1cac083 3febb645     .2...n.?....E..?
    6250:	23a29c78 3febfcb9 80346dc6 3fec40b7     x..#...?.m4..@.?
    6260:	6e978d50 3fec8312 37b4a234 3fecc2f8     P..n...?4..7...?
    6270:	db8bac71 3fed0068 5a1cac08 3fed3b64     q...h..?...Zd;.?
    6280:	6a7ef9db 3fed74bc 559b3d08 3fedab9f     ..~j.t.?.=.U...?
    6290:	1b71758e 3fede00d bc01a36e 3fee1205     .uq....?n......?
    62a0:	374bc6a8 3fee4189 4467381d 3fee6f69     ..K7.A.?.8gDio.?
    62b0:	7525460b 3fee9a02 37b4a234 3feec2f8     .F%u...?4..7...?
    62c0:	1de69ad4 3feee8a7 95e9e1b1 3fef0cb2     .......?.......?
    62d0:	e8a71de7 3fef2e48 5f06f694 3fef4c98     ....H..?..._.L.?
    62e0:	67381d7e 3fef6944 4a2339c1 3fef837b     ~.8gDi.?.9#J{..?
    62f0:	07c84b5e 3fef9b3d a0275254 3fefb089     ^K..=..?TR'....?
    6300:	5c28f5c3 3fefc28f a9fbe76d 3fefd2f1     ..(\...?m......?
    6310:	d288ce70 3fefe0de d5cfaace 3fefec56     p......?....V..?
    6320:	fcb923a3 3feff487 b573eab3 3feffb15     .#.....?..s....?
    6330:	91d14e3c 3feffe5c                       <N..\..?

00006338 <SINs>:
	...
    6340:	1eb851ec 3f91eb85 ad42c3ca 3fa1de69     .Q.....?..B.i..?
    6350:	cb295e9e 3faac710 ad42c3ca 3fb1de69     .^)....?..B.i..?
    6360:	3c361134 3fb652bd 126e978d 3fbac083     4.6<.R.?..n....?
    6370:	a161e4f7 3fbf34d6 3bcd35a8 3fc1d14e     ..a..4.?.5.;N..?
    6380:	4a8c154d 3fc404ea 594af4f1 3fc63886     M..J...?..JY.8.?
    6390:	6809d495 3fc86c22 9a6b50b1 3fca9c77     ...h"l.?.Pk.w..?
    63a0:	cccccccd 3fcccccc 467381d8 3fcef694     .......?..sF...?
    63b0:	e00d1b71 3fd0902d 2eb1c433 3fd1a36e     q...-..?3...n..?
    63c0:	7d566cf4 3fd2b6ae ef9db22d 3fd3c6a7     .lV}...?-......?
    63d0:	61e4f766 3fd4d6a1 f7ced917 3fd5e353     f..a...?....S..?
    63e0:	8db8bac7 3fd6f006 474538ef 3fd7f972     .......?.8EGr..?
    63f0:	92a30553 3fd9013a 6fd21ff3 3fda075f     S...:..?...o_..?
    6400:	ded288ce 3fdb0be0 dfa43fe6 3fdc0ebe     .......?.?.....?
    6410:	04189375 3fdd0e56 ba5e353f 3fde0c49     u...V..??5^.I..?
    6420:	94467382 3fdf06f6 00000000 3fe00000     .sF....?.......?
    6430:	47ae147b 3fe07ae1 d844d014 3fe0f4f0     {..G.z.?..D....?
    6440:	faacd9e8 3fe16d5c 65fd8adb 3fe1e4f7     ....\m.?...e...?
    6450:	631f8a09 3fe25aee f212d773 3fe2cf41     ...c.Z.?s...A..?
    6460:	12d77319 3fe341f2 7c84b5dd 3fe3b3d0     .s...A.?...|...?
    6470:	c0ebedfa 3fe42339 4e3bcd36 3fe491d1     ....9#.?6.;N...?
    6480:	6d5cfaad 3fe4fec5 67381d7e 3fe56944     ..\m...?~.8gDi.?
    6490:	a9fbe76d 3fe5d2f1 7e90ff97 3fe63afb     m......?...~.:.?
    64a0:	2de00d1b 3fe6a090 6f0068dc 3fe70481     ...-...?.h.o...?
    64b0:	f9096bba 3fe767a0 a6b50b0f 3fe7c779     .k...g.?....y..?
    64c0:	9d495183 3fe82680 6e978d50 3fe88312     .QI..&.?P..n...?
    64d0:	d1b71759 3fe8de00 c6a7ef9e 3fe9374b     Y......?....K7.?
    64e0:	9652bd3c 3fe98e21 f7ced917 3fe9e353     <.R.!..?....S..?
    64f0:	eb1c432d 3fea36e2 020c49ba 3fea872b     -C...6.?.I..+..?
    6500:	61e4f766 3fead6a1 e5604189 3feb22d0     f..a...?.A`..".?
    6510:	b1c432ca 3feb6e2e a1cac083 3febb645     .2...n.?....E..?
    6520:	23a29c78 3febfcb9 80346dc6 3fec40b7     x..#...?.m4..@.?
    6530:	6e978d50 3fec8312 37b4a234 3fecc2f8     P..n...?4..7...?
    6540:	db8bac71 3fed0068 5a1cac08 3fed3b64     q...h..?...Zd;.?
    6550:	6a7ef9db 3fed74bc 559b3d08 3fedab9f     ..~j.t.?.=.U...?
    6560:	1b71758e 3fede00d bc01a36e 3fee1205     .uq....?n......?
    6570:	374bc6a8 3fee4189 4467381d 3fee6f69     ..K7.A.?.8gDio.?
    6580:	7525460b 3fee9a02 37b4a234 3feec2f8     .F%u...?4..7...?
    6590:	1de69ad4 3feee8a7 95e9e1b1 3fef0cb2     .......?.......?
    65a0:	e8a71de7 3fef2e48 5f06f694 3fef4c98     ....H..?..._.L.?
    65b0:	67381d7e 3fef6944 4a2339c1 3fef837b     ~.8gDi.?.9#J{..?
    65c0:	07c84b5e 3fef9b3d a0275254 3fefb089     ^K..=..?TR'....?
    65d0:	5c28f5c3 3fefc28f a9fbe76d 3fefd2f1     ..(\...?m......?
    65e0:	d288ce70 3fefe0de d5cfaace 3fefec56     p......?....V..?
    65f0:	fcb923a3 3feff487 b573eab3 3feffb15     .#.....?..s....?
    6600:	91d14e3c 3feffe5c 00000000 3ff00000     <N..\..?.......?
    6610:	91d14e3c 3feffe5c b573eab3 3feffb15     <N..\..?..s....?
    6620:	fcb923a3 3feff487 d5cfaace 3fefec56     .#.....?....V..?
    6630:	d288ce70 3fefe0de a9fbe76d 3fefd2f1     p......?m......?
    6640:	5c28f5c3 3fefc28f a0275254 3fefb089     ..(\...?TR'....?
    6650:	07c84b5e 3fef9b3d 4a2339c1 3fef837b     ^K..=..?.9#J{..?
    6660:	67381d7e 3fef6944 5f06f694 3fef4c98     ~.8gDi.?..._.L.?
    6670:	e8a71de7 3fef2e48 95e9e1b1 3fef0cb2     ....H..?.......?
    6680:	1de69ad4 3feee8a7 37b4a234 3feec2f8     .......?4..7...?
    6690:	7525460b 3fee9a02 4467381d 3fee6f69     .F%u...?.8gDio.?
    66a0:	374bc6a8 3fee4189 bc01a36e 3fee1205     ..K7.A.?n......?
    66b0:	1b71758e 3fede00d 559b3d08 3fedab9f     .uq....?.=.U...?
    66c0:	6a7ef9db 3fed74bc 5a1cac08 3fed3b64     ..~j.t.?...Zd;.?
    66d0:	db8bac71 3fed0068 37b4a234 3fecc2f8     q...h..?4..7...?
    66e0:	6e978d50 3fec8312 80346dc6 3fec40b7     P..n...?.m4..@.?
    66f0:	23a29c78 3febfcb9 a1cac083 3febb645     x..#...?....E..?
    6700:	b1c432ca 3feb6e2e e5604189 3feb22d0     .2...n.?.A`..".?
    6710:	61e4f766 3fead6a1 020c49ba 3fea872b     f..a...?.I..+..?
    6720:	eb1c432d 3fea36e2 f7ced917 3fe9e353     -C...6.?....S..?
    6730:	9652bd3c 3fe98e21 c6a7ef9e 3fe9374b     <.R.!..?....K7.?
    6740:	d1b71759 3fe8de00 6e978d50 3fe88312     Y......?P..n...?
    6750:	9d495183 3fe82680 a6b50b0f 3fe7c779     .QI..&.?....y..?
    6760:	f9096bba 3fe767a0 6f0068dc 3fe70481     .k...g.?.h.o...?
    6770:	2de00d1b 3fe6a090 7e90ff97 3fe63afb     ...-...?...~.:.?
    6780:	a9fbe76d 3fe5d2f1 67381d7e 3fe56944     m......?~.8gDi.?
    6790:	6d5cfaad 3fe4fec5 4e3bcd36 3fe491d1     ..\m...?6.;N...?
    67a0:	c0ebedfa 3fe42339 7c84b5dd 3fe3b3d0     ....9#.?...|...?
    67b0:	12d77319 3fe341f2 f212d773 3fe2cf41     .s...A.?s...A..?
    67c0:	631f8a09 3fe25aee 65fd8adb 3fe1e4f7     ...c.Z.?...e...?
    67d0:	faacd9e8 3fe16d5c d844d014 3fe0f4f0     ....\m.?..D....?
    67e0:	47ae147b 3fe07ae1 00000000 3fe00000     {..G.z.?.......?
    67f0:	94467382 3fdf06f6 ba5e353f 3fde0c49     .sF....??5^.I..?
    6800:	04189375 3fdd0e56 dfa43fe6 3fdc0ebe     u...V..?.?.....?
    6810:	ded288ce 3fdb0be0 6fd21ff3 3fda075f     .......?...o_..?
    6820:	92a30553 3fd9013a 474538ef 3fd7f972     S...:..?.8EGr..?
    6830:	8db8bac7 3fd6f006 f7ced917 3fd5e353     .......?....S..?
    6840:	61e4f766 3fd4d6a1 ef9db22d 3fd3c6a7     f..a...?-......?
    6850:	7d566cf4 3fd2b6ae 2eb1c433 3fd1a36e     .lV}...?3...n..?
    6860:	e00d1b71 3fd0902d 467381d8 3fcef694     q...-..?..sF...?
    6870:	cccccccd 3fcccccc 9a6b50b1 3fca9c77     .......?.Pk.w..?
    6880:	6809d495 3fc86c22 594af4f1 3fc63886     ...h"l.?..JY.8.?
    6890:	4a8c154d 3fc404ea 3bcd35a8 3fc1d14e     M..J...?.5.;N..?
    68a0:	a161e4f7 3fbf34d6 126e978d 3fbac083     ..a..4.?..n....?
    68b0:	3c361134 3fb652bd ad42c3ca 3fb1de69     4.6<.R.?..B.i..?
    68c0:	cb295e9e 3faac710 ad42c3ca 3fa1de69     .^)....?..B.i..?
    68d0:	1eb851ec 3f91eb85 00000000 00000000     .Q.....?........
    68e0:	1eb851ec bf91eb85 ad42c3ca bfa1de69     .Q........B.i...
    68f0:	cb295e9e bfaac710 ad42c3ca bfb1de69     .^).......B.i...
    6900:	3c361134 bfb652bd 126e978d bfbac083     4.6<.R....n.....
    6910:	a161e4f7 bfbf34d6 3bcd35a8 bfc1d14e     ..a..4...5.;N...
    6920:	4a8c154d bfc404ea 594af4f1 bfc63886     M..J......JY.8..
    6930:	6809d495 bfc86c22 9a6b50b1 bfca9c77     ...h"l...Pk.w...
    6940:	cccccccd bfcccccc 467381d8 bfcef694     ..........sF....
    6950:	e00d1b71 bfd0902d 2eb1c433 bfd1a36e     q...-...3...n...
    6960:	7d566cf4 bfd2b6ae ef9db22d bfd3c6a7     .lV}....-.......
    6970:	61e4f766 bfd4d6a1 f7ced917 bfd5e353     f..a........S...
    6980:	8db8bac7 bfd6f006 474538ef bfd7f972     .........8EGr...
    6990:	92a30553 bfd9013a 6fd21ff3 bfda075f     S...:......o_...
    69a0:	ded288ce bfdb0be0 dfa43fe6 bfdc0ebe     .........?......
    69b0:	04189375 bfdd0e56 ba5e353f bfde0c49     u...V...?5^.I...
    69c0:	94467382 bfdf06f6 00000000 bfe00000     .sF.............
    69d0:	47ae147b bfe07ae1 d844d014 bfe0f4f0     {..G.z....D.....
    69e0:	faacd9e8 bfe16d5c 65fd8adb bfe1e4f7     ....\m.....e....
    69f0:	631f8a09 bfe25aee f212d773 bfe2cf41     ...c.Z..s...A...
    6a00:	12d77319 bfe341f2 7c84b5dd bfe3b3d0     .s...A.....|....
    6a10:	c0ebedfa bfe42339 4e3bcd36 bfe491d1     ....9#..6.;N....
    6a20:	6d5cfaad bfe4fec5 67381d7e bfe56944     ..\m....~.8gDi..
    6a30:	a9fbe76d bfe5d2f1 7e90ff97 bfe63afb     m..........~.:..
    6a40:	2de00d1b bfe6a090 6f0068dc bfe70481     ...-.....h.o....
    6a50:	f9096bba bfe767a0 a6b50b0f bfe7c779     .k...g......y...
    6a60:	9d495183 bfe82680 6e978d50 bfe88312     .QI..&..P..n....
    6a70:	d1b71759 bfe8de00 c6a7ef9e bfe9374b     Y...........K7..
    6a80:	9652bd3c bfe98e21 f7ced917 bfe9e353     <.R.!.......S...
    6a90:	eb1c432d bfea36e2 020c49ba bfea872b     -C...6...I..+...
    6aa0:	61e4f766 bfead6a1 e5604189 bfeb22d0     f..a.....A`.."..
    6ab0:	b1c432ca bfeb6e2e a1cac083 bfebb645     .2...n......E...
    6ac0:	23a29c78 bfebfcb9 80346dc6 bfec40b7     x..#.....m4..@..
    6ad0:	6e978d50 bfec8312 37b4a234 bfecc2f8     P..n....4..7....
    6ae0:	db8bac71 bfed0068 5a1cac08 bfed3b64     q...h......Zd;..
    6af0:	6a7ef9db bfed74bc 559b3d08 bfedab9f     ..~j.t...=.U....
    6b00:	1b71758e bfede00d bc01a36e bfee1205     .uq.....n.......
    6b10:	374bc6a8 bfee4189 4467381d bfee6f69     ..K7.A...8gDio..
    6b20:	7525460b bfee9a02 37b4a234 bfeec2f8     .F%u....4..7....
    6b30:	1de69ad4 bfeee8a7 95e9e1b1 bfef0cb2     ................
    6b40:	e8a71de7 bfef2e48 5f06f694 bfef4c98     ....H......_.L..
    6b50:	67381d7e bfef6944 4a2339c1 bfef837b     ~.8gDi...9#J{...
    6b60:	07c84b5e bfef9b3d a0275254 bfefb089     ^K..=...TR'.....
    6b70:	5c28f5c3 bfefc28f a9fbe76d bfefd2f1     ..(\....m.......
    6b80:	d288ce70 bfefe0de d5cfaace bfefec56     p...........V...
    6b90:	fcb923a3 bfeff487 b573eab3 bfeffb15     .#........s.....
    6ba0:	91d14e3c bfeffe5c 00000000 bff00000     <N..\...........
    6bb0:	91d14e3c bfeffe5c b573eab3 bfeffb15     <N..\.....s.....
    6bc0:	fcb923a3 bfeff487 d5cfaace bfefec56     .#..........V...
    6bd0:	d288ce70 bfefe0de a9fbe76d bfefd2f1     p.......m.......
    6be0:	5c28f5c3 bfefc28f a0275254 bfefb089     ..(\....TR'.....
    6bf0:	07c84b5e bfef9b3d 4a2339c1 bfef837b     ^K..=....9#J{...
    6c00:	67381d7e bfef6944 5f06f694 bfef4c98     ~.8gDi....._.L..
    6c10:	e8a71de7 bfef2e48 95e9e1b1 bfef0cb2     ....H...........
    6c20:	1de69ad4 bfeee8a7 37b4a234 bfeec2f8     ........4..7....
    6c30:	7525460b bfee9a02 4467381d bfee6f69     .F%u.....8gDio..
    6c40:	374bc6a8 bfee4189 bc01a36e bfee1205     ..K7.A..n.......
    6c50:	1b71758e bfede00d 559b3d08 bfedab9f     .uq......=.U....
    6c60:	6a7ef9db bfed74bc 5a1cac08 bfed3b64     ..~j.t.....Zd;..
    6c70:	db8bac71 bfed0068 37b4a234 bfecc2f8     q...h...4..7....
    6c80:	6e978d50 bfec8312 80346dc6 bfec40b7     P..n.....m4..@..
    6c90:	23a29c78 bfebfcb9 a1cac083 bfebb645     x..#........E...
    6ca0:	b1c432ca bfeb6e2e e5604189 bfeb22d0     .2...n...A`.."..
    6cb0:	61e4f766 bfead6a1 020c49ba bfea872b     f..a.....I..+...
    6cc0:	eb1c432d bfea36e2 f7ced917 bfe9e353     -C...6......S...
    6cd0:	9652bd3c bfe98e21 c6a7ef9e bfe9374b     <.R.!.......K7..
    6ce0:	d1b71759 bfe8de00 6e978d50 bfe88312     Y.......P..n....
    6cf0:	9d495183 bfe82680 a6b50b0f bfe7c779     .QI..&......y...
    6d00:	f9096bba bfe767a0 6f0068dc bfe70481     .k...g...h.o....
    6d10:	2de00d1b bfe6a090 7e90ff97 bfe63afb     ...-.......~.:..
    6d20:	a9fbe76d bfe5d2f1 67381d7e bfe56944     m.......~.8gDi..
    6d30:	6d5cfaad bfe4fec5 4e3bcd36 bfe491d1     ..\m....6.;N....
    6d40:	c0ebedfa bfe42339 7c84b5dd bfe3b3d0     ....9#.....|....
    6d50:	12d77319 bfe341f2 f212d773 bfe2cf41     .s...A..s...A...
    6d60:	631f8a09 bfe25aee 65fd8adb bfe1e4f7     ...c.Z.....e....
    6d70:	faacd9e8 bfe16d5c d844d014 bfe0f4f0     ....\m....D.....
    6d80:	47ae147b bfe07ae1 00000000 bfe00000     {..G.z..........
    6d90:	94467382 bfdf06f6 ba5e353f bfde0c49     .sF.....?5^.I...
    6da0:	04189375 bfdd0e56 dfa43fe6 bfdc0ebe     u...V....?......
    6db0:	ded288ce bfdb0be0 6fd21ff3 bfda075f     ...........o_...
    6dc0:	92a30553 bfd9013a 474538ef bfd7f972     S...:....8EGr...
    6dd0:	8db8bac7 bfd6f006 f7ced917 bfd5e353     ............S...
    6de0:	61e4f766 bfd4d6a1 ef9db22d bfd3c6a7     f..a....-.......
    6df0:	7d566cf4 bfd2b6ae 2eb1c433 bfd1a36e     .lV}....3...n...
    6e00:	e00d1b71 bfd0902d 467381d8 bfcef694     q...-.....sF....
    6e10:	cccccccd bfcccccc 9a6b50b1 bfca9c77     .........Pk.w...
    6e20:	6809d495 bfc86c22 594af4f1 bfc63886     ...h"l....JY.8..
    6e30:	4a8c154d bfc404ea 3bcd35a8 bfc1d14e     M..J.....5.;N...
    6e40:	a161e4f7 bfbf34d6 126e978d bfbac083     ..a..4....n.....
    6e50:	3c361134 bfb652bd ad42c3ca bfb1de69     4.6<.R....B.i...
    6e60:	cb295e9e bfaac710 ad42c3ca bfa1de69     .^).......B.i...
    6e70:	1eb851ec bf91eb85                       .Q......

00006e78 <SIN_large>:
    6e78:	00000000 00000477 000008ef 00000d65     ....w.......e...
    6e88:	000011db 0000164f 00001ac2 00001f32     ....O.......2...
    6e98:	000023a0 0000280c 00002c74 000030d8     .#...(..t,...0..
    6ea8:	00003539 00003996 00003dee 00004241     95...9...=..AB..
    6eb8:	00004690 00004ad8 00004f1b 00005358     .F...J...O..XS..
    6ec8:	0000578e 00005bbe 00005fe6 00006406     .W...[..._...d..
    6ed8:	0000681f 00006c30 00007039 00007438     .h..0l..9p..8t..
    6ee8:	0000782f 00007c1c 00007fff 000083d9     /x...|..........
    6ef8:	000087a8 00008b6d 00008f27 000092d5     ....m...'.......
    6f08:	00009679 00009a10 00009d9b 0000a11b     y...............
    6f18:	0000a48d 0000a7f3 0000ab4c 0000ae97     ........L.......
    6f28:	0000b1d5 0000b504 0000b826 0000bb39     ........&...9...
    6f38:	0000be3e 0000c134 0000c41b 0000c6f3     >...4...........
    6f48:	0000c9bb 0000cc73 0000cf1b 0000d1b3     ....s...........
    6f58:	0000d43b 0000d6b3 0000d919 0000db6f     ;...........o...
    6f68:	0000ddb3 0000dfe7 0000e208 0000e419     ................
    6f78:	0000e617 0000e803 0000e9de 0000eba6     ................
    6f88:	0000ed5b 0000eeff 0000f08f 0000f20d     [...............
    6f98:	0000f378 0000f4d0 0000f615 0000f746     x...........F...
    6fa8:	0000f865 0000f970 0000fa67 0000fb4b     e...p...g...K...
    6fb8:	0000fc1c 0000fcd9 0000fd82 0000fe17     ................
    6fc8:	0000fe98 0000ff06 0000ff60 0000ffa6     ........`.......
    6fd8:	0000ffd8 0000fff6 00010000 0000fff6     ................
    6fe8:	0000ffd8 0000ffa6 0000ff60 0000ff06     ........`.......
    6ff8:	0000fe98 0000fe17 0000fd82 0000fcd9     ................
    7008:	0000fc1c 0000fb4b 0000fa67 0000f970     ....K...g...p...
    7018:	0000f865 0000f746 0000f615 0000f4d0     e...F...........
    7028:	0000f378 0000f20d 0000f08f 0000eeff     x...............
    7038:	0000ed5b 0000eba6 0000e9de 0000e803     [...............
    7048:	0000e617 0000e419 0000e208 0000dfe7     ................
    7058:	0000ddb3 0000db6f 0000d919 0000d6b3     ....o...........
    7068:	0000d43b 0000d1b3 0000cf1b 0000cc73     ;...........s...
    7078:	0000c9bb 0000c6f3 0000c41b 0000c134     ............4...
    7088:	0000be3e 0000bb39 0000b826 0000b504     >...9...&.......
    7098:	0000b1d5 0000ae97 0000ab4c 0000a7f3     ........L.......
    70a8:	0000a48d 0000a11b 00009d9b 00009a10     ................
    70b8:	00009679 000092d5 00008f27 00008b6d     y.......'...m...
    70c8:	000087a8 000083d9 00007fff 00007c1c     .............|..
    70d8:	0000782f 00007438 00007039 00006c30     /x..8t..9p..0l..
    70e8:	0000681f 00006406 00005fe6 00005bbe     .h...d..._...[..
    70f8:	0000578e 00005358 00004f1b 00004ad8     .W..XS...O...J..
    7108:	00004690 00004241 00003dee 00003996     .F..AB...=...9..
    7118:	00003539 000030d8 00002c74 0000280c     95...0..t,...(..
    7128:	000023a0 00001f32 00001ac2 0000164f     .#..2.......O...
    7138:	000011db 00000d65 000008ef 00000477     ....e.......w...
    7148:	00000000 fffffb89 fffff711 fffff29b     ................
    7158:	ffffee25 ffffe9b1 ffffe53e ffffe0ce     %.......>.......
    7168:	ffffdc60 ffffd7f4 ffffd38c ffffcf28     `...........(...
    7178:	ffffcac7 ffffc66a ffffc212 ffffbdbf     ....j...........
    7188:	ffffb970 ffffb528 ffffb0e5 ffffaca8     p...(...........
    7198:	ffffa872 ffffa442 ffffa01a ffff9bfa     r...B...........
    71a8:	ffff97e1 ffff93d0 ffff8fc7 ffff8bc8     ................
    71b8:	ffff87d1 ffff83e4 ffff8000 ffff7c27     ............'|..
    71c8:	ffff7858 ffff7493 ffff70d9 ffff6d2b     Xx...t...p..+m..
    71d8:	ffff6987 ffff65f0 ffff6265 ffff5ee5     .i...e..eb...^..
    71e8:	ffff5b73 ffff580d ffff54b4 ffff5169     s[...X...T..iQ..
    71f8:	ffff4e2b ffff4afc ffff47da ffff44c7     +N...J...G...D..
    7208:	ffff41c2 ffff3ecc ffff3be5 ffff390d     .A...>...;...9..
    7218:	ffff3645 ffff338d ffff30e5 ffff2e4d     E6...3...0..M...
    7228:	ffff2bc5 ffff294d ffff26e7 ffff2491     .+..M)...&...$..
    7238:	ffff224d ffff2019 ffff1df8 ffff1be7     M"... ..........
    7248:	ffff19e9 ffff17fd ffff1622 ffff145a     ........"...Z...
    7258:	ffff12a5 ffff1101 ffff0f71 ffff0df3     ........q.......
    7268:	ffff0c88 ffff0b30 ffff09eb ffff08ba     ....0...........
    7278:	ffff079b ffff0690 ffff0599 ffff04b5     ................
    7288:	ffff03e4 ffff0327 ffff027e ffff01e9     ....'...~.......
    7298:	ffff0168 ffff00fa ffff00a0 ffff005a     h...........Z...
    72a8:	ffff0028 ffff000a ffff0000 ffff000a     (...............
    72b8:	ffff0028 ffff005a ffff00a0 ffff00fa     (...Z...........
    72c8:	ffff0168 ffff01e9 ffff027e ffff0327     h.......~...'...
    72d8:	ffff03e4 ffff04b5 ffff0599 ffff0690     ................
    72e8:	ffff079b ffff08ba ffff09eb ffff0b30     ............0...
    72f8:	ffff0c88 ffff0df3 ffff0f71 ffff1101     ........q.......
    7308:	ffff12a5 ffff145a ffff1622 ffff17fd     ....Z...".......
    7318:	ffff19e9 ffff1be7 ffff1df8 ffff2019     ............. ..
    7328:	ffff224d ffff2491 ffff26e7 ffff294d     M"...$...&..M)..
    7338:	ffff2bc5 ffff2e4d ffff30e5 ffff338d     .+..M....0...3..
    7348:	ffff3645 ffff390d ffff3be5 ffff3ecc     E6...9...;...>..
    7358:	ffff41c2 ffff44c7 ffff47da ffff4afc     .A...D...G...J..
    7368:	ffff4e2b ffff5169 ffff54b4 ffff580d     +N..iQ...T...X..
    7378:	ffff5b73 ffff5ee5 ffff6265 ffff65f0     s[...^..eb...e..
    7388:	ffff6987 ffff6d2b ffff70d9 ffff7493     .i..+m...p...t..
    7398:	ffff7858 ffff7c27 ffff8000 ffff83e4     Xx..'|..........
    73a8:	ffff87d1 ffff8bc8 ffff8fc7 ffff93d0     ................
    73b8:	ffff97e1 ffff9bfa ffffa01a ffffa442     ............B...
    73c8:	ffffa872 ffffaca8 ffffb0e5 ffffb528     r...........(...
    73d8:	ffffb970 ffffbdbf ffffc212 ffffc66a     p...........j...
    73e8:	ffffcac7 ffffcf28 ffffd38c ffffd7f4     ....(...........
    73f8:	ffffdc60 ffffe0ce ffffe53e ffffe9b1     `.......>.......
    7408:	ffffee25 fffff29b fffff711 fffffb89     %...............

00007418 <COS_large>:
    7418:	00010000 0000fff6 0000ffd8 0000ffa6     ................
    7428:	0000ff60 0000ff06 0000fe98 0000fe17     `...............
    7438:	0000fd82 0000fcd9 0000fc1c 0000fb4b     ............K...
    7448:	0000fa67 0000f970 0000f865 0000f746     g...p...e...F...
    7458:	0000f615 0000f4d0 0000f378 0000f20d     ........x.......
    7468:	0000f08f 0000eeff 0000ed5b 0000eba6     ........[.......
    7478:	0000e9de 0000e803 0000e617 0000e419     ................
    7488:	0000e208 0000dfe7 0000ddb3 0000db6f     ............o...
    7498:	0000d919 0000d6b3 0000d43b 0000d1b3     ........;.......
    74a8:	0000cf1b 0000cc73 0000c9bb 0000c6f3     ....s...........
    74b8:	0000c41b 0000c134 0000be3e 0000bb39     ....4...>...9...
    74c8:	0000b826 0000b504 0000b1d5 0000ae97     &...............
    74d8:	0000ab4c 0000a7f3 0000a48d 0000a11b     L...............
    74e8:	00009d9b 00009a10 00009679 000092d5     ........y.......
    74f8:	00008f27 00008b6d 000087a8 000083d9     '...m...........
    7508:	00008000 00007c1c 0000782f 00007438     .....|../x..8t..
    7518:	00007039 00006c30 0000681f 00006406     9p..0l...h...d..
    7528:	00005fe6 00005bbe 0000578e 00005358     ._...[...W..XS..
    7538:	00004f1b 00004ad8 00004690 00004241     .O...J...F..AB..
    7548:	00003dee 00003996 00003539 000030d8     .=...9..95...0..
    7558:	00002c74 0000280c 000023a0 00001f32     t,...(...#..2...
    7568:	00001ac2 0000164f 000011db 00000d65     ....O.......e...
    7578:	000008ef 00000477 00000000 fffffb89     ....w...........
    7588:	fffff711 fffff29b ffffee25 ffffe9b1     ........%.......
    7598:	ffffe53e ffffe0ce ffffdc60 ffffd7f4     >.......`.......
    75a8:	ffffd38c ffffcf28 ffffcac7 ffffc66a     ....(.......j...
    75b8:	ffffc212 ffffbdbf ffffb970 ffffb528     ........p...(...
    75c8:	ffffb0e5 ffffaca8 ffffa872 ffffa442     ........r...B...
    75d8:	ffffa01a ffff9bfa ffff97e1 ffff93d0     ................
    75e8:	ffff8fc7 ffff8bc8 ffff87d1 ffff83e4     ................
    75f8:	ffff8001 ffff7c27 ffff7858 ffff7493     ....'|..Xx...t..
    7608:	ffff70d9 ffff6d2b ffff6987 ffff65f0     .p..+m...i...e..
    7618:	ffff6265 ffff5ee5 ffff5b73 ffff580d     eb...^..s[...X..
    7628:	ffff54b4 ffff5169 ffff4e2b ffff4afc     .T..iQ..+N...J..
    7638:	ffff47da ffff44c7 ffff41c2 ffff3ecc     .G...D...A...>..
    7648:	ffff3be5 ffff390d ffff3645 ffff338d     .;...9..E6...3..
    7658:	ffff30e5 ffff2e4d ffff2bc5 ffff294d     .0..M....+..M)..
    7668:	ffff26e7 ffff2491 ffff224d ffff2019     .&...$..M"... ..
    7678:	ffff1df8 ffff1be7 ffff19e9 ffff17fd     ................
    7688:	ffff1622 ffff145a ffff12a5 ffff1101     "...Z...........
    7698:	ffff0f71 ffff0df3 ffff0c88 ffff0b30     q...........0...
    76a8:	ffff09eb ffff08ba ffff079b ffff0690     ................
    76b8:	ffff0599 ffff04b5 ffff03e4 ffff0327     ............'...
    76c8:	ffff027e ffff01e9 ffff0168 ffff00fa     ~.......h.......
    76d8:	ffff00a0 ffff005a ffff0028 ffff000a     ....Z...(.......
    76e8:	ffff0000 ffff000a ffff0028 ffff005a     ........(...Z...
    76f8:	ffff00a0 ffff00fa ffff0168 ffff01e9     ........h.......
    7708:	ffff027e ffff0327 ffff03e4 ffff04b5     ~...'...........
    7718:	ffff0599 ffff0690 ffff079b ffff08ba     ................
    7728:	ffff09eb ffff0b30 ffff0c88 ffff0df3     ....0...........
    7738:	ffff0f71 ffff1101 ffff12a5 ffff145a     q...........Z...
    7748:	ffff1622 ffff17fd ffff19e9 ffff1be7     "...............
    7758:	ffff1df8 ffff2019 ffff224d ffff2491     ..... ..M"...$..
    7768:	ffff26e7 ffff294d ffff2bc5 ffff2e4d     .&..M)...+..M...
    7778:	ffff30e5 ffff338d ffff3645 ffff390d     .0...3..E6...9..
    7788:	ffff3be5 ffff3ecc ffff41c2 ffff44c7     .;...>...A...D..
    7798:	ffff47da ffff4afc ffff4e2b ffff5169     .G...J..+N..iQ..
    77a8:	ffff54b4 ffff580d ffff5b73 ffff5ee5     .T...X..s[...^..
    77b8:	ffff6265 ffff65f0 ffff6987 ffff6d2b     eb...e...i..+m..
    77c8:	ffff70d9 ffff7493 ffff7858 ffff7c27     .p...t..Xx..'|..
    77d8:	ffff8000 ffff83e4 ffff87d1 ffff8bc8     ................
    77e8:	ffff8fc7 ffff93d0 ffff97e1 ffff9bfa     ................
    77f8:	ffffa01a ffffa442 ffffa872 ffffaca8     ....B...r.......
    7808:	ffffb0e5 ffffb528 ffffb970 ffffbdbf     ....(...p.......
    7818:	ffffc212 ffffc66a ffffcac7 ffffcf28     ....j.......(...
    7828:	ffffd38c ffffd7f4 ffffdc60 ffffe0ce     ........`.......
    7838:	ffffe53e ffffe9b1 ffffee25 fffff29b     >.......%.......
    7848:	fffff711 fffffb89 00000000 00000477     ............w...
    7858:	000008ef 00000d65 000011db 0000164f     ....e.......O...
    7868:	00001ac2 00001f32 000023a0 0000280c     ....2....#...(..
    7878:	00002c74 000030d8 00003539 00003996     t,...0..95...9..
    7888:	00003dee 00004241 00004690 00004ad8     .=..AB...F...J..
    7898:	00004f1b 00005358 0000578e 00005bbe     .O..XS...W...[..
    78a8:	00005fe6 00006406 0000681f 00006c30     ._...d...h..0l..
    78b8:	00007039 00007438 0000782f 00007c1c     9p..8t../x...|..
    78c8:	00008000 000083d9 000087a8 00008b6d     ............m...
    78d8:	00008f27 000092d5 00009679 00009a10     '.......y.......
    78e8:	00009d9b 0000a11b 0000a48d 0000a7f3     ................
    78f8:	0000ab4c 0000ae97 0000b1d5 0000b504     L...............
    7908:	0000b826 0000bb39 0000be3e 0000c134     &...9...>...4...
    7918:	0000c41b 0000c6f3 0000c9bb 0000cc73     ............s...
    7928:	0000cf1b 0000d1b3 0000d43b 0000d6b3     ........;.......
    7938:	0000d919 0000db6f 0000ddb3 0000dfe7     ....o...........
    7948:	0000e208 0000e419 0000e617 0000e803     ................
    7958:	0000e9de 0000eba6 0000ed5b 0000eeff     ........[.......
    7968:	0000f08f 0000f20d 0000f378 0000f4d0     ........x.......
    7978:	0000f615 0000f746 0000f865 0000f970     ....F...e...p...
    7988:	0000fa67 0000fb4b 0000fc1c 0000fcd9     g...K...........
    7998:	0000fd82 0000fe17 0000fe98 0000ff06     ................
    79a8:	0000ff60 0000ffa6 0000ffd8 0000fff6     `...............

000079b8 <npio2_hw>:
    79b8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
    79c8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
    79d8:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
    79e8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
    79f8:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
    7a08:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
    7a18:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
    7a28:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

00007a38 <two_over_pi>:
    7a38:	000000a2 000000f9 00000083 0000006e     ............n...
    7a48:	0000004e 00000044 00000015 00000029     N...D.......)...
    7a58:	000000fc 00000027 00000057 000000d1     ....'...W.......
    7a68:	000000f5 00000034 000000dd 000000c0     ....4...........
    7a78:	000000db 00000062 00000095 00000099     ....b...........
    7a88:	0000003c 00000043 00000090 00000041     <...C.......A...
    7a98:	000000fe 00000051 00000063 000000ab     ....Q...c.......
    7aa8:	000000de 000000bb 000000c5 00000061     ............a...
    7ab8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
    7ac8:	00000042 0000004d 000000d2 000000e0     B...M...........
    7ad8:	00000006 00000049 0000002e 000000ea     ....I...........
    7ae8:	00000009 000000d1 00000092 0000001c     ................
    7af8:	000000fe 0000001d 000000eb 0000001c     ................
    7b08:	000000b1 00000029 000000a7 0000003e     ....).......>...
    7b18:	000000e8 00000082 00000035 000000f5     ........5.......
    7b28:	0000002e 000000bb 00000044 00000084     ........D.......
    7b38:	000000e9 0000009c 00000070 00000026     ........p...&...
    7b48:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
    7b58:	00000039 00000091 000000d6 00000039     9...........9...
    7b68:	00000083 00000053 00000039 000000f4     ....S...9.......
    7b78:	0000009c 00000084 0000005f 0000008b     ........_.......
    7b88:	000000bd 000000f9 00000028 0000003b     ........(...;...
    7b98:	0000001f 000000f8 00000097 000000ff     ................
    7ba8:	000000de 00000005 00000098 0000000f     ................
    7bb8:	000000ef 0000002f 00000011 0000008b     ..../...........
    7bc8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
    7bd8:	0000006d 00000036 0000007e 000000cf     m...6...~.......
    7be8:	00000027 000000cb 00000009 000000b7     '...............
    7bf8:	0000004f 00000046 0000003f 00000066     O...F...?...f...
    7c08:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
    7c18:	00000075 00000027 000000ba 000000c7     u...'...........
    7c28:	000000eb 000000e5 000000f1 0000007b     ............{...
    7c38:	0000003d 00000007 00000039 000000f7     =.......9.......
    7c48:	0000008a 00000052 00000092 000000ea     ....R...........
    7c58:	0000006b 000000fb 0000005f 000000b1     k......._.......
    7c68:	0000001f 0000008d 0000005d 00000008     ........].......
    7c78:	00000056 00000003 00000030 00000046     V.......0...F...
    7c88:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
    7c98:	000000f0 000000cf 000000bc 00000020     ............ ...
    7ca8:	0000009a 000000f4 00000036 0000001d     ........6.......
    7cb8:	000000a9 000000e3 00000091 00000061     ............a...
    7cc8:	0000005e 000000e6 0000001b 00000008     ^...............
    7cd8:	00000065 00000099 00000085 0000005f     e..........._...
    7ce8:	00000014 000000a0 00000068 00000040     ........h...@...
    7cf8:	0000008d 000000ff 000000d8 00000080     ................
    7d08:	0000004d 00000073 00000027 00000031     M...s...'...1...
    7d18:	00000006 00000006 00000015 00000056     ............V...
    7d28:	000000ca 00000073 000000a8 000000c9     ....s...........
    7d38:	00000060 000000e2 0000007b 000000c0     `.......{.......
    7d48:	0000008c 0000006b                       ....k...

00007d50 <init_jk>:
    7d50:	00000004 00000007 00000009              ............

00007d5c <PIo2>:
    7d5c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
    7d6c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
    7d7c:	1fc40000 1bc60000 17440000              ..........D.

00007d88 <_global_impure_ptr>:
    7d88:	00007e50 00000043                       P~..C...

00007d90 <_init>:
    7d90:	e1a0c00d 	mov	r12, sp
    7d94:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7d98:	e24cb004 	sub	r11, r12, #4
    7d9c:	e24bd028 	sub	sp, r11, #40	; 0x28
    7da0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    7da4:	e12fff1e 	bx	lr

00007da8 <__init_array_start>:
    7da8:	00005638 	.word	0x00005638

00007dac <__frame_dummy_init_array_entry>:
    7dac:	00000208                                ....

00007db0 <__libc_fini>:
    7db0:	e1a0c00d 	mov	r12, sp
    7db4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7db8:	e24cb004 	sub	r11, r12, #4
    7dbc:	e24bd028 	sub	sp, r11, #40	; 0x28
    7dc0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    7dc4:	e12fff1e 	bx	lr

00007dc8 <__fini_array_start>:
    7dc8:	000001c4 	.word	0x000001c4

00007dcc <__cs3_regions>:
	...
    7dd8:	00008280 	.word	0x00008280
    7ddc:	00009c90 	.word	0x00009c90
